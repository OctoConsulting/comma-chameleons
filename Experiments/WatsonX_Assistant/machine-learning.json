{
  "openapi": "3.0.2",
  "info": {
    "version": "4.0.0 (2023/06/26)",
    "title": "Watson Machine Learning",
    "x-alternate-name": "watson_machine_learning",
    "termsOfService": "https://www.ibm.com/software/sla/sladb.nsf/sla/bm-6883-09",
    "description": "## Introduction\n\nStep by step instructions on how to use IBM Watson Machine Learning (WML)\ncan be found [here](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/ml-overview.html?context=analytics).\n\n## Authentication\n\nIn order to authenticate in WML, you need to generate an `IAM token`.\n\nTo start working with the API, create an IAM token as described below\n* [Watson Machine Learning authentication](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/ml-authentication.html)\n* [Authenticating with IAM tokens](https://cloud.ibm.com/docs/services/watson?topic=watson-iam#iam)\n* [Create an IAM access token for a user or service ID](https://cloud.ibm.com/apidocs/iam-identity-token-api#create-an-iam-access-token-for-a-user-or-service-i)\n\nThe obtained `IAM token` needs to be prepended with the word `Bearer`, and it needs to be passed\nin the `Authorization` header for API calls.\n\nExample of an API request with a 'Bearer' access token:\n\n> curl https://us-south.ml.cloud.ibm.com/ml/v4/models\n>   -H \"Authorization: Bearer eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hb...\"\n\n## Versioning\n\nAPI requests require a version parameter that takes a date in the format `version=YYYY-MM-DD`. When there is a change\nto the API in a [backwards-incompatible way](https://github.com/watson-developer-cloud/api-guidelines/#versioning),\nthere will be a new version date published.\n\nThe service uses the API version for the date you specify or the most recent version before that date.\nIt is not recommended to default to the current date. Instead, specify a date that matches a version\nthat is compatible with your app and do not change it until your app is ready for a later version.\n\n## Error handling\n\nThe IBM Watson Machine Learning uses standard HTTP response codes to indicate indicate if a method completed\nsuccessfully. A `200`, `201` or `204` HTTP response always indicates success.\nHTTP response codes with the format `4xx` indicate a failure. A `500` HTTP response code usually indicates\nan internal system error that cannot be resolved by the user.\n\nNote that all un-recognized query parameters to an API call may be silently ignored.\n",
    "x-try-it-out-enabled": false,
    "x-codegen-config": {
      "groupMethodsByTag": true,
      "cli": {
        "apiPackage": "github.ibm.com/AILifecycle/cpdctl",
        "cliPluginName": "cpdctl",
        "cliExecutableName": "",
        "serviceCommandName": "ml",
        "disableConfigCommand": true
      },
      "python": {
        "apiPackage": "ibm_wml"
      },
      "java": {
        "apiPackage": "com.ibm.cloud.wml"
      }
    },
    "x-last-updated": "2022-02-01"
  },
  "tags": [
    {
      "name": "Deployments",
      "x-cli-command-group": "Deployment"
    },
    {
      "name": "Deployment Jobs",
      "x-cli-command-group": "Deployment Job"
    },
    {
      "name": "Deployment Job Definitions",
      "x-cli-command-group": "Deployment Job Definition"
    },
    {
      "name": "Experiments",
      "x-cli-command-group": "Experiment"
    },
    {
      "name": "Functions",
      "x-cli-command-group": "Function"
    },
    {
      "name": "Instances",
      "x-cli-command-group": "Instance"
    },
    {
      "name": "Models",
      "x-cli-command-group": "Model"
    },
    {
      "name": "Model Definitions",
      "x-cli-command-group": "Model Definition",
      "description": "Manage Model Definitions. These commands are supported starting with release 3.5 of Cloud Pak for Data."
    },
    {
      "name": "Pipelines",
      "x-cli-command-group": "Pipeline"
    },
    {
      "name": "Remote Training Systems",
      "x-cli-command-group": "Remote Training System"
    },
    {
      "name": "Trainings",
      "x-cli-command-group": "Training"
    },
    {
      "name": "Training Definitions",
      "x-cli-command-group": "Training Definition",
      "description": "Manage Training Definitions. These commands are supported starting with release 3.5 of Cloud Pak for Data."
    }
  ],
  "servers": [
    {
      "url": "https://us-south.ml.cloud.ibm.com",
      "description": "WML Public Cloud"
    },
    {
      "url": "https://wml-fvt.ml.test.cloud.ibm.com",
      "description": "WML FVT Cloud (for test only - will be removed)"
    }
  ],
  "security": [
    {
      "IAMToken": []
    }
  ],
  "components": {
    "securitySchemes": {
      "IAMToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Bearer 20378ad6fe0498596ffc84b0",
        "description": "You can authorize using an access token (obtained from the IAM endpoint)\n  to every WML REST API endpoint. The access token needs to be prepended with \"Bearer\" word in the \"Authorization\" header.\nNote that you should not add \"Bearer\" when authorizing in the Swagger application.\n"
      }
    },
    "schemas": {
      "space_id_mandatory": {
        "type": "string",
        "description": "The space that contains the resource.\n",
        "example": "3fc54cf1-252f-424b-b52d-5cdd9814987f"
      },
      "space_id": {
        "type": "string",
        "description": "The space that contains the resource.\nEither `space_id` or `project_id` has to be given.\n",
        "example": "3fc54cf1-252f-424b-b52d-5cdd9814987f"
      },
      "project_id": {
        "type": "string",
        "description": "The project that contains the resource.\nEither `space_id` or `project_id` has to be given.\n",
        "example": "12ac4cf1-252f-424b-b52d-5cdd9814987f"
      },
      "rel": {
        "title": "rel",
        "type": "object",
        "description": "A reference to a resource.\n",
        "properties": {
          "id": {
            "description": "The id of the referenced resource.\n",
            "type": "string",
            "example": "4cedab6d-e8e4-4214-b81a-2ddb122db2ab"
          },
          "rev": {
            "description": "The revision of the referenced resource.\n",
            "type": "string",
            "example": "2"
          }
        },
        "required": [
          "id"
        ]
      },
      "simple_rel": {
        "title": "simple_rel",
        "type": "object",
        "description": "A reference to a resource.\n",
        "properties": {
          "id": {
            "description": "The id of the referenced resource.\n",
            "type": "string",
            "example": "4cedab6d-e8e4-4214-b81a-2ddb122db2ab"
          }
        },
        "required": [
          "id"
        ]
      },
      "software_spec_rel": {
        "title": "software_spec_rel",
        "description": "A software specification.\n",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the software specification.\nOne, and only one, of `id` or `name` must be set.\n",
            "type": "string",
            "example": "4cedab6d-e8e4-4214-b81a-2ddb122db2ab"
          },
          "rev": {
            "description": "The revision of the software specification.\n",
            "type": "string",
            "example": "2"
          },
          "name": {
            "description": "The name of the software specification.\nOne, and only one, of `id` or `name` must be set.\n",
            "type": "string",
            "example": "..."
          }
        }
      },
      "hardware_spec_rel": {
        "title": "hardware_spec_rel",
        "description": "A hardware specification.\n",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the hardware specification.\nOne, and only one, of `id` or `name` must be set.\n",
            "type": "string",
            "example": "4cedab6d-e8e4-4214-b81a-2ddb122db2ab"
          },
          "rev": {
            "description": "The revision of the hardware specification.\n",
            "type": "string",
            "example": "2"
          },
          "name": {
            "description": "The name of the hardware specification.\nOne, and only one, of `id` or `name` must be set.\n",
            "type": "string"
          },
          "num_nodes": {
            "type": "integer",
            "description": "The number of nodes applied to a computation.\n",
            "example": 2
          }
        }
      },
      "data_preprocessing_transformation": {
        "title": "data_preprocessing_transformation",
        "description": "A preprocessing transformation.\n",
        "type": "object",
        "properties": {
          "stage": {
            "type": "string",
            "description": "The preprocessing stage.\n",
            "example": "sampling"
          },
          "input": {
            "type": "object",
            "description": "Data shape (rows, columns) passed as input to the transformer/transformation.\n",
            "properties": {
              "rows": {
                "type": "integer",
                "example": 50000
              },
              "columns": {
                "type": "integer",
                "example": 81
              }
            }
          },
          "output": {
            "type": "object",
            "description": "Data shape after the transformation.\n",
            "properties": {
              "rows": {
                "type": "integer",
                "example": 1463
              },
              "columns": {
                "type": "integer",
                "example": 81
              }
            }
          },
          "props": {
            "type": "object",
            "description": "Properties of preprocessing transformation.\n",
            "example": {
              "type": "random"
            }
          }
        }
      },
      "model_definition_id": {
        "title": "model_definition",
        "description": "The model definition.\n",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the model definition.\n",
            "type": "string",
            "example": "4cedab6d-e8e4-4214-b81a-2ddb122db2ab"
          }
        }
      },
      "object_location": {
        "title": "object_location",
        "type": "object",
        "description": "A reference to data.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item identification inside a collection.\n"
          },
          "type": {
            "description": "The data source type like `connection_asset` or `data_asset`.\n",
            "type": "string",
            "enum": [
              "connection_asset",
              "data_asset",
              "url"
            ],
            "example": "connection_asset"
          },
          "connection": {
            "type": "object",
            "description": "Contains a set of fields specific to each connection.\nSee here for [details about specifying connections](#datareferences).\n",
            "example": {
              "id": "2d07a6b4-8fa9-43ab-91c8-befcd9dab8d2"
            }
          },
          "location": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains a set of fields specific to each connection.\n",
            "example": {
              "bucket": "wml-v4-fvt-remote-tests",
              "file_name": "heart_testpy379.csv"
            }
          }
        },
        "required": [
          "type",
          "location"
        ]
      },
      "object_location_optim": {
        "title": "object_location",
        "type": "object",
        "description": "A reference to data.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item identification inside a collection.\n",
            "example": "b6e37189-90e8-4260-86d8-0a6d2a02aa99"
          },
          "type": {
            "description": "The data source type like `connection_asset` or `data_asset`.\n",
            "type": "string",
            "enum": [
              "connection_asset",
              "data_asset",
              "url"
            ],
            "example": "connection_asset"
          },
          "connection": {
            "type": "object",
            "description": "Contains a set of fields specific to each connection.\nSee here for [details about specifying connections](#datareferences).\n",
            "example": {
              "id": "48b05fe5-be10-43d7-9676-f4f7cb303bd0"
            }
          },
          "location": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains a set of fields that describe the location of the data with respect\nto the `connection`.\n",
            "example": {
              "bucket": "wml-v4-fvt-remote-tests",
              "file_name": "heart_testpy379.csv"
            }
          }
        },
        "required": [
          "id",
          "type",
          "location"
        ]
      },
      "data_connection_reference": {
        "title": "data_connection",
        "type": "object",
        "description": "A reference to data with an optional data schema.\nIf necessary, it is possible to provide a data connection that contains\njust the data schema.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "Optional item identification inside a collection.\n",
            "example": "8d3682dd-2858-43c9-bfd7-12a79abcfb0c"
          },
          "type": {
            "description": "The data source type like `connection_asset` or `data_asset`.\nIf the data connection contains just a schema then this field is not required.\n",
            "type": "string",
            "enum": [
              "connection_asset",
              "data_asset",
              "url"
            ],
            "example": "connection_asset"
          },
          "connection": {
            "type": "object",
            "description": "Contains a set of fields specific to each connection.\nSee here for [details about specifying connections](#datareferences).\n",
            "example": {
              "id": "2d07a6b4-8fa9-43ab-91c8-befcd9dab8d2"
            }
          },
          "location": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains a set of fields that describe the location of the data with respect\nto the `connection`.\n",
            "example": {
              "bucket": "wml-v4-fvt-remote-tests",
              "file_name": "heart_testpy379.csv"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/data_schema"
          }
        },
        "required": [
          "type"
        ]
      },
      "data_schema": {
        "title": "data_schema",
        "type": "object",
        "description": "The schema of the expected data, see\n[datarecord-metadata-v2-schema](https://raw.githubusercontent.com/elyra-ai/pipeline-schemas/master/common-pipeline/datarecord-metadata/datarecord-metadata-v2-schema.json)\nfor the schema definition.\n",
        "properties": {
          "id": {
            "description": "An id to identify a schema.\n",
            "type": "string",
            "example": "t1"
          },
          "name": {
            "description": "A name for the schema.\n",
            "type": "string",
            "example": "Tasks"
          },
          "fields": {
            "type": "array",
            "description": "The fields that describe the data schema.\n",
            "items": {
              "type": "object",
              "description": "A description of a field in the data schema.\n"
            },
            "example": [
              {
                "name": "duration",
                "type": "number"
              }
            ]
          },
          "type": {
            "description": "The type of the schema, can be ignored or set to `struct` or `DataFrame`.\n",
            "type": "string",
            "example": "struct"
          }
        },
        "required": [
          "id",
          "fields"
        ]
      },
      "resource_meta_base": {
        "type": "object",
        "description": "Common metadata for a resource.\n",
        "example": {
          "id": "6213cf1-252f-424b-b52d-5cdd9814956c",
          "rev": "2",
          "owner": "guy",
          "created_at": "2020-05-02T16:27:51Z",
          "modified_at": "2020-05-02T16:30:51Z",
          "parent_id": "dfe1cf1-252f-424b-b52d-5cdd9814600c",
          "name": "my-name",
          "description": "My resource",
          "tags": [
            "t1",
            "t2"
          ],
          "commit_info": {
            "committed_at": "2020-05-02T16:27:51Z",
            "commit_message": "Updated to TF 2.0"
          },
          "space_id": "3fc54cf1-252f-424b-b52d-5cdd9814987f"
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the resource.\n"
          },
          "rev": {
            "type": "string",
            "description": "The revision of the resource.\n"
          },
          "owner": {
            "description": "The user id which created this resource.\n",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when the resource was created.\n"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when the resource was last modified.\n"
          },
          "parent_id": {
            "type": "string",
            "description": "The id of the parent resource where applicable.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.\n"
          },
          "description": {
            "type": "string",
            "description": "A description of the resource.\n"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "commit_info": {
            "type": "object",
            "description": "Information related to the revision.\n",
            "properties": {
              "committed_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time when the revision was committed.\n"
              },
              "commit_message": {
                "type": "string",
                "description": "The message that was provided when the revision was created.\n"
              }
            },
            "required": [
              "committed_at"
            ]
          }
        },
        "required": [
          "id",
          "created_at"
        ]
      },
      "resource_meta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resource_meta_base"
          },
          {
            "type": "object",
            "description": "Common metadata for a resource where `project_id` or `space_id` must be present.\n",
            "properties": {
              "space_id": {
                "$ref": "#/components/schemas/space_id"
              },
              "project_id": {
                "$ref": "#/components/schemas/project_id"
              }
            }
          }
        ]
      },
      "tags": {
        "type": "array",
        "description": "A list of tags for this resource.\n",
        "items": {
          "type": "string"
        },
        "example": [
          "t1",
          "t2"
        ]
      },
      "error": {
        "title": "error",
        "description": "The data returned when an error is encountered.\n",
        "properties": {
          "trace": {
            "type": "string",
            "example": "w7vrpmm9479z2o0hxhex0ttgat4qv9ev",
            "description": "An identifier that can be used to trace the request.\n"
          },
          "errors": {
            "type": "array",
            "description": "The list of errors.\n",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "missing_field",
                  "description": "A simple code that should convey the general sense of the error.\n"
                },
                "message": {
                  "type": "string",
                  "example": "The 'name' field is required.",
                  "description": "The message that describes the error.\n"
                },
                "more_info": {
                  "type": "string",
                  "example": "https://cloud.ibm.com/apidocs/machine-learning#models-get",
                  "description": "A reference to a more detailed explanation when available.\n"
                }
              },
              "required": [
                "code",
                "message"
              ]
            }
          }
        },
        "required": [
          "trace",
          "errors"
        ]
      },
      "json_patch": {
        "description": "See [JSON PATCH RFC 6902](https://tools.ietf.org/html/rfc6902).\n",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/json_patch_operation"
        }
      },
      "json_patch_operation": {
        "type": "object",
        "description": "This model represents an individual patch operation to be performed on an object, as defined by\n[RFC 6902](https://tools.ietf.org/html/rfc6902).\n",
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed.\n",
            "enum": [
              "add",
              "remove",
              "replace"
            ]
          },
          "path": {
            "type": "string",
            "description": "The pointer that identifies the field that is the target of the operation.\n"
          },
          "value": {
            "description": "The value to be used within the operation.\n"
          }
        },
        "required": [
          "op",
          "path"
        ]
      },
      "pagination_base": {
        "type": "object",
        "description": "Information for paging when querying resources.\n",
        "properties": {
          "total_count": {
            "description": "Computed explicitly only when 'total_count=true' query parameter is present.\nThis is in order to avoid performance penalties.\n",
            "type": "integer"
          },
          "limit": {
            "type": "integer",
            "description": "The number of items to return in each page.\n",
            "example": 10,
            "minimum": 1,
            "maximum": 200
          },
          "first": {
            "type": "object",
            "description": "The reference to the first item in the current page.\n",
            "properties": {
              "href": {
                "description": "The uri of the first resource returned.\n",
                "type": "string"
              }
            },
            "required": [
              "href"
            ]
          },
          "next": {
            "type": "object",
            "description": "A reference to the first item of the next page, if any.\n",
            "properties": {
              "href": {
                "description": "The uri of the next set of resources.\n",
                "type": "string"
              }
            },
            "required": [
              "href"
            ]
          }
        },
        "required": [
          "limit",
          "first"
        ]
      },
      "pagination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination_base"
          },
          {
            "type": "object",
            "description": "Information for paging when querying resources.\n",
            "properties": {
              "total_count": {
                "description": "The total number of resources.\nComputed explicitly only when 'total_count=true' query parameter is present.\nThis is in order to avoid performance penalties.\n",
                "type": "integer",
                "example": 1
              }
            }
          }
        ]
      },
      "paginationtc": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination_base"
          },
          {
            "type": "object",
            "description": "Information for paging when querying resources.\n",
            "properties": {
              "total_count": {
                "description": "The total number of resources.\n",
                "type": "integer",
                "example": 1
              }
            }
          }
        ]
      },
      "metrics": {
        "type": "array",
        "description": "Metrics that can be returned by an operation.\n",
        "items": {
          "$ref": "#/components/schemas/metric"
        }
      },
      "metric": {
        "type": "object",
        "description": "A metric.\n",
        "properties": {
          "timestamp": {
            "type": "string",
            "example": "2018-12-01T10:11:12Z",
            "format": "date-time",
            "description": "A timestamp for the metrics.\n"
          },
          "iteration": {
            "type": "integer",
            "example": 2,
            "description": "The iteration number.\n"
          },
          "ml_metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "The metrics.\n",
            "example": {
              "loss": 0.679798743,
              "learning_rate": 0.082342
            }
          },
          "ts_metrics": {
            "description": "The metrics from the time series. For more information, please see the [Time Series Implementation](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/autoai-timeseries-details.html?audience=wdp#ts-metrics) documentation.\n",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ts_training"
              },
              {
                "$ref": "#/components/schemas/ts_holdout"
              },
              {
                "$ref": "#/components/schemas/ts_backtest"
              }
            ]
          },
          "tsad_metrics": {
            "type": "object",
            "description": "The metrics from the time series anomaly detection. For more information, please see the [Creating a Time Series Anomaly Prediction](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/autoai-ts-ad.html?audience=wdp) documentation.\n",
            "oneOf": [
              {
                "$ref": "#/components/schemas/tsad_holdout"
              },
              {
                "$ref": "#/components/schemas/tsad_training"
              }
            ]
          },
          "ml_federated_metrics": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ml_federated_metric"
            },
            "description": "The metrics from federated training.\n"
          },
          "context": {
            "$ref": "#/components/schemas/metrics_context"
          }
        },
        "required": [
          "timestamp"
        ]
      },
      "ts_training": {
        "type": "object",
        "properties": {
          "training": {
            "type": "object",
            "description": "Metrics generated during training.\n",
            "properties": {
              "neg_symmetric_mean_absolute_percentage_error": {
                "type": "number",
                "example": -38.35790647931252,
                "description": "At each fitted point, the absolute difference between actual value and predicted value is divided by half the sum of absolute actual value and predicted value, and then average all such values across all the fitted points.\n"
              }
            }
          }
        }
      },
      "ts_holdout": {
        "type": "object",
        "description": "Metrics generated during evaluation of the pipeline on holdout data.\n",
        "properties": {
          "holdout": {
            "$ref": "#/components/schemas/ts_metric_levels"
          }
        }
      },
      "ts_backtest": {
        "type": "object",
        "description": "Metrics generated during evaluation of the pipeline on backtest data.\n",
        "properties": {
          "backtest": {
            "$ref": "#/components/schemas/ts_metric_backtest"
          }
        }
      },
      "ts_metric_backtest": {
        "type": "object",
        "description": "Metrics from the backtest data.\n",
        "properties": {
          "avg": {
            "$ref": "#/components/schemas/ts_metric_levels"
          },
          "iterations": {
            "type": "array",
            "description": "Time Series metrics evaluated per iteration on the backtest data.\n",
            "items": {
              "type": "object",
              "properties": {
                "neg_mean_absolute_error": {
                  "description": "Average of absolute differences between the actual values and predicted values.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n",
                  "example": -878588.6578985065
                },
                "neg_root_mean_squared_error": {
                  "description": "Square root of the mean of the squared differences between the actual values and predicted values.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n",
                  "example": -2538978.632119892
                },
                "r2": {
                  "description": "Measure of how the model performance compares to the baseline model, or mean model. \nThe R2 should be equal or less than 1. Negative R2 value means that the model under consideration is worse than the mean model. \nZero R2 value means that the model under consideration is as good or bad as the mean model. Positive R2 value means that the model under consideration is better than the mean model.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n",
                  "example": -0.08879768735347082
                },
                "neg_symmetric_mean_absolute_percentage_error": {
                  "description": "At each fitted point, the absolute difference between actual value and predicted value is divided by half the sum of absolute actual value and predicted value, and then average all such values across all the fitted points.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n",
                  "example": -81.9963552543977
                }
              }
            }
          }
        }
      },
      "ts_metric_levels": {
        "type": "object",
        "properties": {
          "neg_symmetric_mean_absolute_percentage_error": {
            "example": -15.90536589868604,
            "description": "At each fitted point, the absolute difference between actual value and predicted value is divided by half the sum of absolute actual value and predicted value, and then average all such values across all the fitted points.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n"
          },
          "neg_avg_symmetric_mean_absolute_percentage_error": {
            "type": "number",
            "example": -15.90536589868604,
            "description": "The average of the Negative Symmetric Mean Absolute Percentage Error (SMAPE).\n"
          },
          "r2": {
            "example": 0.7441381249677504,
            "description": "Measure of how the model performance compares to the baseline model, or mean model. \nThe R2 should be equal or less than 1. Negative R2 value means that the model under consideration is worse than the mean model. \nZero R2 value means that the model under consideration is as good or bad as the mean model. Positive R2 value means that the model under consideration is better than the mean model.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n"
          },
          "avg_r2": {
            "type": "number",
            "example": 0.7441381249677504,
            "description": "The average of the r2.\n"
          },
          "neg_root_mean_squared_error": {
            "example": -14.06642756741435,
            "description": "Square root of the mean of the squared differences between the actual values and predicted values.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n"
          },
          "neg_avg_root_mean_squared_error": {
            "type": "number",
            "example": -14.06642756741435,
            "description": "Average of the Negative Root Mean Squared Error (RMSE). Only appears in the univariate case.\n"
          },
          "neg_mean_absolute_error": {
            "example": -11.35884979602475,
            "description": "Average of absolute differences between the actual values and predicted values.\nA single `float` in the univariate case, an array of `float` in the multivariate case.\n"
          },
          "neg_avg_mean_absolute_error": {
            "type": "number",
            "example": -11.35884979602475,
            "description": "Average of the Mean Absolute Error (MAE). Only appears in the univariate case.\n"
          }
        }
      },
      "tsad_training": {
        "type": "object",
        "description": "Metrics generated in model selection phase.\n",
        "properties": {
          "aggregated_score": {
            "type": "array",
            "description": "This score is calculated based on an aggregation of the optimized metric (for example, Average precision) values for the 4 anomaly types. The scores for each pipeline are ranked, using the Borda count method, and then weighted for their contribution to the aggregate score. Unlike a standard metric score, this value is not between 0 and 1. A higher value indicates a stronger score.\n",
            "items": {
              "type": "object",
              "properties": {
                "p1": {
                  "type": "number",
                  "example": 14.5,
                  "description": "Metric score for the Pipeline 1.\n"
                }
              }
            }
          }
        }
      },
      "tsad_holdout": {
        "type": "object",
        "description": "Metrics generated in model evaluation phase.\n",
        "properties": {
          "iterations": {
            "type": "array",
            "description": "Simulated anomaly values are injected into the holdout data in each iteration for pipeline evaluation.\n",
            "items": {
              "type": "object",
              "properties": {
                "average_precision": {
                  "type": "object",
                  "description": "(Recommended): Average of the accuracy of predictions based on percent of positive predictions that are correct.\n",
                  "properties": {
                    "localized_extreme": {
                      "type": "number",
                      "description": "Localized extreme anomaly refers to an unusual data point in a time series, which deviates significantly from the data points around it.\n",
                      "example": 0.5294117647058824
                    },
                    "level_shift": {
                      "type": "number",
                      "description": "Level shift anomaly refers to a segment in which the mean value of a time series is changed.\n",
                      "example": 1
                    },
                    "variance": {
                      "type": "number",
                      "description": "variance anomaly refers to a segment of time series in which the variance of a time series is changed.\n",
                      "example": 0.5471792823589406
                    },
                    "trend": {
                      "type": "number",
                      "description": "trend anomaly refers to a segment of time series, which has a trend change compared to the time series before the segment.\n",
                      "example": 0.8183221870721871
                    }
                  }
                },
                "roc_auc": {
                  "type": "object",
                  "description": "Measure of how well a parameter can distinguish between two groups.\n",
                  "example": {
                    "localized_extreme": 0.13559322033898305,
                    "level_shift": 0,
                    "variance": 0.2501797268152408,
                    "trend": 0.009259259259259259
                  }
                },
                "f1": {
                  "type": "object",
                  "description": "Harmonic average of the precision and recall, with best value of 1 (perfect precision and recall) and worst at 0.\n",
                  "example": {
                    "localized_extreme": 0.16666666666666669,
                    "level_shift": 0.8,
                    "variance": 0.41666666666666663,
                    "trend": 0.7741935483870968
                  }
                },
                "precision": {
                  "type": "object",
                  "description": "Measures the accuracy of a prediction based on percent of positive predictions that are correct.\n",
                  "example": {
                    "localized_extreme": 0.1,
                    "level_shift": 0.6666666666666666,
                    "variance": 0.45454545454545453,
                    "trend": 0.631578947368421
                  }
                },
                "recall": {
                  "type": "object",
                  "description": "Measures the percentage of identified positive predictions against possible positives in data set.\n",
                  "example": {
                    "localized_extreme": 0.5,
                    "level_shift": 1,
                    "variance": 0.38461538461538464,
                    "trend": 1
                  }
                }
              }
            }
          },
          "agg": {
            "type": "object",
            "description": "Aggregated scores of anomaly types per metric.\n",
            "properties": {
              "average_precision": {
                "type": "object",
                "description": "Average of the accuracy of predictions based on percent of positive predictions that are correct.\n",
                "properties": {
                  "level_shift": {
                    "type": "object",
                    "description": "Level shift anomaly refers to a segment in which the mean value of a time series is changed.\n",
                    "properties": {
                      "mean": {
                        "type": "number",
                        "example": 1
                      },
                      "range": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          1,
                          1
                        ]
                      }
                    }
                  },
                  "localized_extreme": {
                    "type": "object",
                    "description": "Localized extreme anomaly refers to an unusual data point in a time series, which deviates significantly from the data points around it.\n",
                    "properties": {
                      "mean": {
                        "type": "number",
                        "example": 1
                      },
                      "range": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          1,
                          1
                        ]
                      }
                    }
                  },
                  "trend": {
                    "type": "object",
                    "description": "trend anomaly refers to a segment of time series, which has a trend change compared to the time series before the segment.\n",
                    "properties": {
                      "mean": {
                        "type": "number",
                        "example": 1
                      },
                      "range": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          1,
                          1
                        ]
                      }
                    }
                  },
                  "variance": {
                    "type": "object",
                    "description": "variance anomaly refers to a segment of time series in which the variance of a time series is changed.\n",
                    "properties": {
                      "mean": {
                        "type": "number",
                        "example": 1
                      },
                      "range": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "example": [
                          1,
                          1
                        ]
                      }
                    }
                  }
                }
              },
              "f1": {
                "type": "object",
                "description": "Harmonic average of the precision and recall, with best value of 1 (perfect precision and recall) and worst at 0.\n",
                "properties": {
                  "level_shift": {
                    "type": "object",
                    "example": {
                      "mean": 0.7798245614035088,
                      "range": [
                        0.7499999999999999,
                        0.8
                      ]
                    }
                  },
                  "localized_extreme": {
                    "type": "object",
                    "example": {
                      "mean": 0.17676767676767677,
                      "range": [
                        0.16666666666666669,
                        0.1818181818181818
                      ]
                    }
                  },
                  "trend": {
                    "type": "object",
                    "example": {
                      "mean": 0.7585532746823068,
                      "range": [
                        0.7272727272727273,
                        0.7741935483870968
                      ]
                    }
                  },
                  "variance": {
                    "type": "object",
                    "example": {
                      "mean": 0.4616858237547892,
                      "range": [
                        0.41666666666666663,
                        0.5517241379310345
                      ]
                    }
                  }
                }
              },
              "precision": {
                "type": "object",
                "description": "Measures the accuracy of a prediction based on percent of positive predictions that are correct.\n",
                "properties": {
                  "level_shift": {
                    "type": "object",
                    "example": {
                      "mean": 0.7798245614035088,
                      "range": [
                        0.7499999999999999,
                        0.8
                      ]
                    }
                  },
                  "localized_extreme": {
                    "type": "object",
                    "example": {
                      "mean": 0.17676767676767677,
                      "range": [
                        0.16666666666666669,
                        0.1818181818181818
                      ]
                    }
                  },
                  "trend": {
                    "type": "object",
                    "example": {
                      "mean": 0.7585532746823068,
                      "range": [
                        0.7272727272727273,
                        0.7741935483870968
                      ]
                    }
                  },
                  "variance": {
                    "type": "object",
                    "example": {
                      "mean": 0.4616858237547892,
                      "range": [
                        0.41666666666666663,
                        0.5517241379310345
                      ]
                    }
                  }
                }
              },
              "recall": {
                "type": "object",
                "description": "Measures the percentage of identified positive predictions against possible positives in data set.\n",
                "properties": {
                  "level_shift": {
                    "type": "object",
                    "example": {
                      "mean": 0.7798245614035088,
                      "range": [
                        0.7499999999999999,
                        0.8
                      ]
                    }
                  },
                  "localized_extreme": {
                    "type": "object",
                    "example": {
                      "mean": 0.17676767676767677,
                      "range": [
                        0.16666666666666669,
                        0.1818181818181818
                      ]
                    }
                  },
                  "trend": {
                    "type": "object",
                    "example": {
                      "mean": 0.7585532746823068,
                      "range": [
                        0.7272727272727273,
                        0.7741935483870968
                      ]
                    }
                  },
                  "variance": {
                    "type": "object",
                    "example": {
                      "mean": 0.4616858237547892,
                      "range": [
                        0.41666666666666663,
                        0.5517241379310345
                      ]
                    }
                  }
                }
              },
              "roc_auc": {
                "type": "object",
                "description": "Measure of how well a parameter can distinguish between two groups.\n",
                "properties": {
                  "level_shift": {
                    "type": "object",
                    "example": {
                      "mean": 0.7798245614035088,
                      "range": [
                        0.7499999999999999,
                        0.8
                      ]
                    }
                  },
                  "localized_extreme": {
                    "type": "object",
                    "example": {
                      "mean": 0.17676767676767677,
                      "range": [
                        0.16666666666666669,
                        0.1818181818181818
                      ]
                    }
                  },
                  "trend": {
                    "type": "object",
                    "example": {
                      "mean": 0.7585532746823068,
                      "range": [
                        0.7272727272727273,
                        0.7741935483870968
                      ]
                    }
                  },
                  "variance": {
                    "type": "object",
                    "example": {
                      "mean": 0.4616858237547892,
                      "range": [
                        0.41666666666666663,
                        0.5517241379310345
                      ]
                    }
                  }
                }
              }
            }
          },
          "supporting_rank": {
            "type": "object",
            "description": "Pipeline ranking based on the specified metric.\n",
            "maxProperties": 1,
            "properties": {
              "average_precision": {
                "type": "object",
                "description": "(Recommended): Average of the accuracy of predictions based on percent of positive predictions that are correct.\n",
                "properties": {
                  "level_shift": {
                    "type": "object",
                    "description": "Level shift anomaly refers to a segment in which the mean value of a time series is changed. Includes scores for all pipelines.\n",
                    "properties": {
                      "p1": {
                        "type": "number",
                        "example": 2,
                        "description": "The score of the Level Shift anomaly with average_precision for Pipeline 1.\n"
                      },
                      "p2": {
                        "type": "number",
                        "example": 2,
                        "description": "The score of the Level Shift anomaly with average_precision for Pipeline 2.\n"
                      },
                      "p3": {
                        "type": "number",
                        "example": 2,
                        "description": "The score of the Level Shift anomaly with average_precision for Pipeline 3.\n"
                      },
                      "p4": {
                        "type": "number",
                        "example": 5,
                        "description": "The score of the Level Shift anomaly with average_precision for Pipeline 4.\n"
                      },
                      "p5": {
                        "type": "number",
                        "example": 5,
                        "description": "The score of the Level Shift anomaly with average_precision for Pipeline 5.\n"
                      },
                      "p6": {
                        "type": "number",
                        "example": 6,
                        "description": "The score of the Level Shift anomaly with average_precision for Pipeline 6.\n"
                      }
                    }
                  },
                  "localized_extreme": {
                    "type": "object",
                    "description": "Localized extreme anomaly refers to an unusual data point in a time series, which deviates significantly from the data points around it.  Includes scores for all pipelines.\n",
                    "example": {
                      "p1": 1,
                      "p2": 2,
                      "p3": 3,
                      "p4": 4,
                      "p5": 5,
                      "p6": 6
                    }
                  },
                  "trend": {
                    "type": "object",
                    "description": "trend anomaly refers to a segment of time series, which has a trend change compared to the time series before the segment.  Includes scores for all pipelines.\n",
                    "example": {
                      "p1": 1,
                      "p2": 2,
                      "p3": 3,
                      "p4": 4,
                      "p5": 5,
                      "p6": 6
                    }
                  },
                  "variance": {
                    "type": "object",
                    "description": "variance anomaly refers to a segment of time series in which the variance of a time series is changed.  Includes scores for all pipelines.\n",
                    "example": {
                      "p1": 1,
                      "p2": 2,
                      "p3": 3,
                      "p4": 4,
                      "p5": 5,
                      "p6": 6
                    }
                  }
                }
              },
              "f1": {
                "type": "object",
                "description": "Harmonic average of the precision and recall, with best value of 1 (perfect precision and recall) and worst at 0.\n",
                "example": {
                  "level_shift": {
                    "p1": 2,
                    "p2": 2,
                    "p5": 2,
                    "p4": 4,
                    "p6": 5,
                    "p3": 6
                  },
                  "localized_extreme": {
                    "p1": 1,
                    "p2": 2,
                    "p3": 3,
                    "p4": 4,
                    "p5": 5,
                    "p6": 6
                  },
                  "trend": {
                    "p1": 1.5,
                    "p2": 1.5,
                    "p5": 3,
                    "p6": 4,
                    "p4": 5,
                    "p3": 6
                  },
                  "variance": {
                    "p4": 1,
                    "p5": 2,
                    "p6": 3,
                    "p3": 4,
                    "p1": 5,
                    "p2": 6
                  }
                }
              },
              "roc_auc": {
                "type": "object",
                "description": "Measure of how well a parameter can distinguish between two groups.\n",
                "example": {
                  "level_shift": {
                    "p1": 2,
                    "p2": 2,
                    "p5": 2,
                    "p4": 4,
                    "p6": 5,
                    "p3": 6
                  },
                  "localized_extreme": {
                    "p1": 1,
                    "p2": 2,
                    "p3": 3,
                    "p4": 4,
                    "p5": 5,
                    "p6": 6
                  },
                  "trend": {
                    "p1": 1.5,
                    "p2": 1.5,
                    "p5": 3,
                    "p6": 4,
                    "p4": 5,
                    "p3": 6
                  },
                  "variance": {
                    "p4": 1,
                    "p5": 2,
                    "p6": 3,
                    "p3": 4,
                    "p1": 5,
                    "p2": 6
                  }
                }
              },
              "precision": {
                "type": "object",
                "description": "Measures the accuracy of a prediction based on percent of positive predictions that are correct.\n",
                "example": {
                  "level_shift": {
                    "p1": 2,
                    "p2": 2,
                    "p5": 2,
                    "p4": 4,
                    "p6": 5,
                    "p3": 6
                  },
                  "localized_extreme": {
                    "p1": 1,
                    "p2": 2,
                    "p3": 3,
                    "p4": 4,
                    "p5": 5,
                    "p6": 6
                  },
                  "trend": {
                    "p1": 1.5,
                    "p2": 1.5,
                    "p5": 3,
                    "p6": 4,
                    "p4": 5,
                    "p3": 6
                  },
                  "variance": {
                    "p4": 1,
                    "p5": 2,
                    "p6": 3,
                    "p3": 4,
                    "p1": 5,
                    "p2": 6
                  }
                }
              },
              "recall": {
                "type": "object",
                "description": "Measures the percentage of identified positive predictions against possible positives in data set.\n",
                "example": {
                  "level_shift": {
                    "p1": 2,
                    "p2": 2,
                    "p5": 2,
                    "p4": 4,
                    "p6": 5,
                    "p3": 6
                  },
                  "localized_extreme": {
                    "p1": 1,
                    "p2": 2,
                    "p3": 3,
                    "p4": 4,
                    "p5": 5,
                    "p6": 6
                  },
                  "trend": {
                    "p1": 1.5,
                    "p2": 1.5,
                    "p5": 3,
                    "p6": 4,
                    "p4": 5,
                    "p3": 6
                  },
                  "variance": {
                    "p4": 1,
                    "p5": 2,
                    "p6": 3,
                    "p3": 4,
                    "p1": 5,
                    "p2": 6
                  }
                }
              }
            }
          },
          "aggregated_score": {
            "type": "array",
            "description": "This score is calculated based on an aggregation of the optimized metric (for example, Average precision) values for the 4 anomaly types. The scores for each pipeline are ranked, using the Borda count method, and then weighted for their contribution to the aggregate score. Unlike a standard metric score, this value is not between 0 and 1. A higher value indicates a stronger score.\n",
            "items": {
              "type": "object",
              "properties": {
                "p1": {
                  "type": "number",
                  "example": 14.5,
                  "description": "Metric score for the Pipeline 1.\n"
                },
                "p2": {
                  "type": "number",
                  "example": 12,
                  "description": "Metric score for the Pipeline 2.\n"
                },
                "p3": {
                  "type": "number",
                  "example": 12,
                  "description": "Metric score for the Pipeline 3.\n"
                },
                "p4": {
                  "type": "number",
                  "example": 10,
                  "description": "Metric score for the Pipeline 4.\n"
                },
                "p5": {
                  "type": "number",
                  "example": 6,
                  "description": "Metric score for the Pipeline 5.\n"
                },
                "p6": {
                  "type": "number",
                  "example": 5,
                  "description": "Metric score for the Pipeline 6.\n"
                }
              }
            }
          }
        }
      },
      "ml_federated_metric": {
        "type": "object",
        "description": "The metrics from federated training.\n",
        "properties": {
          "remote_training_systems": {
            "type": "array",
            "description": "Remote training systems.\n",
            "items": {
              "$ref": "#/components/schemas/remote_training_system_metric"
            }
          },
          "global": {
            "type": "number"
          }
        }
      },
      "remote_training_system_metric": {
        "type": "object",
        "description": "The remote training system metric.\n",
        "properties": {
          "id": {
            "type": "string"
          },
          "local": {
            "type": "number"
          },
          "fused": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "metrics_context": {
        "description": "Provides extra information for this training stage in the context of auto-ml.\n",
        "type": "object",
        "properties": {
          "deployment_id": {
            "type": "string",
            "description": "The deployment that created the metrics.\n"
          },
          "intermediate_model": {
            "$ref": "#/components/schemas/intermediate_model"
          },
          "phase": {
            "type": "string"
          },
          "step": {
            "$ref": "#/components/schemas/step_info"
          },
          "classes": {
            "description": "The prediction target labels. Can be either an array of `number` such as `[0,1]` or array of `string` such as`['positive','negative','neutral']`.\n\n\n",
            "type": "array",
            "items": {},
            "example": [
              "positive",
              "negative",
              "neutral"
            ]
          },
          "binary_classification": {
            "$ref": "#/components/schemas/binary_classification"
          },
          "multi_class_classification": {
            "$ref": "#/components/schemas/multi_class_classifications"
          },
          "features_importance": {
            "$ref": "#/components/schemas/features_importance"
          },
          "schema": {
            "type": "string"
          },
          "estimators": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "incremental_training": {
            "$ref": "#/components/schemas/incremental_training"
          },
          "prediction_type": {
            "type": "string",
            "description": "The type of machine learning problem:\n* `binary` - Binary Classification\n* `multiclass` - Multiclass Classification\n* `regression` - Regression\n* `forecasting` - Forecasting\n* `timeseries_anomaly_prediction` - Time Series Anomaly Prediction\n\n\n",
            "enum": [
              "binary",
              "multiclass",
              "regression",
              "forecasting",
              "timeseries_anomaly_prediction"
            ],
            "example": "regression"
          }
        }
      },
      "binary_classification": {
        "type": "object",
        "properties": {
          "confusion_matrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/confusion_matrix"
            }
          },
          "roc_curves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/roc_curve"
            }
          }
        }
      },
      "multi_class_classifications": {
        "type": "object",
        "properties": {
          "one_vs_all": {
            "description": "The classifications details for each class.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/multi_class_classification"
            }
          },
          "one_vs_all_location": {
            "description": "The location of the classifications details in associated storage.",
            "example": "data/7d9ac934-9073-4ffd-846c-7b1f912b1ab2/data/autoai/pre_hpo_d_output/Pipeline1/one_vs_all.json",
            "type": "string"
          }
        }
      },
      "multi_class_classification": {
        "type": "object",
        "properties": {
          "class": {
            "description": "The class name.",
            "type": "string"
          },
          "confusion_matrix_location": {
            "description": "The location of the confusion_matrix details in associated storage.",
            "example": "data/7d9ac934-9073-4ffd-846c-7b1f912b1ab2/data/autoai/pre_hpo_d_output/Pipeline1/confusion_matrix.json",
            "type": "string"
          },
          "confusion_matrix": {
            "$ref": "#/components/schemas/confusion_matrix"
          },
          "roc_curve_location": {
            "description": "The location of the roc (receiver operating characteristic) curve details in the associated storage.",
            "example": "data/7d9ac934-9073-4ffd-846c-7b1f912b1ab2/data/autoai/pre_hpo_d_output/Pipeline1/roc_curve.json",
            "type": "string"
          },
          "roc_curve": {
            "$ref": "#/components/schemas/roc_curve"
          }
        },
        "required": [
          "class",
          "confusion_matrix",
          "roc_curve"
        ],
        "example": {
          "class": "setosa",
          "confusion_matrix": {
            "fn": 0,
            "fp": 0,
            "tn": 10,
            "tp": 5,
            "true_class": "setosa"
          },
          "roc_curve": {
            "fpr": [
              0,
              0,
              0,
              0.4,
              1
            ],
            "thresholds": [
              2,
              1,
              0.9478787779808044,
              0.00909090880304575,
              0
            ],
            "tpr": [
              0,
              0.8,
              1,
              1,
              1
            ],
            "true_class": "setosa"
          }
        }
      },
      "roc_curve": {
        "type": "object",
        "description": "The roc (receiver operating characteristic) curve for the selected class.",
        "properties": {
          "true_class": {
            "type": "string"
          },
          "tpr": {
            "description": "The true posistive rates.",
            "type": "array",
            "items": {
              "type": "number",
              "description": "The value of the true positive rate."
            }
          },
          "fpr": {
            "description": "The false posistive rates.",
            "type": "array",
            "items": {
              "type": "number",
              "description": "The value of the false positive rate."
            }
          },
          "thresholds": {
            "type": "array",
            "description": "The thresholds.",
            "items": {
              "type": "number",
              "description": "The threshold value."
            }
          }
        },
        "required": [
          "true_class",
          "tpr",
          "fpr"
        ]
      },
      "confusion_matrix": {
        "type": "object",
        "description": "The confusion matrix for the selected class.",
        "properties": {
          "true_class": {
            "type": "string"
          },
          "tp": {
            "type": "integer"
          },
          "tn": {
            "type": "integer"
          },
          "fp": {
            "type": "integer"
          },
          "fn": {
            "type": "integer"
          }
        },
        "required": [
          "true_class",
          "tp",
          "tn",
          "fp",
          "fn"
        ]
      },
      "intermediate_model": {
        "type": "object",
        "description": "The details of the intermediate model.\n",
        "properties": {
          "name": {
            "description": "The name of the pipeline.\n",
            "type": "string",
            "example": "my_pipeline"
          },
          "process": {
            "description": "The process that generated this pipeline.\n",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/model_location"
          },
          "notebook_location": {
            "type": "string"
          },
          "sdk_notebook_location": {
            "type": "string"
          },
          "pipeline_nodes": {
            "description": "The nodes of this pipeline.\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "composition_steps": {
            "description": "The steps that lead to the creation of this pipeline.\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "duration": {
            "type": "integer"
          },
          "model_asset": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "process"
        ]
      },
      "model_location": {
        "type": "object",
        "description": "The location of the intermediate model.\n",
        "properties": {
          "pipeline": {
            "description": "The generated pipeline at this stage.\n",
            "type": "string"
          },
          "pipeline_model": {
            "description": "The generated pipeline model.\n",
            "type": "string"
          },
          "model": {
            "description": "The generated model at this stage.\n",
            "type": "string"
          }
        }
      },
      "step_info": {
        "type": "object",
        "description": "Details about the step.\n",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "hyper_parameters": {
            "type": "object"
          },
          "data_allocation": {
            "type": "integer"
          },
          "estimator": {
            "type": "string"
          },
          "transformer": {
            "type": "string"
          },
          "score": {
            "type": "number"
          }
        },
        "required": [
          "name"
        ]
      },
      "features_importance": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/feature_importance"
        }
      },
      "feature_importance": {
        "type": "object",
        "properties": {
          "stage": {
            "type": "string"
          },
          "computation_type": {
            "type": "string"
          },
          "features": {
            "description": "The feature names and importance values as numbers.\n",
            "type": "object"
          }
        },
        "required": [
          "stage",
          "computation_type",
          "features"
        ]
      },
      "incremental_training": {
        "type": "object",
        "description": "The process of training the model in batches.\n\n\n",
        "properties": {
          "iteration": {
            "type": "integer",
            "description": "The current iteration (batch of data).\n",
            "example": 10
          },
          "total_iterations": {
            "type": "integer",
            "description": "Total number of iterations (data batches).\n",
            "example": 30
          },
          "measures_location": {
            "type": "string",
            "description": "Location of csv file with incremental learning metrics.\n",
            "example": "/path_to_csv"
          },
          "train_batch_samples_count": {
            "type": "integer",
            "description": "The cumulative size of data used in incremental training.\n",
            "example": 10786
          },
          "holdout_samples_count": {
            "type": "integer",
            "description": "The size of the holdout data set used to evaluate training progress.\n",
            "example": 6784
          },
          "early_stop_triggered": {
            "type": "boolean",
            "description": "Indicates if the training has been stopped earlier.\n",
            "example": true
          }
        }
      },
      "scoring_payload": {
        "type": "object",
        "description": "The payload for scoring.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "Discriminates the data for multi input data situation. For example\nin cases where multiple tensors are expected.\n"
          },
          "type": {
            "description": "If specified, the `values` represents the ground truth data (the label information) for the input data provided.\nThis information will be used for computing machine learning metrics.\n",
            "type": "string",
            "enum": [
              "target"
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the fields. The order of fields values must be consistent with the order of fields names.\n"
          },
          "values": {
            "title": "input_data",
            "description": "Input data as a vector for a single record or a matrix representing a mini batch of records.\n",
            "type": "array",
            "items": {
              "type": "array",
              "description": "The records.\n",
              "items": {
                "description": "The record.\n"
              }
            }
          },
          "targets": {
            "description": "Used when performing evaluation. This contains the groud truths for the input data.\n",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      },
      "scoring_payload_optim": {
        "type": "object",
        "description": "The payload for scoring.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "Discriminates the data for multi input data situation. For example\nin cases where multiple tensors are expected.\n"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the fields. The order of fields values must be consistent with the order of fields names.\nMutually exclusive with `content` field.\n"
          },
          "values": {
            "title": "input_data",
            "description": "Input data as a vector for a single record or a matrix representing a mini batch of records.\nMutually exclusive with `content` field.\n",
            "type": "array",
            "items": {
              "type": "array",
              "description": "The records.\n",
              "items": {
                "type": "object",
                "description": "The record.\n"
              }
            }
          },
          "content": {
            "title": "input_data",
            "description": "Input data as a base64 encoded string. Mutually exclusive with `fields` or `values` field.\n",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "sync_scoring_data": {
        "type": "object",
        "description": "Scoring data.\n",
        "required": [
          "input_data"
        ],
        "properties": {
          "input_data": {
            "title": "input_data",
            "type": "array",
            "description": "The input data.\n",
            "items": {
              "title": "input_data_array",
              "type": "object",
              "description": "The input data.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Discriminates the data for multi input data situation. For example\nin cases where multiple tensors are expected.\n"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The names of the fields. The order of fields values must be consistent with the order of fields names.\n",
                  "example": [
                    "name",
                    "age",
                    "occupation"
                  ]
                },
                "values": {
                  "title": "matrix_or_vector_data",
                  "description": "Input data as a a vector for a single record or a matrix representing a mini batch of records.\n",
                  "type": "array",
                  "items": {
                    "description": "The record or matrix.\n",
                    "type": "array",
                    "items": {
                      "description": "The record.\n"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "sync_scoring_data_results": {
        "type": "object",
        "description": "Scoring results.\n",
        "properties": {
          "predictions": {
            "type": "array",
            "description": "The predictions.\n",
            "items": {
              "$ref": "#/components/schemas/scoring_payload"
            }
          }
        }
      },
      "pipeline_rel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rel"
          },
          {
            "type": "object",
            "description": "A pipeline.\nThe `hardware_spec` is a reference to the hardware specification.\nThe `hybrid_pipeline_hardware_specs` are used only when training a hybrid pipeline in order to\nspecify compute requirement for each pipeline node.\n",
            "properties": {
              "model_type": {
                "description": "The underlying model type produced by the pipeline or by the model_definition.\n",
                "type": "string"
              },
              "data_bindings": {
                "type": "array",
                "description": "The data bindings.\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "data_reference_name": {
                      "description": "The input_data_reference name that is the input for the node identified by node_id.\n",
                      "type": "string"
                    },
                    "node_id": {
                      "type": "string",
                      "description": "The id of the pipeline node that will receive the associated input_data_reference input.\n"
                    }
                  },
                  "required": [
                    "data_reference_name",
                    "node_id"
                  ]
                }
              },
              "nodes_parameters": {
                "type": "array",
                "description": "The node parameters.\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "node_id": {
                      "type": "string",
                      "description": "The id of the pipeline node that will receive the associated input_data_reference input.\n"
                    },
                    "parameters": {
                      "type": "object",
                      "description": "The parameters.\n"
                    }
                  },
                  "required": [
                    "node_id",
                    "parameters"
                  ]
                }
              },
              "hardware_spec": {
                "$ref": "#/components/schemas/hardware_spec_rel"
              },
              "hybrid_pipeline_hardware_specs": {
                "$ref": "#/components/schemas/hybrid_pipeline_hardware_specs"
              }
            }
          }
        ]
      },
      "model_definition_rel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rel"
          },
          {
            "type": "object",
            "description": "A model.\nThe `software_spec` is a reference to a software specification.\nThe `hardware_spec` is a reference to a hardware specification.\n",
            "properties": {
              "model_type": {
                "description": "The underlying model type produced by the pipeline or by the model_definition.\n",
                "type": "string"
              },
              "hardware_spec": {
                "$ref": "#/components/schemas/hardware_spec_rel"
              },
              "software_spec": {
                "$ref": "#/components/schemas/software_spec_rel"
              },
              "command": {
                "description": "If present, it overrides the command specified to the library resource itself.\n",
                "type": "string"
              },
              "parameters": {
                "description": "Optional key-value pairs parameters.\n",
                "type": "object"
              }
            }
          }
        ]
      },
      "hybrid_pipeline_hardware_specs": {
        "type": "array",
        "description": "Hybrid pipeline hardware specification.\n",
        "items": {
          "type": "object",
          "properties": {
            "node_runtime_id": {
              "type": "string",
              "example": "auto_ai.kb",
              "description": "The id of node runtime.\n"
            },
            "hardware_spec": {
              "$ref": "#/components/schemas/hardware_spec_rel"
            }
          },
          "required": [
            "node_runtime_id",
            "hardware_spec"
          ]
        }
      },
      "content_zip": {
        "type": "string",
        "format": "binary",
        "description": "Arbitrary `zip` file.\n",
        "example": "binary"
      },
      "content_gzip": {
        "type": "string",
        "format": "binary",
        "description": "Arbitrary `gzip` file.\n",
        "example": "binary"
      },
      "content_json": {
        "type": "object",
        "additionalProperties": true,
        "description": "Arbitrary `JSON` file.\n",
        "example": {
          "name": "..."
        }
      },
      "content_text": {
        "type": "string",
        "description": "Arbitrary `text` file.\n",
        "example": "some text"
      },
      "content_xml": {
        "type": "object",
        "description": "Arbitrary `XML` file.\n"
      },
      "entity_request_space_project_body": {
        "type": "object",
        "description": "The properties that are part of a request that supports spaces and projects.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the resource.\n",
            "example": "my-resource"
          },
          "project_id": {
            "$ref": "#/components/schemas/project_id"
          },
          "space_id": {
            "$ref": "#/components/schemas/space_id"
          },
          "description": {
            "type": "string",
            "description": "A description of the resource.\n",
            "example": "This is my first resource."
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "required": [
          "name"
        ]
      },
      "entity_request_space_body": {
        "type": "object",
        "description": "The properties that are part of a request that supports spaces.\n",
        "properties": {
          "space_id": {
            "$ref": "#/components/schemas/space_id_mandatory"
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.\n",
            "example": "my-resource"
          },
          "description": {
            "type": "string",
            "description": "A description of the resource.\n",
            "example": "This is my first resource."
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "required": [
          "space_id",
          "name"
        ]
      },
      "system": {
        "type": "object",
        "description": "System details.\n",
        "properties": {
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        }
      },
      "system_details": {
        "type": "object",
        "description": "Optional details coming from the service and related to the API call or the associated resource.\n",
        "properties": {
          "warnings": {
            "type": "array",
            "description": "Any warnings coming from the system.\n",
            "items": {
              "$ref": "#/components/schemas/warning"
            }
          }
        }
      },
      "warning": {
        "type": "object",
        "description": "A warning message.\n",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message.\n",
            "example": "The framework TF 1.1 is deprecated."
          },
          "id": {
            "type": "string",
            "description": "An `id` associated with the message.\n",
            "example": "2fc54cf1-252f-424b-b52d-5cdd98149871"
          }
        },
        "required": [
          "message"
        ]
      },
      "custom": {
        "description": "User defined properties specified as key-value pairs.\n",
        "type": "object",
        "additionalProperties": true,
        "example": {
          "name": "model",
          "size": 2
        }
      },
      "common_patch_request_helper": {
        "type": "object",
        "properties": {
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.\n",
            "example": "my-resource"
          },
          "description": {
            "type": "string",
            "description": "A description of the resource.\n",
            "example": "This is my first resource."
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          }
        }
      },
      "experiment_entity": {
        "type": "object",
        "description": "The details of the experiment to be created.\n",
        "properties": {
          "label_column": {
            "type": "string",
            "description": "The label column.\n"
          },
          "evaluation_definition": {
            "$ref": "#/components/schemas/evaluation_definition"
          },
          "training_references": {
            "type": "array",
            "description": "The optional training references used by the experiment.\n",
            "items": {
              "$ref": "#/components/schemas/training_reference"
            }
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          }
        }
      },
      "evaluation_definition": {
        "type": "object",
        "description": "The optional evaluation definition.\n",
        "properties": {
          "method": {
            "type": "string",
            "description": "The evaluation method.\n",
            "example": "binary",
            "enum": [
              "binary",
              "regression",
              "multiclass"
            ]
          },
          "metrics": {
            "type": "array",
            "description": "The evaluation metrics.\n",
            "items": {
              "$ref": "#/components/schemas/evaluation_metric"
            },
            "example": [
              {
                "name": "areaUnderROC",
                "maximize": true
              },
              {
                "name": "precision",
                "maximize": false
              },
              {
                "name": "recall"
              }
            ]
          }
        },
        "required": [
          "metrics"
        ]
      },
      "training_reference": {
        "type": "object",
        "description": "The `pipeline` is a reference to the pipeline.\nThe `model_definition` is the library reference that contains the training library.\n",
        "properties": {
          "pipeline": {
            "$ref": "#/components/schemas/pipeline_rel"
          },
          "model_definition": {
            "$ref": "#/components/schemas/model_definition_id"
          },
          "hyper_parameters_optimization": {
            "type": "object",
            "description": "The hyper parameters used in the experiment.\n",
            "properties": {
              "method": {
                "type": "object",
                "description": "Optimization algorithm.\n",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "random",
                    "enum": [
                      "random",
                      "rbfopt",
                      "hyperband",
                      "bandit"
                    ]
                  },
                  "parameters": {
                    "type": "object",
                    "description": "Optimizer configuration parameters.\n",
                    "example": {
                      "objective": "accuracy",
                      "maximize_or_minimize": "maximize",
                      "num_optimizer_steps": 4
                    }
                  }
                }
              },
              "hyper_parameters": {
                "description": "Hyper parameters that can be a range or an array of number or strings.\n",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/hyper_parameter"
                }
              }
            }
          }
        }
      },
      "evaluation_metric": {
        "description": "An evaluation metric.\n",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "maximize": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "hyper_parameter": {
        "type": "object",
        "description": "A set of hyper parameters.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the hyper parameters.\n",
            "example": "learning_rate"
          },
          "items": {
            "description": "An object containing floating point properties 'min_value', 'max_value', 'step', and 'power',\nor a list of either strings or floating point values.\n"
          }
        },
        "required": [
          "name",
          "items"
        ]
      },
      "function_entity": {
        "type": "object",
        "description": "The details of the function to be created.\n",
        "required": [
          "software_spec"
        ],
        "properties": {
          "software_spec": {
            "$ref": "#/components/schemas/software_spec_rel"
          },
          "type": {
            "type": "string",
            "description": "Type of the function to be created. Only `python` type is supported as of now.\nIf not specified, `python` is the default.\nFunctions expect a gzip file that contains a python file that make up the function.\nPython functions specify what needs to be run when the function is deployed and what\nneeds to be run when the scoring function is called. In other words, you are able to\ncustomize what preparation WML does in the environment when you deploy the function,\nas well as what steps WML takes to generate the output when you call the API later on.\nThe function consists of the outer function (any place that is not within the score\nfunction) and the inner score function. The code that sits in the outer function runs\nwhen the function is deployed, and the environment is then frozen and ready to be used\nwhenever the online scoring or batch inline job processing API is called. The code that\nsits in the inner score function runs when the online scoring or batch inline job\nprocessing API is called, in the environment customized by the outer function.\nSee [Deploying Python function](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/ml-deploy-py-function.html?context=cpdaas&audience=wdp)\nfor more details.\n\nThis is illustrated in the example below:\n\n>&lt;python code used to set up the environment&gt; \\\n>\\\n>def score(payload): \\\n>&nbsp;&nbsp;&nbsp;&nbsp;df_payload = pd.DataFrame(payload[\"values\"]) \\\n>&nbsp;&nbsp;&nbsp;&nbsp;df_payload.columns = payload[\"fields\"] \\\n>&nbsp;&nbsp;&nbsp;&nbsp;... \\\n>&nbsp;&nbsp;&nbsp;&nbsp;output = {\"result\" : res} \\\n>&nbsp;&nbsp;&nbsp;&nbsp;return output \\\n>\\\n>return score\n",
            "example": "python",
            "default": "python"
          },
          "sample_scoring_input": {
            "$ref": "#/components/schemas/sync_scoring_data"
          },
          "schemas": {
            "type": "object",
            "description": "The schemas of the expected data.\n",
            "properties": {
              "input": {
                "description": "The schema of the expected input data.\n",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/data_schema"
                }
              },
              "output": {
                "description": "The schema of the expected output data.\n",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/data_schema"
                }
              }
            }
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          },
          "model_references": {
            "description": "This is a list of references of the models that are used\nby this function, if any. These references are provided\nby the owner of the function and are used for usage tracking only.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model_reference"
            }
          }
        }
      },
      "model_reference": {
        "type": "object",
        "description": "A reference to a model that is used by this function.\nNote that the reference can be to a model that is in\na different space or project from this function.\nFor this reason either a `space_id` or a `project_id`\nmust be provided or the `space_id` or a `project_id`\nof the function will be assumed.\n",
        "properties": {
          "space_id": {
            "$ref": "#/components/schemas/space_id_optional"
          },
          "project_id": {
            "$ref": "#/components/schemas/project_id_optional"
          },
          "id": {
            "type": "string",
            "description": "The model id.\n"
          },
          "rev": {
            "type": "string",
            "description": "The optional revision of the model.\n"
          }
        },
        "required": [
          "id"
        ],
        "example": {
          "space_id": "22d0e7c7-e5d0-4dce-8eb1-0e5a4521010e",
          "id": "887d2427-13a7-4b42-aec1-f520b6f92f06",
          "rev": "2"
        }
      },
      "space_id_optional": {
        "type": "string",
        "description": "The space that contains the resource.\n",
        "example": "3fc54cf1-252f-424b-b52d-5cdd9814987f"
      },
      "project_id_optional": {
        "type": "string",
        "description": "The project that contains the resource.\n",
        "example": "12ac4cf1-252f-424b-b52d-5cdd9814987f"
      },
      "model_entity": {
        "type": "object",
        "description": "The details of the model to be created.\n",
        "required": [
          "type",
          "software_spec"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The model type. The supported model types can be found in the documentation\n[here](https://dataplatform.cloud.ibm.com/docs/content/wsj/wmls/wmls-deploy-python-types.html?context=analytics).\n",
            "example": "tensorflow_1.5"
          },
          "software_spec": {
            "$ref": "#/components/schemas/software_spec_rel"
          },
          "pipeline": {
            "$ref": "#/components/schemas/rel"
          },
          "model_definition": {
            "$ref": "#/components/schemas/model_definition_id"
          },
          "hyper_parameters": {
            "type": "object",
            "description": "Hyper parameters used for training this model.\n"
          },
          "domain": {
            "description": "User provided domain name for this model. For example: sentiment, entity, visual-recognition,\nfinance, retail, real estate etc.\n",
            "type": "string"
          },
          "training_data_references": {
            "type": "array",
            "description": "The training data that was used to create this model.\n",
            "items": {
              "$ref": "#/components/schemas/data_connection_reference"
            }
          },
          "test_data_references": {
            "type": "array",
            "description": "The holdout/test datasets.\n",
            "items": {
              "$ref": "#/components/schemas/data_connection_reference"
            }
          },
          "schemas": {
            "type": "object",
            "description": "If the prediction schemas are provided here then they take precedent over any schemas\nprovided in the data references. Note that data references contain the schema for the\nassociated data and this object contains the schema(s) for the associated prediction, if any.\nIn the case that the prediction input data matches exactly the schema of the training data\nreferences then the prediction schema can be omitted. However it is highly recommended to\nalways specify the prediction schemas using this field.\n",
            "properties": {
              "input": {
                "type": "array",
                "description": "The schema of the expected prediction input data, see\n[datarecord-metadata-v2-schema](https://raw.githubusercontent.com/elyra-ai/pipeline-schemas/master/common-pipeline/datarecord-metadata/datarecord-metadata-v2-schema.json)\nfor the schema definition.\n",
                "items": {
                  "$ref": "#/components/schemas/data_schema"
                }
              },
              "output": {
                "type": "array",
                "description": "The schema of the expected prediction output data, see\n[datarecord-metadata-v2-schema](https://raw.githubusercontent.com/elyra-ai/pipeline-schemas/master/common-pipeline/datarecord-metadata/datarecord-metadata-v2-schema.json)\nfor the schema definition.\n",
                "items": {
                  "$ref": "#/components/schemas/data_schema"
                }
              }
            }
          },
          "label_column": {
            "type": "string",
            "description": "The name of the label column.\n"
          },
          "transformed_label_column": {
            "type": "string",
            "description": "The name of the  label column seen by the estimator, which may have been transformed by the previous\ntransformers in the pipeline.\nThis is not necessarily the same column as the `label_column` in the initial data set.\n"
          },
          "size": {
            "type": "object",
            "description": "This will be used by scoring to record the size of the model.\n",
            "properties": {
              "in_memory": {
                "type": "number",
                "description": "The memory size of the model.\n"
              },
              "content": {
                "type": "number",
                "description": "The size of the model on disk.\n"
              }
            }
          },
          "metrics": {
            "$ref": "#/components/schemas/metrics"
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          },
          "user_defined_objects": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "User defined objects referenced by the model.\nFor any user defined class or function used in the model, its name, as referenced in the model, must\nbe specified as the `key` and its fully qualified class or function name must be specified as the `value`.\nThis is applicable for `Tensorflow 2.X` models serialized in `H5` format using the `tf.keras` API.\n",
            "example": {
              "MyLayer": "my_layers.MyLayer"
            }
          },
          "hybrid_pipeline_software_specs": {
            "type": "array",
            "description": "The list of the software specifications that are used by the pipeline that generated\nthis model, if the model was generated by a pipeline.\n",
            "items": {
              "$ref": "#/components/schemas/software_spec_rel"
            }
          },
          "model_version": {
            "type": "object",
            "description": "Optional metadata that can be used to provide information\nabout this model that can be tracked with IBM AI Factsheets.\nSee [Using AI Factsheets](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/factsheets-model-inventory.html) for more details.\n",
            "properties": {
              "number": {
                "type": "string",
                "description": "This is the user-provided version which should follow semantic versioning.\n",
                "example": "1.0.0"
              },
              "tag": {
                "type": "string",
                "description": "This is the user-provided tag for the model.\n",
                "example": "xgb classifier"
              },
              "description": {
                "type": "string",
                "description": "This is the user provided description that provides context for the change in the model version.\n\n\n",
                "example": "Providing an update to the version."
              }
            }
          },
          "training_id": {
            "type": "string",
            "description": "This field can be used to store the `id` of the training job that was used to\nproduce this model.\n\n\n",
            "example": "b8e64f4b-ead1-47f3-abf6-8247b2826763"
          },
          "data_preprocessing": {
            "type": "array",
            "description": "Array which contains the data preprocessing transformations.\n\n\n",
            "items": {
              "$ref": "#/components/schemas/data_preprocessing_transformation"
            }
          }
        }
      },
      "extra_model_entity": {
        "type": "object",
        "readOnly": true,
        "description": "Information related to the upload of the model content.\n",
        "properties": {
          "content_import_state": {
            "readOnly": true,
            "type": "string",
            "description": "The upload state.\n",
            "enum": [
              "running",
              "failed",
              "completed"
            ],
            "example": "completed"
          },
          "hybrid_pipeline_software_specs": {
            "readOnly": true,
            "type": "array",
            "description": "This is the array which contains information about the software\nspecifications that are used in the hybrid pipeline (if this model\nincludes a hybrid pipeline).\n",
            "items": {
              "$ref": "#/components/schemas/software_spec_rel"
            }
          }
        }
      },
      "content_location_field": {
        "type": "object",
        "properties": {
          "content_location": {
            "$ref": "#/components/schemas/content_location"
          }
        }
      },
      "content_location": {
        "type": "object",
        "description": "Details about the attachments that should be uploaded with this model.\n",
        "properties": {
          "contents": {
            "type": "array",
            "description": "The content information to be uploaded.\n",
            "items": {
              "$ref": "#/components/schemas/content_info"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "connection_asset",
              "data_asset",
              "url"
            ],
            "description": "The data source type like `connection_asset` or `data_asset`.\n",
            "example": "connection_asset"
          },
          "connection": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Connection properties.\n",
            "example": {
              "id": "2d07a6b4-8fa9-43ab-91c8-befcd9dab8d2"
            }
          },
          "location": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Location properties.\n",
            "example": {
              "bucket": "wml-v4-fvt-remote-tests",
              "file_name": "heart_testpy379.csv"
            }
          }
        },
        "required": [
          "contents",
          "type"
        ]
      },
      "content_info": {
        "type": "object",
        "description": "The content information to be uploaded.\n",
        "example": {
          "content_format": "pipeline-node",
          "file_name": "P1_automl.zip",
          "location": "fd45606f-8098-459c-8961-32b136123fgc/assets/fd45606f-8098-459c-8961-32b136123fgc_P1_fold_output/resources/wml_model/P1_automl.zip",
          "pipeline_node_id": "automl",
          "deployment_id": "1234606f-8098-459c-8961-123456123fgc"
        },
        "properties": {
          "content_format": {
            "type": "string",
            "description": "The content format of the attachment.\nThis can be one of `native`, `coreML`, `pipeline-node`.\n"
          },
          "location": {
            "type": "string",
            "description": "The location of the content to be uploaded.\n"
          },
          "file_name": {
            "type": "string",
            "description": "The file name that will be used when downloading the content from the UI.\n"
          },
          "pipeline_node_id": {
            "type": "string",
            "description": "The `pipeline_node_id` that corresponds to this content.\nThis is required only if the `content_format` is `pipeline-node`\notherwise it is rejected or ignored.\n"
          },
          "deployment_id": {
            "type": "string",
            "description": "The `deployment_id` that corresponds to this content.\nThis is required only if the `content_format` is `coreml`\notherwise it is rejected or ignored.\n"
          }
        },
        "required": [
          "content_format",
          "location",
          "file_name"
        ]
      },
      "model_definition_entity": {
        "type": "object",
        "description": "The definition of a model.\nThe `software_spec` is used only for training.\nEither space_id or project_id has to be provided and is mandatory.\n",
        "required": [
          "version",
          "platform"
        ],
        "properties": {
          "version": {
            "type": "string",
            "description": "The package version.\n"
          },
          "platform": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the platform.\n"
              },
              "versions": {
                "type": "array",
                "description": "The supported versions.\n",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "name",
              "versions"
            ]
          },
          "command": {
            "type": "string",
            "description": "The command used to run the model.\n"
          },
          "software_spec": {
            "$ref": "#/components/schemas/software_spec_rel"
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          }
        }
      },
      "pipeline_entity": {
        "type": "object",
        "description": "The details of the pipeline to be created.\n",
        "properties": {
          "document": {
            "type": "object",
            "description": "The pipeline document, see\n[pipeline-flow-v2-schema](https://raw.githubusercontent.com/elyra-ai/pipeline-schemas/master/common-pipeline/pipeline-flow/pipeline-flow-v2-schema.json)\nfor the schema definition.\n"
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          }
        },
        "required": [
          "document"
        ]
      },
      "training_definition_entity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/training_resource_entity_common"
          }
        ]
      },
      "remote_training_system_entity": {
        "type": "object",
        "description": "The definition of a remote system used by Federated Learning.\n",
        "properties": {
          "allowed_identities": {
            "$ref": "#/components/schemas/allowed_identities"
          },
          "organization": {
            "$ref": "#/components/schemas/organization"
          },
          "remote_admin": {
            "$ref": "#/components/schemas/remote_admin"
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          }
        },
        "required": [
          "allowed_identities"
        ]
      },
      "allowed_identities": {
        "description": "The list of allowed identities that are allowed to access the remote system.\n",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/allowed_identity"
        }
      },
      "allowed_identity": {
        "type": "object",
        "description": "The allowed identity.\n",
        "properties": {
          "id": {
            "description": "The id of the identity.\n",
            "type": "string",
            "example": "hjsdgwsdtyt"
          },
          "type": {
            "description": "The type of the identity\n",
            "type": "string",
            "enum": [
              "user",
              "service"
            ],
            "example": "user"
          },
          "allowed_ips": {
            "description": "A list of IP(s) and or CIDR(s) that are permitted to connect to the Remote Training System,\nboth IPv4 and IPv6 are supported.\n",
            "type": "array",
            "items": {
              "type": "string",
              "description": "An IP or CIDR, both IPv4 and IPv6 are supported."
            },
            "example": [
              "1234:5678:90ab:cdef:1234:5678:90ab:cdef",
              "123.123.123.123",
              "123.123.123.0/16"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "organization": {
        "type": "object",
        "description": "A remote organization.\n",
        "properties": {
          "name": {
            "description": "The name of the organization.\n",
            "type": "string",
            "example": "Blogg Ltd"
          },
          "region": {
            "description": "The region for the organization.\n",
            "type": "string",
            "example": "EU"
          }
        },
        "required": [
          "name"
        ]
      },
      "remote_admin": {
        "type": "object",
        "description": "The details of the remote administrator for the organization and identities.\n",
        "properties": {
          "name": {
            "description": "The name of the remote administrator.\n",
            "type": "string",
            "example": "Joe Blogg"
          },
          "email": {
            "description": "The email of the remote administrator.\n",
            "type": "string",
            "example": "joe.blogg@mail.com"
          }
        },
        "required": [
          "name"
        ]
      },
      "revision_entity_space_project_request": {
        "type": "object",
        "description": "The details for the revision.\n",
        "properties": {
          "space_id": {
            "$ref": "#/components/schemas/space_id"
          },
          "project_id": {
            "$ref": "#/components/schemas/project_id"
          },
          "commit_message": {
            "type": "string",
            "description": "An optional commit message for the revision.\n"
          }
        },
        "example": {
          "space_id": "3fc54cf1-252f-424b-b52d-5cdd9814987f",
          "commit_message": "Updated for TF 2.0"
        }
      },
      "revision_entity_space_request": {
        "type": "object",
        "description": "The details for the revision.\n",
        "properties": {
          "space_id": {
            "$ref": "#/components/schemas/space_id_mandatory"
          },
          "commit_message": {
            "type": "string",
            "description": "An optional commit message for the revision.\n"
          }
        },
        "required": [
          "space_id"
        ],
        "example": {
          "space_id": "3fc54cf1-252f-424b-b52d-5cdd9814987f",
          "commit_message": "Updated for TF 2.0"
        }
      },
      "all_content_metadata": {
        "type": "object",
        "description": "The metadata related to the attachments.\n",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "The number of attachments associated with the resource.\n",
            "example": 1
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/content_metadata"
            }
          }
        },
        "required": [
          "total_count",
          "attachments"
        ]
      },
      "content_metadata": {
        "type": "object",
        "description": "The metadata related to the attachment.\n",
        "properties": {
          "attachment_id": {
            "type": "string",
            "description": "The content id for the attachment.\n",
            "example": "fd45606f-8098-459c-8961-32b136123fgc"
          },
          "content_format": {
            "type": "string",
            "description": "The type of the content.\n",
            "example": "native"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment.\n",
            "example": "my_attachment"
          },
          "pipeline_node_id": {
            "type": "string",
            "description": "The `pipeline_node_id` that corresponds to this content.\n",
            "example": "fg094cf1-252f-424b-b52d-5cdd981a981e"
          },
          "deployment_id": {
            "type": "string",
            "description": "The `deployment_id` that corresponds to this content.\n",
            "example": "12345cf1-252f-424b-b52d-5cdd981a1234"
          },
          "persisted": {
            "type": "boolean",
            "description": "This will be set to `true` if the content has been persisted.\nIf this content was part of the import process and the upload\nof the content failed then the message can be found in the\n`warnings` field of the `system_details` that are returned\nwith the model details.\n",
            "default": false,
            "example": true
          }
        },
        "required": [
          "attachment_id",
          "content_format"
        ]
      },
      "training_definition_patch_helper": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_patch_request_helper"
          },
          {
            "type": "object",
            "properties": {
              "federated_learning": {
                "$ref": "#/components/schemas/federated_learning"
              }
            }
          }
        ]
      },
      "remote_training_system_patch_helper": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_patch_request_helper"
          },
          {
            "type": "object",
            "properties": {
              "organization": {
                "$ref": "#/components/schemas/organization"
              },
              "allowed_identities": {
                "$ref": "#/components/schemas/allowed_identities"
              },
              "remote_admin": {
                "$ref": "#/components/schemas/remote_admin"
              }
            }
          }
        ]
      },
      "deployment_job_definition_patch_helper": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_patch_request_helper"
          },
          {
            "type": "object",
            "properties": {
              "deployment": {
                "$ref": "#/components/schemas/simple_rel"
              }
            }
          }
        ]
      },
      "training_websocket": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/resource_meta"
          },
          "entity": {
            "$ref": "#/components/schemas/training_status"
          }
        }
      },
      "training_resource_entity_common": {
        "type": "object",
        "description": "The `training_data_references` contain the training datasets and the\n`results_reference` the connection where results will be stored.\n",
        "required": [
          "results_reference"
        ],
        "properties": {
          "experiment": {
            "$ref": "#/components/schemas/rel"
          },
          "pipeline": {
            "$ref": "#/components/schemas/pipeline_rel"
          },
          "model_definition": {
            "$ref": "#/components/schemas/model_definition_rel"
          },
          "federated_learning": {
            "$ref": "#/components/schemas/federated_learning"
          },
          "training_data_references": {
            "type": "array",
            "description": "Training datasets.\n",
            "items": {
              "$ref": "#/components/schemas/data_connection_reference"
            }
          },
          "results_reference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/object_location"
              }
            ],
            "description": "The training results.\n"
          },
          "test_data_references": {
            "type": "array",
            "description": "The holdout/test datasets.\n",
            "items": {
              "$ref": "#/components/schemas/data_connection_reference"
            }
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          }
        }
      },
      "training_resource_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/training_resource_entity_common"
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "name": {
                "type": "string",
                "description": "The name of the training.\n",
                "example": "my-training"
              },
              "description": {
                "type": "string",
                "description": "A description of the training.\n",
                "example": "My first training."
              },
              "space_id": {
                "$ref": "#/components/schemas/space_id"
              },
              "project_id": {
                "$ref": "#/components/schemas/project_id"
              }
            }
          }
        ]
      },
      "gpu_metrics": {
        "type": "object",
        "description": "GPU metrics.\n",
        "properties": {
          "type": {
            "type": "string",
            "example": "k80"
          },
          "memory": {
            "type": "object",
            "properties": {
              "measure": {
                "type": "string",
                "example": "mb"
              },
              "value": {
                "type": "number",
                "format": "double",
                "example": 3.4
              }
            },
            "required": [
              "measure",
              "value"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "compute_usage_metrics": {
        "type": "object",
        "description": "Compute usage metrics.\n",
        "properties": {
          "timestamp": {
            "type": "string",
            "example": "2019-02-26T02:52:15.771Z",
            "format": "date-time"
          },
          "gpu_count": {
            "type": "number",
            "example": 2
          },
          "gpus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gpu_metrics"
            }
          }
        },
        "required": [
          "timestamp"
        ]
      },
      "training_status": {
        "type": "object",
        "description": "Status of the model.\n",
        "properties": {
          "running_at": {
            "type": "string",
            "description": "Date and Time in which current training state has started.",
            "example": "2017-01-30T10:11:12Z",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "description": "Date and Time in which training had completed.",
            "example": "2017-01-30T10:11:12Z",
            "format": "date-time"
          },
          "iteration": {
            "type": "number",
            "description": "Current training iteration.",
            "example": 10
          },
          "total_iterations": {
            "type": "number",
            "description": "Total number of iterations training must complete.",
            "example": 100
          },
          "state": {
            "type": "string",
            "description": "Current state of training.",
            "enum": [
              "queued",
              "pending",
              "running",
              "storing",
              "completed",
              "failed",
              "canceled"
            ]
          },
          "compute_usage_metrics": {
            "$ref": "#/components/schemas/compute_usage_metrics"
          },
          "hpo": {
            "type": "object",
            "description": "Hyperparameter optimization.\n",
            "properties": {
              "node_id": {
                "type": "string"
              },
              "hyper_parameters": {
                "type": "object"
              }
            },
            "required": [
              "hyper_parameters"
            ]
          },
          "federated_learning_info": {
            "$ref": "#/components/schemas/federated_learning_info"
          },
          "message": {
            "type": "object",
            "description": "Message.\n",
            "properties": {
              "level": {
                "type": "string"
              },
              "text": {
                "type": "string"
              }
            }
          },
          "metrics": {
            "$ref": "#/components/schemas/metrics"
          },
          "failure": {
            "$ref": "#/components/schemas/error"
          }
        },
        "required": [
          "state"
        ]
      },
      "training_resource_entity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/training_resource_entity_common"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/training_status"
              }
            }
          }
        ]
      },
      "training_resource": {
        "type": "object",
        "description": "Training resource.\n",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/resource_meta"
          },
          "entity": {
            "$ref": "#/components/schemas/training_resource_entity"
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        }
      },
      "training_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/training_resource"
                }
              },
              "system": {
                "$ref": "#/components/schemas/system_details"
              }
            }
          }
        ]
      },
      "federated_learning": {
        "type": "object",
        "description": "Federated Learning.\n",
        "properties": {
          "model": {
            "type": "object",
            "description": "The model type for federated_learning.\n",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "keras",
                  "keras_dp",
                  "dt",
                  "sklearn",
                  "sklearn_sgd",
                  "sklearn_sgd_classifier",
                  "sklearn_sgd_regressor",
                  "sklearn_kmeans",
                  "sklearn_nb",
                  "xgb_classifier",
                  "xgb_regressor",
                  "tensorflow",
                  "tensorflow_classifier",
                  "tensorflow_regressor",
                  "pytorch",
                  "pytorch_classifier",
                  "pytorch_regressor"
                ]
              },
              "spec": {
                "type": "object",
                "properties": {
                  "href": {
                    "$ref": "#/components/schemas/rel"
                  }
                }
              },
              "model_file": {
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          },
          "fusion_type": {
            "type": "string",
            "description": "The fusion type for federated learning. For an in-depth description of each fusion type, please refer to [here](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fl-frames.html).\n * `iter_avg` - Simple Avg, simplest aggregation that is used as a baseline where all parties' model updates are equally weighted.\n * `avg` - Weighted Avg, weights the average of updates based on the number of each party sample. Use with training data sets of widely differing sizes.\n * `pfnm` - Probabilistic Federated Neural Matching (PFNM), communication-efficient method for fully connected neural networks when parties have heterogeneous data sets.\n * `spahm` - K-Means/SPAHM, used to train KMeans (unsupervised learning) models when parties have heterogeneous data sets.\n * `xgb_classifier` - XGBoost Classification, used to build classification models that use XGBoost.\n * `xgb_regressor` - XGBoost Regression, used to build regression models that use XGBoost.\n * `crypto_iter_avg` - Iterative averaging based fusion implemented with a crypto system.\n\n\n",
            "enum": [
              "iter_avg",
              "avg",
              "pfnm",
              "spahm",
              "xgb_classifier",
              "xgb_regressor",
              "crypto_iter_avg"
            ]
          },
          "remote_training": {
            "type": "object",
            "description": "The remote training for federated learning.\n",
            "properties": {
              "quorum": {
                "type": "number",
                "description": "The quorum for federated learning.\n",
                "format": "double",
                "example": 0.9
              },
              "max_timeout": {
                "type": "integer",
                "description": "The maximum timeout for federated learning.\n",
                "example": 60
              },
              "remote_training_systems": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The remote training id of the referenced resource.\n",
                      "example": "1918939c-2660-4f6a-b727-4b402383dc63"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The required of the referenced resource.\n",
                      "example": true
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            },
            "required": [
              "remote_training_systems"
            ]
          },
          "rounds": {
            "type": "integer",
            "description": "The number of training iterations to complete between the aggregator and the remote systems unless termination accuracy is achieved first.\n",
            "example": 3
          },
          "termination_predicate": {
            "type": "string",
            "description": "A boolean expression that describes the conditions, in terms of model metrics, under which training should complete.\n",
            "example": "accuracy > 0.9"
          },
          "epochs": {
            "type": "integer",
            "description": "The total number of passes over the local training dataset to train a model.\n",
            "example": 3
          },
          "optimizer": {
            "type": "object",
            "description": "The optimizer for federated learning.\n",
            "properties": {
              "name": {
                "type": "string"
              },
              "spec": {
                "type": "object",
                "description": "Optimizer specification."
              }
            }
          },
          "loss": {
            "type": "string",
            "description": "The loss function to use in the boosting process.\n"
          },
          "metrics": {
            "type": "string",
            "description": "The metrics for federated learning.\n"
          },
          "max_depth": {
            "type": "integer",
            "description": "The maximum depth of each tree.\n"
          },
          "learning_rate": {
            "type": "number",
            "description": "Controls how rapidly to change the model in response to the estimated error each time the model weights are updated.\n",
            "format": "double"
          },
          "l2_regularization": {
            "type": "number",
            "description": "The coefficient for the L2 regularizer.\n",
            "format": "double"
          },
          "max_bins": {
            "type": "integer",
            "description": "The maximum number of bins to use for non-missing values across all features.\n"
          },
          "max_leaf_nodes": {
            "type": "integer",
            "description": "The maximum number of leaves for each tree.\n"
          },
          "min_samples_leaf": {
            "type": "integer",
            "description": "The minimum number of samples per leaf.\n"
          },
          "random_state": {
            "type": "integer",
            "description": "Seed used to set the pseudo-random number generator.\n"
          },
          "verbose": {
            "type": "boolean",
            "description": "A general programming term to produce logging output\n"
          },
          "num_classes": {
            "type": "integer",
            "description": "Number of target classes for the classification model.\n"
          },
          "byzantine_threshold": {
            "type": "integer",
            "description": "Specifies the failure tolerance, for example the maximum number of parties that would possibly be failing during training.\n"
          },
          "sigma": {
            "type": "number",
            "description": "Specifies how far the local model neurons are allowed from the global model.\n",
            "format": "double"
          },
          "sigma0": {
            "type": "number",
            "description": "Specifies the standard deviation of the global network neurons.\n",
            "format": "double"
          },
          "gamma": {
            "type": "number",
            "description": "Specifies the expected number of features present in each observation.\n",
            "format": "double"
          },
          "iters": {
            "type": "integer",
            "description": "Specifies the number of iterations of randomly initialized matching-unmatching procedure is to be performed.\n"
          },
          "save_intermediate_models": {
            "type": "boolean",
            "description": "If true, save the model generated at the end of each round of training.\n"
          },
          "crypto": {
            "type": "object",
            "description": "Settings for cryptographic fusion for federated learning.\n",
            "properties": {
              "cipher_spec": {
                "type": "string",
                "description": "The level of encryption used to encrypt training data.\n",
                "enum": [
                  "encryption_level_1",
                  "encryption_level_2",
                  "encryption_level_3",
                  "encryption_level_4"
                ]
              }
            }
          },
          "hardware_spec": {
            "$ref": "#/components/schemas/hardware_spec_rel"
          },
          "software_spec": {
            "$ref": "#/components/schemas/software_spec_rel"
          },
          "version": {
            "type": "string",
            "description": "The version for federated learning.\n"
          },
          "log_level": {
            "type": "string",
            "description": "The log level (`critical`, `error`, `warning`, `info`, `debug`) for federated learning.\n",
            "enum": [
              "critical",
              "error",
              "warning",
              "info",
              "debug"
            ],
            "example": "info"
          },
          "sketch_accuracy_vs_privacy": {
            "type": "number",
            "description": "Used with XGBoost training to control the relative accuracy of sketched data sent to the aggregator.\nHigher values will result in higher quality models but with a reduction in data privacy and increase in resource consumption.\n\n\n",
            "default": 0.01,
            "minimum": 0,
            "maximum": 1,
            "example": 0.01
          }
        },
        "required": [
          "remote_training",
          "fusion_type"
        ]
      },
      "federated_learning_info": {
        "type": "object",
        "description": "Federated learning info.\n",
        "properties": {
          "aggregator": {
            "type": "object",
            "properties": {
              "connection": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "port": {
                    "type": "number"
                  },
                  "endpoint": {
                    "type": "string"
                  },
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "wss"
                    ]
                  },
                  "headers": {
                    "type": "object",
                    "description": "The headers object contains key-value pairs of headers to be supplied when connecting to the aggregator."
                  }
                }
              }
            }
          },
          "remote_training_systems": {
            "type": "array",
            "description": "Remote training systems.\n",
            "items": {
              "type": "object",
              "properties": {
                "states": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1918939c-2660-4f6a-b727-4b402383dc63"
                    },
                    "name": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string",
                      "example": "training"
                    },
                    "registration_log": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "example": "2019-02-26T02:52:15.771Z",
                            "format": "date-time"
                          },
                          "event": {
                            "type": "string",
                            "example": "joined"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "deployment_patch_request_helper": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_patch_request_helper"
          },
          {
            "type": "object",
            "properties": {
              "asset": {
                "$ref": "#/components/schemas/rel"
              },
              "hardware_spec": {
                "$ref": "#/components/schemas/hardware_spec_rel"
              },
              "hybrid_pipeline_hardware_specs": {
                "$ref": "#/components/schemas/hybrid_pipeline_hardware_specs"
              }
            }
          }
        ]
      },
      "deployment_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "The deployment resources.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of deployment resources. This will be empty if 'stats' query parameter is passed with 'true'.\n",
                "items": {
                  "$ref": "#/components/schemas/deployment_resource"
                }
              },
              "system": {
                "type": "object",
                "description": "System details including warnings and stats. This will get populated only if 'stats' query parameter is passed with 'true'.\n",
                "properties": {
                  "system": {
                    "$ref": "#/components/schemas/deployment_system_details"
                  }
                }
              }
            }
          }
        ]
      },
      "deployment_system_details": {
        "type": "object",
        "description": "Optional details provided by the service about statistics of the number of deployments created with in a space or across all spaces.\n",
        "properties": {
          "warnings": {
            "type": "array",
            "description": "Any warnings coming from the system.\n",
            "items": {
              "$ref": "#/components/schemas/warning"
            }
          },
          "stats": {
            "type": "array",
            "description": "The stats about deployments for a space or across all spaces.\n",
            "items": {
              "$ref": "#/components/schemas/stats"
            }
          }
        }
      },
      "stats": {
        "type": "object",
        "description": "The stats about deployments for a space.\n",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "An `id` associated with the space.\n",
            "example": "2fc54cf1-252f-424b-b52d-5cdd98149871"
          },
          "total_count": {
            "type": "number",
            "description": "The total number of deployments created in a space including online and batch.\n"
          },
          "online_count": {
            "type": "number",
            "description": "The number of online deployments created in a space.\n"
          },
          "batch_count": {
            "type": "number",
            "description": "The number of batch deployments created in a space.\n"
          }
        }
      },
      "deployment_entity_request": {
        "description": "See the description in `POST /ml/v4/deployments`.\n",
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "dev",
              "TF"
            ],
            "description": "Tags that can be used when searching for resources.\n"
          },
          "space_id": {
            "$ref": "#/components/schemas/space_id_mandatory"
          },
          "name": {
            "type": "string",
            "description": "The name of the deployment.\n",
            "example": "customer_churn"
          },
          "description": {
            "type": "string",
            "description": "A description of the deployment.\n",
            "example": "Customer churn prediction model deployment"
          },
          "custom": {
            "$ref": "#/components/schemas/custom"
          },
          "asset": {
            "$ref": "#/components/schemas/rel"
          },
          "hardware_spec": {
            "$ref": "#/components/schemas/hardware_spec_rel"
          },
          "hybrid_pipeline_hardware_specs": {
            "$ref": "#/components/schemas/hybrid_pipeline_hardware_specs"
          },
          "online": {
            "type": "object",
            "description": "Indicates that this is an online deployment. An empty object has to be specified.\nMore properties will be added later on to setup the online deployment.\nThe `serving_name` can be provided in the `online.parameters`. The serving name can only have the characters [a-z,0-9,_] \nand the length should not be more than 36 characters. The `serving_name` can be used in the prediction URL in place of the `deployment_id`.\nIf the online scoring schema has a `type` of `DataFrame` then the scoring payload will be converted to a `Pandas` data frame.\n",
            "properties": {
              "parameters": {
                "description": "A set of key-value pairs where `key` is the parameter name.\n",
                "type": "object"
              }
            },
            "example": {
              "parameters": {
                "serving_name": "churn"
              }
            }
          },
          "batch": {
            "type": "object",
            "description": "Indicates that this is a batch deployment. An empty object has to be specified.\nMore properties will be added later on to setup the batch deployment.\n",
            "properties": {
              "parameters": {
                "description": "A set of key-value pairs where `key` is the parameter name.\n",
                "type": "object"
              }
            }
          }
        },
        "required": [
          "space_id"
        ]
      },
      "deployment_entity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/deployment_entity_request"
          },
          {
            "type": "object",
            "description": "The definition of the deployment.\n",
            "properties": {
              "deployed_asset_type": {
                "description": "Specifies the type of the asset on which deployment is created.\n",
                "type": "string",
                "enum": [
                  "model",
                  "function",
                  "py_script",
                  "do"
                ]
              },
              "status": {
                "type": "object",
                "description": "Specifies the current status, additional information about the deployment\nand any failure messages in case of deployment failures.\n",
                "properties": {
                  "state": {
                    "description": "Specifies the current state of the deployment.\n",
                    "type": "string",
                    "enum": [
                      "initializing",
                      "updating",
                      "ready",
                      "failed"
                    ]
                  },
                  "message": {
                    "$ref": "#/components/schemas/message"
                  },
                  "failure": {
                    "$ref": "#/components/schemas/error"
                  },
                  "serving_urls": {
                    "description": "The URL's that can be used to submit online prediction API requests. These URL's will contain the\n`deployment_id` and the `serving_name`, if the `serving_name` was set.\n",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "https://us-south.ml.cloud.ibm.com/ml/v4/deployments/2cd0bcda-581d-4f04-8028-ec2bc90cc375/predictions",
                      "https://us-south.ml.cloud.ibm.com/ml/v4/deployments/churn/predictions"
                    ]
                  },
                  "virtual_deployment_downloads": {
                    "description": "The model download URLs in the context of virtual deployments.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "The model download URL details.\n",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The model download URL.\n",
                          "example": "https://us-south.ml.cloud.ibm.com/ml/v4/models/2ae804f8-fa85-4106-8228-cbc7e408ad79?rev=4b9fd604-08ce-44c5-a5aa-fd0bd96db223"
                        }
                      }
                    }
                  },
                  "scaling": {
                    "description": "Status information related to the state of the scaling, if scaling is in progress or has completed.\n",
                    "type": "object",
                    "properties": {
                      "state": {
                        "type": "string",
                        "description": "The state of the scaling request.\n",
                        "enum": [
                          "in_progress",
                          "success",
                          "failed"
                        ],
                        "example": "success"
                      },
                      "attempted_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time when the scaling was attempted.\n"
                      },
                      "requested_replicas": {
                        "type": "integer",
                        "description": "The number of requested replicas.\n",
                        "example": 4
                      },
                      "deployed_replicas": {
                        "type": "integer",
                        "description": "The number of replicas currently deployed.\n",
                        "example": 2
                      },
                      "message": {
                        "$ref": "#/components/schemas/message"
                      }
                    },
                    "required": [
                      "state"
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "message": {
        "type": "object",
        "description": "Optional messages related to the deployment.\n",
        "properties": {
          "level": {
            "description": "The level of the message, normally one of `debug`, `info` or `warning`.\n",
            "type": "string",
            "example": "info"
          },
          "text": {
            "description": "The message.\n",
            "type": "string",
            "example": "The deployment is successful"
          }
        }
      },
      "deployment_resource": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/resource_meta"
          },
          "entity": {
            "$ref": "#/components/schemas/deployment_entity"
          }
        }
      },
      "job_entity": {
        "type": "object",
        "description": "Details about the batch deployment job.\n\nThe `deployment` is a reference to the deployment associated with the deployment job or deployment job definition.\n\nThe `scoring` and `decision_optimization` properties are mutually exclusive.\nSpecify only one of these when submitting a batch deployment job.\n\nUse `hybrid_pipeline_hardware_specs` only in a batch deployment job of a hybrid pipeline\nin order to specify compute configuration for each pipeline node. For all other cases use `hardware_spec`\nto specify compute configuration.\n\nIn case of output data references where the data asset is a remote database, users can specify if the batch\ndeployment output must be appended to the table or if the table is to be truncated and output data updated.\n`output_data_references.location.write_mode` parameter can be used to for this purpose.\nThe values `truncate` or `append` can be specified for `output_data_references.location.write_mode`\nparameter.\n* Specifying `truncate` as value will truncate the table and the batch output data will be inserted.\n* Specifying `append` as value will insert the batch output data to the remote database table.\n* The `write_mode` parameter is applicable only for `output_data_references` parameter.\n* The `write_mode` parameter will be applicable only for remote database related data assets.\nThis parameter will not be applicable for local data asset or COS based data asset.\n",
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/simple_rel"
          },
          "custom": {
            "description": "User defined properties.\n",
            "type": "object"
          },
          "hardware_spec": {
            "$ref": "#/components/schemas/hardware_spec_rel"
          },
          "hybrid_pipeline_hardware_specs": {
            "$ref": "#/components/schemas/hybrid_pipeline_hardware_specs"
          },
          "scoring": {
            "$ref": "#/components/schemas/job_scoring_request"
          },
          "decision_optimization": {
            "$ref": "#/components/schemas/job_decision_optimization_request"
          }
        },
        "required": [
          "deployment"
        ]
      },
      "job_entity_result": {
        "type": "object",
        "description": "Details about the batch deployment job.\n\nThe `deployment` is a reference to the deployment associated with the deployment job or deployment job definition.\n\nThe `scoring` and `decision_optimization` properties are mutually exclusive.\n",
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/simple_rel"
          },
          "custom": {
            "description": "User defined properties.\n",
            "type": "object"
          },
          "hardware_spec": {
            "$ref": "#/components/schemas/hardware_spec_rel"
          },
          "hybrid_pipeline_hardware_specs": {
            "$ref": "#/components/schemas/hybrid_pipeline_hardware_specs"
          },
          "scoring": {
            "$ref": "#/components/schemas/job_scoring_result"
          },
          "decision_optimization": {
            "$ref": "#/components/schemas/job_decision_optimization_result"
          }
        },
        "required": [
          "deployment"
        ]
      },
      "job_status_entity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/job_entity_result"
          },
          {
            "type": "object",
            "description": "Information about the platform job assets related to this execution.\n",
            "properties": {
              "platform_job": {
                "$ref": "#/components/schemas/platform_job"
              }
            }
          }
        ]
      },
      "platform_job": {
        "type": "object",
        "description": "Information about the platform job assets related to this execution.\nDepending on the `version` date passed, the `platform_jobs` section in the response may or may not be populated.\nUse the GET call to retrieve the deployment job, this GET call will eventually populate the `platform_jobs` section.\nRefer to the `version date` description for more details.\n",
        "properties": {
          "job_id": {
            "type": "string",
            "description": "The id of the platform job.\n",
            "example": "asf54cf1-252f-424b-b52d-5cdd98149sg5"
          },
          "run_id": {
            "type": "string",
            "description": "The run id of the platform job.\n",
            "example": "12354cf1-252f-424b-b52d-5cdd98149s345"
          }
        },
        "required": [
          "job_id",
          "run_id"
        ]
      },
      "jobs_resource": {
        "type": "object",
        "description": "The information related to the job.\n",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/resource_meta"
          },
          "entity": {
            "$ref": "#/components/schemas/job_status_entity"
          }
        }
      },
      "jobs_resources": {
        "description": "The information related to the jobs.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of jobs.\n",
                "items": {
                  "$ref": "#/components/schemas/jobs_resource"
                }
              }
            }
          }
        ]
      },
      "field_job_status": {
        "type": "object",
        "description": "The status of the job.\n",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/job_status"
          }
        }
      },
      "job_status": {
        "type": "object",
        "description": "The status of the job.\n",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the job.\n",
            "enum": [
              "queued",
              "running",
              "completed",
              "failed",
              "canceled"
            ],
            "example": "running"
          },
          "running_at": {
            "type": "string",
            "description": "The date when the job started to run.\n",
            "example": "2020-01-30T10:11:12Z",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "description": "The date that the job finished.\n",
            "example": "2020-01-30T10:11:12Z",
            "format": "date-time"
          },
          "message": {
            "type": "object",
            "description": "An optional message related to the job status.\n",
            "properties": {
              "level": {
                "description": "The level of the message, normally one of `debug`, `info` or `warning`.\n",
                "type": "string",
                "example": "info"
              },
              "text": {
                "description": "The message.\n",
                "type": "string",
                "example": "The message"
              }
            }
          },
          "failure": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "job_scoring_request": {
        "type": "object",
        "description": "Details about the input/output data and other properties to be used for a batch deployment job of a model,\nPython Function or a Python Scripts.\n\nUse `input_data` property to specify the input data for batch processing as part of the job's payload.\nThe `input_data` property is mutually exclusive with `input_data_references` property, only use one of these.\nWhen `input_data` is specified, the processed output of batch deployment job will be available in `scoring.predictions`\nparameter in the deployment job response. `input_data` property is not supported for batch deployment of Python Scripts.\n\nUse `input_data_references` property to specify the details pertaining to the remote source where the input data for\nbatch deployment job is available. The `input_data_references` must be used with `output_data_references`.\nThe `input_data_references` property\nis mutually exclusive with `input_data` property, only use one of these. The `input_data_references`\nproperty is not supported for batch deployment job of Spark models and Python Functions.\n\nUse `output_data_references` property to specify the details pertaining to the remote source where the input\ndata for batch deployment job is available. `output_data_references` must be used with `input_data_references`.\nThe `output_data_references`\nproperty is not supported for batch deployment job of Spark models and Python Functions.\n",
        "properties": {
          "input_data": {
            "type": "array",
            "description": "A list of payloads.\n",
            "items": {
              "$ref": "#/components/schemas/scoring_payload"
            }
          },
          "input_data_references": {
            "type": "array",
            "description": "A list of input data references.\n",
            "items": {
              "$ref": "#/components/schemas/data_connection_reference"
            }
          },
          "output_data_reference": {
            "$ref": "#/components/schemas/data_connection_reference"
          },
          "evaluations": {
            "$ref": "#/components/schemas/evaluations_spec"
          },
          "environment_variables": {
            "$ref": "#/components/schemas/environment_variables"
          }
        }
      },
      "job_scoring_result": {
        "allOf": [
          {
            "$ref": "#/components/schemas/job_scoring_request"
          },
          {
            "$ref": "#/components/schemas/sync_scoring_data_results"
          },
          {
            "$ref": "#/components/schemas/field_job_status"
          }
        ]
      },
      "evaluations_spec": {
        "type": "array",
        "description": "A list of evaluation specifications.\n",
        "items": {
          "type": "object",
          "description": "An evaluation specification used to support evaluations for TensorFlow.\n",
          "properties": {
            "id": {
              "description": "An identifier of this metrics set. For a DL problem this can be the\noutput tensor id/name in order to identify on which output these metrics will be computed.\n",
              "type": "string"
            },
            "input_target": {
              "description": "The id of the `input_data.id` with the `type=target`. This points to the\nground truth information that will be used together with prediction information to generate metrics.\n",
              "type": "string"
            },
            "metrics_names": {
              "type": "array",
              "description": "A list of the metric names.\n",
              "items": {
                "type": "string",
                "description": "The name of the metric.\n"
              },
              "example": [
                "auroc",
                "accuracy"
              ]
            }
          }
        }
      },
      "environment_variables": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "This property is used to specify environment variables and their values required to be consumed\nby the batch deployment job. The environment variables and values must be specified as key-value pairs.\n\nThis property is currently supported only for Python Scripts in batch deployment jobs.\n",
        "example": {
          "my_env_var1": "env_var_value1",
          "my_env_var2": "env_var_value2"
        }
      },
      "field_solve_state": {
        "type": "object",
        "description": "The solve state for a Decision Optimzation job.\n",
        "properties": {
          "solve_state": {
            "$ref": "#/components/schemas/solve_state"
          }
        }
      },
      "solve_state": {
        "type": "object",
        "description": "The solve state for a Decision Optimzation job.\n",
        "properties": {
          "details": {
            "type": "object",
            "description": "Details related to the job.\n"
          },
          "solve_status": {
            "type": "string",
            "description": "The solve status.\n",
            "enum": [
              "unknown",
              "feasible_solution",
              "optimal_solution",
              "infeasible_solution",
              "unbounded_solution",
              "infeasible_or_unbounded_solution"
            ],
            "example": "optimal_solution"
          },
          "interruption_status": {
            "type": "string",
            "description": "The interrupted status.\n",
            "enum": [
              "stop",
              "kill",
              "timeout",
              "out_of_memory",
              "engine_limit"
            ],
            "example": "stop"
          },
          "latest_engine_activity": {
            "type": "array",
            "description": "The latest engine activity.\n",
            "items": {
              "type": "string"
            },
            "example": [
              "Found optimal solution."
            ]
          }
        }
      },
      "job_decision_optimization_request": {
        "type": "object",
        "description": "Details about the input/output data and other properties to be used for a batch\ndeployment job of a decision optimization problem.\n\nUse `input_data` property to specify the input data for batch processing as part\nof the job's payload. The `input_data` property is mutually exclusive with `input_data_references`\nproperty, only use one of these. When `input_data` is specified, the processed output\nof batch deployment job will be available in `scoring.predictions` parameter in the deployment job response.\n\nUse `input_data_references` property to specify the details pertaining to the remote source\nwhere the input data for batch deployment job is available. The `input_data_references` must be used\nwith `output_data_references`.\nThe `input_data_references` property is mutually exclusive with `input_data` property, only use one of these.\n\nUse `output_data_references` property to specify the details pertaining to the remote source where the\ninput data for batch deployment job is available. The `output_data_references` must be used with `input_data_references`.\n",
        "properties": {
          "solve_parameters": {
            "type": "object",
            "description": "To control solve behavior, you can specify solve parameters in your request as key-value pairs.\n"
          },
          "input_data": {
            "type": "array",
            "description": "A list of payloads.\n",
            "items": {
              "$ref": "#/components/schemas/scoring_payload_optim"
            }
          },
          "input_data_references": {
            "type": "array",
            "description": "A list of input data references.\n",
            "items": {
              "$ref": "#/components/schemas/object_location_optim"
            }
          },
          "output_data": {
            "type": "array",
            "description": "A list of output payloads.\n",
            "items": {
              "$ref": "#/components/schemas/scoring_payload_optim"
            }
          },
          "output_data_references": {
            "type": "array",
            "description": "A list of output data references.\n",
            "items": {
              "$ref": "#/components/schemas/object_location_optim"
            }
          }
        }
      },
      "job_decision_optimization_result": {
        "allOf": [
          {
            "$ref": "#/components/schemas/job_decision_optimization_request"
          },
          {
            "$ref": "#/components/schemas/field_job_status"
          },
          {
            "$ref": "#/components/schemas/field_solve_state"
          }
        ]
      },
      "instance_resource_entity": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the service instance (active|inactive).",
            "enum": [
              "active",
              "inactive"
            ],
            "example": "active"
          },
          "plan": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment plan ID.",
                "example": "6f026320-57b9-483a-84c2-60008e7d6444"
              },
              "name": {
                "type": "string",
                "description": "The payment plan name.",
                "example": "lite",
                "enum": [
                  "lite",
                  "standard",
                  "professional"
                ]
              },
              "version": {
                "type": "integer",
                "description": "1 - for v1 plans, 2 - for the v2 plans where v2 plan means an instance is space / project aware.\n",
                "minimum": 1,
                "maximum": 2,
                "example": 2
              }
            },
            "required": [
              "id",
              "name",
              "version"
            ]
          },
          "crn": {
            "type": "string",
            "example": "crn:v1:bluemix:public:pm-20:us-south:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4::"
          },
          "account": {
            "$ref": "#/components/schemas/bluemixAccount"
          },
          "consumption": {
            "$ref": "#/components/schemas/consumption"
          },
          "service_endpoints": {
            "type": "string",
            "description": "Cloud Service Endpoints (CSE) the instance is enabled for. Possible values are `public`, `private` and `public-and-private`.\n",
            "example": "private"
          }
        },
        "required": [
          "status",
          "service_endpoints",
          "plan"
        ]
      },
      "consumption": {
        "type": "object",
        "description": "The consumption part is available only when `plan.version` is `2`.\nAll the values are calculated at the account\nlevel the instance belongs to, not the instance itself.\n",
        "properties": {
          "capacity_unit_hours": {
            "type": "object",
            "properties": {
              "expiration_date": {
                "$ref": "#/components/schemas/limitExpirationDate"
              },
              "current": {
                "type": "number",
                "description": "The current total computation time (in capacity unit hours). It is a sum of both, reserved and\nalready send to BSS, units.\n",
                "example": 10.33
              },
              "limit": {
                "type": "number",
                "format": "double",
                "description": "The maximal computation time (in capacity unit hours).",
                "example": 20
              }
            },
            "required": [
              "current"
            ]
          },
          "gpu_count": {
            "type": "object",
            "properties": {
              "current": {
                "type": "integer",
                "description": "The current number of reserved GPUs.",
                "example": 2
              },
              "limit": {
                "type": "integer",
                "description": "The maximal number of reserved GPUs.",
                "example": 8
              }
            }
          },
          "do_job_count": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The maximal number of parallel DO jobs.",
                "example": 2
              }
            }
          },
          "deployment_job_count": {
            "type": "object",
            "description": "Limit for deployment jobs.",
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The maximal number of deployment jobs.",
                "example": 300
              }
            }
          },
          "details": {
            "type": "array",
            "description": "Grouped compute usage details presented at the account level the instance belongs to.\n",
            "items": {
              "$ref": "#/components/schemas/consumptionDetails"
            }
          },
          "token_count": {
            "$ref": "#/components/schemas/tokenCount"
          }
        }
      },
      "tokenCount": {
        "type": "object",
        "description": "The token count for the account.\n",
        "properties": {
          "current": {
            "type": "integer",
            "description": "The number of tokens used for text generation.\nIt is the sum of the input tokens and generated tokens.\n",
            "example": 234
          },
          "limit": {
            "type": "integer",
            "description": "The maximal number of tokens that can be used, when applicable.\n",
            "example": 25000,
            "minimum": 1
          }
        },
        "required": [
          "current"
        ]
      },
      "limitExpirationDate": {
        "type": "string",
        "format": "date",
        "description": "The expiration date of the instance limit.",
        "example": "2017-06-01"
      },
      "bluemixAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The account ID.",
            "example": "3f026320-57b9-483a-84c2-60008e7d6444"
          }
        },
        "required": [
          "id"
        ]
      },
      "instance_resource": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/resource_meta_base"
          },
          "entity": {
            "$ref": "#/components/schemas/instance_resource_entity"
          }
        }
      },
      "instance_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/instance_resource"
                }
              }
            }
          }
        ]
      },
      "consumptionDetails": {
        "type": "object",
        "description": "Compute usage details in a given context and framework.",
        "properties": {
          "context": {
            "type": "string",
            "description": "Context in which compute resources are consumed."
          },
          "framework": {
            "type": "string",
            "description": "Machine learning framework or tool."
          },
          "capacity_unit_hours": {
            "type": "number",
            "description": "The current total computation time (in capacity unit hours) in a given context and framework.\nIt is a sum of both, reserved and already send to BSS, units.\n",
            "minimum": 0
          },
          "token_count": {
            "type": "integer",
            "description": "The current total number of tokens in a given context and framework.\nIt is a sum of both, reserved and already send to BSS, units.\n",
            "minimum": 0
          },
          "space_id": {
            "type": "string",
            "description": "Space ID on which the consumption is requested.\nAt most, only one of `space_id` or `project_id` will be provided.\n"
          },
          "project_id": {
            "type": "string",
            "description": "Project ID on which the consumption is requested.\nAt most, only one of `space_id` or `project_id` will be provided.\n"
          }
        },
        "required": [
          "context"
        ],
        "example": {
          "context": "wml-deployment-online",
          "framework": "tensorflow",
          "capacity_unit_hours": 0.4,
          "space_id": "3fc54cf1-252f-424b-b52d-5cdd9814987f"
        }
      },
      "experiment_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_project_body"
          },
          {
            "$ref": "#/components/schemas/experiment_entity"
          }
        ]
      },
      "experiment_resource": {
        "type": "object",
        "description": "The information for an experiment.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/experiment_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "experiment_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of experiments.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of experiments.\n",
                "items": {
                  "$ref": "#/components/schemas/experiment_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "experiment_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_project_request"
          }
        ]
      },
      "function_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_project_body"
          },
          {
            "$ref": "#/components/schemas/function_entity"
          }
        ]
      },
      "function_resource": {
        "type": "object",
        "description": "The information for a function.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/function_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "function_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of functions.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of functions.\n",
                "items": {
                  "$ref": "#/components/schemas/function_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "function_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_project_request"
          }
        ]
      },
      "pipeline_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_project_body"
          },
          {
            "$ref": "#/components/schemas/pipeline_entity"
          }
        ]
      },
      "pipeline_resource": {
        "type": "object",
        "description": "The information for a pipeline.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/pipeline_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "pipeline_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of pipelines.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of pipelines.\n",
                "items": {
                  "$ref": "#/components/schemas/pipeline_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "pipeline_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_project_request"
          }
        ]
      },
      "model_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_project_body"
          },
          {
            "$ref": "#/components/schemas/model_entity"
          },
          {
            "$ref": "#/components/schemas/content_location_field"
          }
        ]
      },
      "model_resource": {
        "type": "object",
        "description": "The information for a model.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/model_entity"
              },
              {
                "$ref": "#/components/schemas/extra_model_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "model_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of models.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of models.\n",
                "items": {
                  "$ref": "#/components/schemas/model_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "model_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_project_request"
          }
        ]
      },
      "model_definition_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_project_body"
          },
          {
            "$ref": "#/components/schemas/model_definition_entity"
          }
        ]
      },
      "model_definition_resource": {
        "type": "object",
        "description": "The information for a model definition.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/model_definition_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "model_definition_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of model definitions.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of model definitions.\n",
                "items": {
                  "$ref": "#/components/schemas/model_definition_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "model_definition_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_project_request"
          }
        ]
      },
      "training_definition_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_project_body"
          },
          {
            "$ref": "#/components/schemas/training_definition_entity"
          }
        ]
      },
      "training_definition_resource": {
        "type": "object",
        "description": "The information for a training definition.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/training_definition_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "training_definition_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of training definitions.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of training definitions.\n",
                "items": {
                  "$ref": "#/components/schemas/training_definition_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "training_definition_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_project_request"
          }
        ]
      },
      "job_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_body"
          },
          {
            "$ref": "#/components/schemas/job_entity"
          }
        ]
      },
      "job_resource": {
        "type": "object",
        "description": "The information for a deployment job definition.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/job_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "job_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of deployment job definitions.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of deployment job definitions.\n",
                "items": {
                  "$ref": "#/components/schemas/job_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "job_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_request"
          }
        ]
      },
      "remote_training_system_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/entity_request_space_project_body"
          },
          {
            "$ref": "#/components/schemas/remote_training_system_entity"
          }
        ]
      },
      "remote_training_system_resource": {
        "type": "object",
        "description": "The information for a remote training system.\n",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resource_meta"
              }
            ]
          },
          "entity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/remote_training_system_entity"
              }
            ]
          },
          "system": {
            "$ref": "#/components/schemas/system_details"
          }
        },
        "required": [
          "metadata",
          "entity"
        ]
      },
      "remote_training_system_resources": {
        "allOf": [
          {
            "$ref": "#/components/schemas/pagination"
          },
          {
            "type": "object",
            "description": "Pagination information and list of remote training systems.\n",
            "properties": {
              "resources": {
                "type": "array",
                "description": "A list of remote training systems.\n",
                "items": {
                  "$ref": "#/components/schemas/remote_training_system_resource"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/system"
          }
        ]
      },
      "remote_training_system_revision_entity_request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/revision_entity_space_project_request"
          }
        ]
      }
    },
    "parameters": {
      "version": {
        "name": "version",
        "description": "The version date for the API of the form `YYYY-MM-DD`.\n",
        "example": "2022-08-01",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date"
        },
        "required": true,
        "x-sdk-global-param": true
      },
      "space_id_mandatory": {
        "name": "space_id",
        "description": "The space that contains the resource.\n",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f"
      },
      "space_id": {
        "name": "space_id",
        "description": "The space that contains the resource.\nEither `space_id` or `project_id` query parameter has to be given.\n",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f"
      },
      "project_id": {
        "name": "project_id",
        "description": "The project that contains the resource.\nEither `space_id` or `project_id` query parameter has to be given.\n",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f"
      },
      "rev": {
        "name": "rev",
        "description": "The revision number of the resource.\n",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "example": "2"
      },
      "start": {
        "name": "start",
        "description": "Token required for token-based pagination. This token cannot be determined by end user.\nIt is generated by the service and it is set in the href available in the `next` field.\n",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "description": "How many resources should be returned. By default limit is 100. Max limit allowed is 200.",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 200,
          "default": 100
        },
        "example": 50
      },
      "tag.value": {
        "name": "tag.value",
        "description": "Return only the resources with the given tag values, separated by `or` or `and` to support multiple tags.",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "example": "tf2.0 or tf2.1"
      },
      "search": {
        "name": "search",
        "in": "query",
        "description": "Returns only resources that match this search string.\nThe path to the field must be the complete path to the field, and this field\nmust be one of the indexed fields for this resource type. Note that the\nsearch string must be URL encoded.\n",
        "schema": {
          "type": "string",
          "minLength": 1
        }
      },
      "pipeline_node_id": {
        "name": "pipeline_node_id",
        "in": "query",
        "description": "Returns only resources that match this `pipeline_node_id`, this is only relevant\nif `content_format` is `pipeline-node`.\n",
        "schema": {
          "type": "string"
        },
        "example": "62344cf1-252f-424b-b52d-5cdd9814aacd"
      },
      "deployment_id": {
        "name": "deployment_id",
        "in": "query",
        "description": "Returns only resources that match this `deployment_id`, this is only relevant\nif `content_format` is `coreml`.\n",
        "schema": {
          "type": "string"
        },
        "example": "62344cf1-252f-424b-b52d-5cdd9814aacd"
      },
      "content_format": {
        "name": "content_format",
        "in": "query",
        "description": "This is the format of the content.\nAny value can be used for the\nformat and is there to be able to easily find content by format.\n",
        "schema": {
          "type": "string"
        },
        "example": "native"
      },
      "content_format_mandatory": {
        "name": "content_format",
        "in": "query",
        "description": "This is the format of the content.\nAny value can be used for the\nformat and is there to be able to easily find content by format.\n",
        "schema": {
          "type": "string"
        },
        "example": "native",
        "required": true
      },
      "path_attachment_id": {
        "name": "attachment_id",
        "in": "path",
        "description": "Identifier for the attachment for resources that support separate content.\n",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f",
        "required": true
      },
      "path_experiment_id": {
        "name": "experiment_id",
        "in": "path",
        "description": "Experiment identifier.\n",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f",
        "required": true
      },
      "path_function_id": {
        "name": "function_id",
        "in": "path",
        "description": "Function identifier.\n",
        "schema": {
          "type": "string"
        },
        "example": "64dc8921-345f-234b-462d-78e41246987f",
        "required": true
      },
      "path_pipeline_id": {
        "name": "pipeline_id",
        "description": "Pipeline identifier.\n",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f",
        "required": true
      },
      "path_model_id": {
        "name": "model_id",
        "in": "path",
        "description": "Model identifier.\n",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f",
        "required": true
      },
      "path_model_definition_id": {
        "name": "model_definition_id",
        "in": "path",
        "description": "Model definition identifier.\n",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f",
        "required": true
      },
      "path_training_definition_id": {
        "name": "training_definition_id",
        "in": "path",
        "description": "Training definition identifier.\n",
        "schema": {
          "type": "string"
        },
        "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f",
        "required": true
      },
      "path_job_definition_id": {
        "name": "job_definition_id",
        "in": "path",
        "description": "Deployment job definition identifier.\n",
        "schema": {
          "type": "string"
        },
        "example": "212fadf1-252f-424b-b52d-5cdd98ecfa0",
        "required": true
      },
      "path_remote_training_system_id": {
        "name": "remote_training_system_id",
        "in": "path",
        "description": "Remote training system identifier.\n",
        "schema": {
          "type": "string"
        },
        "example": "3067fdf1-252f-424b-b52d-5cdd981cae3",
        "required": true
      }
    },
    "requestBodies": {
      "FunctionBody": {
        "description": "A gzip file containing code files.\n",
        "required": true,
        "content": {
          "application/gzip": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "ModelDefinitionBody": {
        "description": "A gzip file containing code files.\n",
        "required": true,
        "content": {
          "application/gzip": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request, the response body should contain the reason.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden, an authentication error including trying to access a forbidden space.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "ApplicationZip": {
        "description": "OK.\n",
        "content": {
          "application/zip": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/ml/v4/trainings": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "trainings_create",
        "tags": [
          "Trainings"
        ],
        "summary": "Create a new WML training",
        "description": "Create a new WML training.\n",
        "x-cli-generate-async-handler": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/training_resource_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The training job has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request POST 'https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=%3Cdate%3E' --data-raw '{\n    \"experiment\": {\n        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n        \"rev\": \"2\"\n    },\n    \"pipeline\": {\n        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n        \"rev\": \"2\",\n        \"model_type\": \"<string>\",\n        \"data_bindings\": [\n            {\n                \"data_reference_name\": \"<string>\",\n                \"node_id\": \"<string>\"\n            },\n            {\n                \"data_reference_name\": \"<string>\",\n                \"node_id\": \"<string>\"\n            }\n        ],\n        \"nodes_parameters\": [\n            {\n                \"node_id\": \"<string>\",\n                \"parameters\": \"<object>\"\n            },\n            {\n                \"node_id\": \"<string>\",\n                \"parameters\": \"<object>\"\n            }\n        ],\n        \"hardware_spec\": {\n            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n            \"rev\": \"2\",\n            \"name\": \"<string>\",\n            \"num_nodes\": \"<integer>\"\n        },\n        \"hybrid_pipeline_hardware_specs\": [\n            {\n                \"node_runtime_id\": \"auto_ai.kb\",\n                \"hardware_spec\": {\n                    \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n                    \"rev\": \"2\",\n                    \"name\": \"<string>\",\n                    \"num_nodes\": \"<integer>\"\n                }\n            },\n            {\n                \"node_runtime_id\": \"auto_ai.kb\",\n                \"hardware_spec\": {\n                    \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n                    \"rev\": \"2\",\n                    \"name\": \"<string>\",\n                    \"num_nodes\": \"<integer>\"\n                }\n            }\n        ]\n    },\n    \"model_definition\": {\n        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n        \"rev\": \"2\",\n        \"model_type\": \"<string>\",\n        \"hardware_spec\": {\n            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n            \"rev\": \"2\",\n            \"name\": \"<string>\",\n            \"num_nodes\": \"<integer>\"\n        },\n        \"software_spec\": {\n            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n            \"rev\": \"2\",\n            \"name\": \"...\"\n        },\n        \"command\": \"<string>\",\n        \"parameters\": \"<object>\"\n    },\n    \"training_data_references\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"connection\": \"<object>\",\n            \"location\": \"<object>\",\n            \"schema\": {\n                \"id\": \"<string>\",\n                \"fields\": [\n                    { \"name\": \"duration\",\n                    \"type\": \"number\" }\n                ],\n                \"name\": \"<string>\"\n            }\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"connection\": \"<object>\",\n            \"location\": \"<object>\",\n            \"schema\": {\n                \"id\": \"<string>\",\n                \"fields\": [\n                    { \"name\": \"duration\",\n                    \"type\": \"number\" }\n                ],\n                \"name\": \"<string>\"\n            }\n        }\n    ],\n    \"results_reference\": {\n        \"type\": \"<string>\",\n        \"location\": \"<object>\",\n        \"id\": \"<string>\",\n        \"connection\": \"<object>\"\n    },\n    \"tags\": [\n        \"t1\",\n        \"t2\"\n    ],\n    \"name\": \"my-training\",\n    \"description\": \"My first training.\",\n    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n    \"project_id\": \"12ac4cf1-252f-424b-b52d-5cdd9814987f\"\n}'"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\"}, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"}, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"} ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"} ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\"}, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"} }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"} } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\"}, \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\"], \\\"name\\\": \\\"my-training\\\", \\\"description\\\": \\\"My first training.\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01\"\n\npayload = \"{ \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }, \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"name\\\": \\\"my-training\\\", \\\"description\\\": \\\"My first training.\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "\"CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }, \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"name\\\": \\\"my-training\\\", \\\"description\\\": \\\"My first training.\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);\""
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [{\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }, \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"name\\\": \\\"my-training\\\", \\\"description\\\": \\\"My first training.\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\"\\n}\")\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}\n"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }, \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"name\\\": \\\"my-training\\\", \\\"description\\\": \\\"My first training.\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body."
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }, \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"name\\\": \\\"my-training\\\", \\\"description\\\": \\\"My first training.\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }, \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"name\\\": \\\"my-training\\\", \\\"description\\\": \\\"My first training.\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "trainings_list",
        "tags": [
          "Trainings"
        ],
        "summary": "Retrieve the list of trainings",
        "description": "Retrieve the list of trainings for the specified space or project.\n",
        "parameters": [
          {
            "name": "start",
            "description": "Token required for token-based pagination. This token cannot be determined by end user. It is generated by the service and it is set in the href available in the `next` field.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "How many resources should be returned. Default value is 100. Max value is 200.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "total_count",
            "description": "Compute the total count. May have performance impact.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tag.value",
            "description": "Return only the resources with the given tag value.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "Filter based on 'pipeline' or 'experiment' trainings. Example: `type=pipeline`. If not provided, returns all the trainings.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "Filter based on on the training job state: queued, running, completed, failed etc.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "name": "parent_id",
            "description": "Return the training jobs that are sub-jobs of this parent_id job. The parent_id can be the experiment job ID.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET",
                      "'https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=<string>&limit=100&total_count=<boolean>&tag.value=<string>&type=<string>&state=<string>&space_id=<string>&project_id=<string>&parent_id=<string>&version=<string>'"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=<string>&limit=100&total_count=<boolean>&tag.value=<string>&type=<string>&state=<string>&space_id=<string>&project_id=<string>&parent_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01?start=%3Cstring%3E&limit=100&total_count=%3Cboolean%3E&tag.value=%3Cstring%3E&type=%3Cstring%3E&state=%3Cstring%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E&parent_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=%3Cstring%3E&limit=100&total_count=%3Cboolean%3E&tag.value=%3Cstring%3E&type=%3Cstring%3E&state=%3Cstring%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E&parent_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=<string>&limit=100&total_count=<boolean>&tag.value=<string>&type=<string>&state=<string>&space_id=<string>&project_id=<string>&parent_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=%3Cstring%3E&limit=100&total_count=%3Cboolean%3E&tag.value=%3Cstring%3E&type=%3Cstring%3E&state=%3Cstring%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E&parent_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=<string>&limit=100&total_count=<boolean>&tag.value=<string>&type=<string>&state=<string>&space_id=<string>&project_id=<string>&parent_id=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          },
          "response-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET",
                      "'https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=<string>&limit=100&total_count=<boolean>&tag.value=<string>&type=<string>&state=<string>&space_id=<string>&project_id=<string>&parent_id=<string>&version=<string>'"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/trainings/{training_id}": {
      "parameters": [
        {
          "name": "training_id",
          "in": "path",
          "description": "The training identifier.",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/space_id"
        },
        {
          "$ref": "#/components/parameters/project_id"
        }
      ],
      "get": {
        "operationId": "trainings_get",
        "tags": [
          "Trainings"
        ],
        "summary": "Retrieve the training",
        "description": "Retrieve the training with the specified identifier. This call supports Web-Socket upgrade.\nHowever in order to preserve bandwidth, web-socket messages are not context complete.\nMeaning that a single web-socket message only reflects a message or metric happening in the\ncontext of a training job or sub-job (in case of experiment trainings or HPO/AutoML trainings). Hence the metadata property of a\nweb-socket message contains a parent with the href information of the parent job that triggered this particular job.\nAlso the metrics will be provided as they arrive from the backend runtime, and not as a cumulative list.\nIn order to get the full view of the running training job the caller should do a regular GET call.\n",
        "responses": {
          "101": {
            "description": "In case of web socket upgrade, the service messages emitted have the following shape.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_websocket"
                }
              }
            }
          },
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=<string>&limit=100&total_count=<boolean>&tag.value=<string>&type=<string>&state=<string>&space_id=<string>&project_id=<string>&parent_id=<string>&version=2020-09-01'"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?version=2020-09-01&space_id=<string>&project_id=<string>\").method(\"GET\", null).build();\n",
                      "\n",
                      "Response response = client.newCall(request).execute();\n",
                      "\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?version=2020-09-01&space_id=<string>&project_id=<string>\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01/:training_id?version=2020-09-01&space_id=%3Cstring%3E&project_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?version=%3Cdate%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?version=2020-09-01&space_id=<string>&project_id=<string>\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?start=%3Cstring%3E&limit=100&total_count=%3Cboolean%3E&tag.value=%3Cstring%3E&type=%3Cstring%3E&state=%3Cstring%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E&parent_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?version=<date>&space_id=<string>&project_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "trainings_delete",
        "tags": [
          "Trainings"
        ],
        "summary": "Cancel the training",
        "description": "Cancel the specified training and remove it.\n",
        "parameters": [
          {
            "name": "hard_delete",
            "description": "Set to true in order to also delete the job metadata information.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Training cancelled."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?hard_delete=<boolean>&version=2020-09-01&space_id=<string>&project_id=<string>'"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?hard_delete=<boolean>&version=2020-09-01&space_id=<string>&project_id=<string>\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings?version=2020-09-01/:training_id?hard_delete=%3Cboolean%3E&version=2020-09-01&space_id=%3Cstring%3E&project_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?hard_delete=%3Cboolean%3E&version=%3Cdate%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?hard_delete=<boolean>&version=2020-09-01&space_id=<string>&project_id=<string>\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?hard_delete=%3Cboolean%3E&version=2020-09-01&space_id=%3Cstring%3E&project_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/trainings/:training_id?hard_delete=<boolean>&version=<date>&space_id=<string>&project_id=<string>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "deployments_create",
        "tags": [
          "Deployments"
        ],
        "summary": "Create a new WML deployment",
        "description": "Create a new deployment, the parameters specifying the deployment type are `online` and `batch`.\nThese parameters are mutually exclusive, specify only one of these when creating a deployment.\n\nUse `hybrid_pipeline_hardware_specs` only when creating a `batch` deployment job of a hybrid pipeline\nin order to specify compute configuration for each pipeline node. For all other `batch` deployment\ncases use `hardware_spec` to specify compute configuration. The `hybrid_pipeline_hardware_specs` and\n`hardware_spec` are mutually exclusive, specify only one of these when creating a deployment.\n\nFor `batch` deployments, `hardware_spec.num_nodes` parameter is not currently supported.\n\nFor `online` deployments, `hardware_spec` cannot be specified at the time of creation,\n`hardware_spec.num_nodes` parameter is not supported as part of\n`POST /ml/v4/deployments` API request, but it can be updated using `PATCH /ml/v4/deployments/<deployment id>`.\n\nFor `online` deployments, `serving_name` can be provided in\n`online.parameters.\nThe serving name can have the characters `[a-z,0-9,_]` and must not be more than 36 characters.\nThe `serving_name` can be used in the prediction URL in place of the `deployment_id`.\n\nSee the documentation [supported frameworks](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/pm_service_supported_frameworks.html?context=cpdaas&audience=wdp)\nfor details about which frameworks can be used in a deployment.\n",
        "x-cli-generate-async-handler": true,
        "requestBody": {
          "description": "The deployment entity.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deployment_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Deployment created.",
            "headers": {
              "Location": {
                "description": "Location of the newly created resource (deployment).",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request POST 'https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"tags\": [\n",
                      "        \"dev\",\n",
                      "        \"TF\"\n",
                      "    ],\n",
                      "    \"name\": \"customer_churn\",\n",
                      "    \"description\": \"Customer churn prediction model deployment\",\n",
                      "    \"custom\": \"<object>\",\n",
                      "    \"asset\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\"\n",
                      "    },\n",
                      "    \"hardware_spec\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\",\n",
                      "        \"name\": \"<string>\",\n",
                      "        \"num_nodes\": \"<integer>\"\n",
                      "    },\n",
                      "    \"hybrid_pipeline_hardware_specs\": [\n",
                      "        {\n",
                      "            \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "            \"hardware_spec\": {\n",
                      "                \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                \"rev\": \"2\",\n",
                      "                \"name\": \"<string>\",\n",
                      "                \"num_nodes\": \"<integer>\"\n",
                      "            }\n",
                      "        },\n",
                      "        {\n",
                      "            \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "            \"hardware_spec\": {\n",
                      "                \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                \"rev\": \"2\",\n",
                      "                \"name\": \"<string>\",\n",
                      "                \"num_nodes\": \"<integer>\"\n",
                      "            }\n",
                      "        }\n",
                      "    ],\n",
                      "    \"online\": {\n",
                      "        \"parameters\": \"<object>\"\n",
                      "    },\n",
                      "    \"batch\": {\n",
                      "        \"parameters\": \"<object>\"\n",
                      "    },\n",
                      "    \"r_shiny\": {\n",
                      "        \"authentication\": \"members_of_deployment_space\",\n",
                      "        \"parameters\": \"<object>\"\n",
                      "    },\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"tags\\\": [ \\\"dev\\\", \\\"TF\\\"], \\\"name\\\": \\\"customer_churn\\\", \\\"description\\\": \\\"Customer churn prediction model deployment\\\", \\\"custom\\\": \\\"<object>\\\", \\\"asset\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\"}, \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} } ], \\\"online\\\": { \\\"parameters\\\": \\\"<object>\\\"}, \\\"batch\\\": { \\\"parameters\\\": \\\"<object>\\\"}, \\\"r_shiny\\\": { \\\"authentication\\\": \\\"members_of_deployment_space\\\", \\\"parameters\\\": \\\"<object>\\\"} }   }\");\n",
                      "\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"tags\\\": [ \\\"dev\\\", \\\"TF\\\" ], \\\"name\\\": \\\"customer_churn\\\", \\\"description\\\": \\\"Customer churn prediction model deployment\\\", \\\"custom\\\": \\\"<object>\\\", \\\"asset\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ], \\\"online\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"batch\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"r_shiny\\\": { \\\"authentication\\\": \\\"members_of_deployment_space\\\", \\\"parameters\\\": \\\"<object>\\\" } }\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"tags\\\": [ \\\"dev\\\", \\\"TF\\\" ], \\\"name\\\": \\\"customer_churn\\\", \\\"description\\\": \\\"Customer churn prediction model deployment\\\", \\\"custom\\\": \\\"<object>\\\", \\\"asset\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ], \\\"online\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"batch\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"r_shiny\\\": { \\\"authentication\\\": \\\"members_of_deployment_space\\\", \\\"parameters\\\": \\\"<object>\\\" } }\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"tags\\\": [ \\\"dev\\\", \\\"TF\\\" ], \\\"name\\\": \\\"customer_churn\\\", \\\"description\\\": \\\"Customer churn prediction model deployment\\\", \\\"custom\\\": \\\"<object>\\\", \\\"asset\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ], \\\"online\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"batch\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"r_shiny\\\": { \\\"authentication\\\": \\\"members_of_deployment_space\\\", \\\"parameters\\\": \\\"<object>\\\" } }\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"tags\\\": [ \\\"dev\\\", \\\"TF\\\" ], \\\"name\\\": \\\"customer_churn\\\", \\\"description\\\": \\\"Customer churn prediction model deployment\\\", \\\"custom\\\": \\\"<object>\\\", \\\"asset\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ], \\\"online\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"batch\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"r_shiny\\\": { \\\"authentication\\\": \\\"members_of_deployment_space\\\", \\\"parameters\\\": \\\"<object>\\\" } }\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"tags\\\": [ \\\"dev\\\", \\\"TF\\\" ], \\\"name\\\": \\\"customer_churn\\\", \\\"description\\\": \\\"Customer churn prediction model deployment\\\", \\\"custom\\\": \\\"<object>\\\", \\\"asset\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ], \\\"online\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"batch\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"r_shiny\\\": { \\\"authentication\\\": \\\"members_of_deployment_space\\\", \\\"parameters\\\": \\\"<object>\\\" } }\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"tags\\\": [ \\\"dev\\\", \\\"TF\\\" ], \\\"name\\\": \\\"customer_churn\\\", \\\"description\\\": \\\"Customer churn prediction model deployment\\\", \\\"custom\\\": \\\"<object>\\\", \\\"asset\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ], \\\"online\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"batch\\\": { \\\"parameters\\\": \\\"<object>\\\" }, \\\"r_shiny\\\": { \\\"authentication\\\": \\\"members_of_deployment_space\\\", \\\"parameters\\\": \\\"<object>\\\" } }\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "deployments_list",
        "tags": [
          "Deployments"
        ],
        "summary": "Retrieve the deployments",
        "description": "Retrieve the list of deployments for the specified space.\n",
        "parameters": [
          {
            "name": "space_id",
            "description": "Retrieves the deployments that belong to this space.",
            "example": "2ae804f8-fa85-4106-8228-cbc7e408ad79",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serving_name",
            "description": "Retrieves the deployment, if any, that contains this `serving_name`.",
            "example": "churn",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag.value",
            "description": "Retrieves only the resources with the given tag value.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "description": "Retrieves only the resources with the given asset_id,\nasset_id would be either model_id or function_id.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "Retrieves only the resources with the given name.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "Retrieves the resources filtered with the given type. Allowed values are `model`, `function`, `py_script` and `do`.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "Retrieves the resources filtered by state. Allowed values are `initializing`, `updating`, `ready` and `failed`.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stats",
            "description": "Returns stats about deployments within a space or across spaces if it is set to true. This query parameter cannot be combined with any other except for 'space_id'.",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "conflict",
            "description": "Returns whether serving_name is available for use or not. This query parameter cannot be combined with any other except for 'serving_name'.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment_resources"
                }
              }
            }
          },
          "204": {
            "description": "serving_name is available for use. Returned when serving_name and conflict query parameters are used."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Returned when serving_name and conflict query parameters are used. The response body will contain the reason."
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/deployments?space_id=<string>&tag.value=<string>&asset_id=<string>&version=2020-09-01'"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?space_id=<string>&tag.value=<string>&asset_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?space_id=%3Cstring%3E&tag.value=%3Cstring%3E&asset_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?space_id=%3Cstring%3E&tag.value=%3Cstring%3E&asset_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?space_id=<string>&tag.value=<string>&asset_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?space_id=%3Cstring%3E&tag.value=%3Cstring%3E&asset_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments?space_id=<string>&tag.value=<string>&asset_id=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployments/{deployment_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "name": "deployment_id",
          "in": "path",
          "description": "The deployment id.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "operationId": "deployments_get",
        "tags": [
          "Deployments"
        ],
        "summary": "Retrieve the deployment details",
        "description": "Retrieve the deployment details with the specified identifier.\n",
        "parameters": [
          {
            "name": "space_id",
            "description": "Retrieves the deployments of assets that belong to this space.",
            "example": "2ae804f8-fa85-4106-8228-cbc7e408ad79",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location \"{url}/v4/deployments/{deployment_id}\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);."
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deployments_delete",
        "tags": [
          "Deployments"
        ],
        "summary": "Delete the deployment",
        "description": "Delete the deployment with the specified identifier.\n",
        "parameters": [
          {
            "name": "space_id",
            "description": "Retrieves the deployments of assets that belong to this space.",
            "example": "2ae804f8-fa85-4106-8228-cbc7e408ad79",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01'"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"\",);\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\").method(\"DELETE\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "deployments_update",
        "tags": [
          "Deployments"
        ],
        "summary": "Update the deployment metadata",
        "parameters": [
          {
            "name": "space_id",
            "description": "Retrieves the deployments of assets that belong to this space.",
            "example": "2ae804f8-fa85-4106-8228-cbc7e408ad79",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "description": "Update the deployment metadata.\nThe following parameters of deployment metadata are supported for the patch operation.\n\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n- `/hardware_spec`\n- `/hybrid_pipeline_hardware_specs`\n- `/asset`\n- `/online/parameters`\n\n\n\nIn case of online deployments, using PATCH operation of `/ml/v4/deployments`,\nusers can update the number of copies of an online deployment.\nUsers can specify the desired value of number of copies in `hardware_spec.num_nodes` parameter.\nAs `hardware_spec.name` or `hardware_spec.id` is mandatory for `hardware_spec` schema,\na valid value such as `XS`, `S` must be specified for `hardware_spec.name` parameter\nas part of PATCH request. Alternatively, users can also specify a valid ID of a hardware\nspecification in `hardware_spec.id` parameter. However, changes related to `hardware_spec.name`\nor `hardware_spec.id` specified in PATCH operation will not be applied for online deployments.\n<br />\nIn case of batch deployments, using PATCH operation of `/ml/v4/deployments`, users can update\nthe hardware specification so that subsequent batch deployment jobs can make use of the updated\ncompute configurations. To update the compute configuration, users must specify a valid value for\neither `hardware_spec.name` or `hardware_spec.id` of the hardware specification that suits their\nrequirement. In the batch deployment context, `hardware_spec.num_nodes` parameter is not currently supported.\n<br />\nWhen 'asset' is patched with id/rev:\n\n- Deployment with the patched id/rev is started.\n- If the deployment is asynchronous, 202 response code will be returned and one can poll the deployment status thereafter.\n- If the deployment is synchronous, 200 response code will be returned with patched deployment response.\n- If any failures, deployment will be reverted back to the previous id/rev and the failure message will be captured in 'failures' field in the response.\n\nIn the case of an online deployment, the PATCH operation with path specified as `/online/parameters` can be used to update the `serving_name`.\n\n",
        "requestBody": {
          "description": "The json patch.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "deployment_patch_request_helper",
        "responses": {
          "200": {
            "description": "Deployment updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment_resource"
                }
              }
            }
          },
          "202": {
            "description": "Deployment accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id?space_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployments/{deployment_id}/predictions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "name": "deployment_id",
          "in": "path",
          "description": "The `deployment_id` can be either the `deployment_id` that identifies the deployment or a `serving_name` that allows a predefined URL to be used to post a prediction.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "operationId": "deployments_compute_predictions",
        "tags": [
          "Deployments"
        ],
        "summary": "Execute a synchronous deployment prediction",
        "description": "Execute a synchronous prediction for the deployment with the specified identifier.\nIf a `serving_name` is used then it must match the `serving_name` that is returned in the `serving_urls`.\n",
        "requestBody": {
          "description": "The scoring data.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sync_scoring_data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Scoring response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sync_scoring_data_results"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request POST 'https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id/predictions?version=2020-09-01' --data-raw '{\n",
                      "    \"input_data\": [\n",
                      "        {\n",
                      "            \"id\": \"<string>\",\n",
                      "            \"fields\": [\n",
                      "                \"<string>\",\n",
                      "                \"<string>\"\n",
                      "            ],\n",
                      "            \"values\": [\n",
                      "                [\n",
                      "                    \"<object>\",\n",
                      "                    \"<object>\"\n",
                      "                ],\n",
                      "                [\n",
                      "                    \"<object>\",\n",
                      "                    \"<object>\"\n",
                      "                ]\n",
                      "            ]\n",
                      "        },\n",
                      "        {\n",
                      "            \"id\": \"<string>\",\n",
                      "            \"fields\": [\n",
                      "                \"<string>\",\n",
                      "                \"<string>\"\n",
                      "            ],\n",
                      "            \"values\": [\n",
                      "                [\n",
                      "                    \"<object>\",\n",
                      "                    \"<object>\"\n",
                      "                ],\n",
                      "                [\n",
                      "                    \"<object>\",\n",
                      "                    \"<object>\"\n",
                      "                ]\n",
                      "            ]\n",
                      "        }\n",
                      "    ]\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id/predictions?version=2020-09-01\"\n\npayload = \"{ \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ]\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id/predictions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ { \\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ]\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id/predictions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ]\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id/predictions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ]\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ]\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id/predictions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployments/:deployment_id/predictions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ]\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployment_jobs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "deployment_jobs_list",
        "tags": [
          "Deployment Jobs"
        ],
        "summary": "Retrieve the deployment jobs",
        "description": "Retrieve the status of the current jobs. The system will apply a max limit of jobs retained by the system\nas we cannot accumulate an infinite number of jobs. Only most recent 300 jobs (system configurable)\nwill be preserved. Older jobs will be purged by the system.\n",
        "parameters": [
          {
            "name": "space_id",
            "description": "Retrieves the deployment jobs that belong to this space.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag.value",
            "description": "Retrieves only the jobs with these tags (comma separated).\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "Filter based on on the deployment job state: queued, running, completed, failed etc.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deployment_id",
            "description": "Filter based on the deployment_id.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "description": "Retrieves only fields from 'decision_optimization' and 'scoring' section mentioned as value(s)\n(comma separated) as output response fields. Retrieves all the fields if not mentioned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs response.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jobs_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=<string>&tag.value=<string>&state=<string>&deployment_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=<string>&tag.value=<string>&state=<string>&deployment_id=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=<string>&tag.value=<string>&state=<string>&deployment_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=%3Cstring%3E&tag.value=%3Cstring%3E&state=%3Cstring%3E&deployment_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=%3Cstring%3E&tag.value=%3Cstring%3E&state=%3Cstring%3E&deployment_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=<string>&tag.value=<string>&state=<string>&deployment_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=%3Cstring%3E&tag.value=%3Cstring%3E&state=%3Cstring%3E&deployment_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?space_id=<string>&tag.value=<string>&state=<string>&deployment_id=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "deployment_jobs_create",
        "tags": [
          "Deployment Jobs"
        ],
        "summary": "Start an asynchronous deployment job",
        "description": "Start a deployment job asynchronously. This can perform batch scoring, streaming, or other types of batch\noperations, such as solving a Decision Optimization problem.\nDepending on the `version` date passed, the `platform_jobs` section in the response may or may not be populated.\nUse the GET call to retrieve the deployment job, this GET call will eventually populate the `platform_jobs` section.\nRefer to the `version date` description for more details.\n",
        "parameters": [
          {
            "name": "retention",
            "description": "Defines number of days to retain the job meta. Job meta will be auto deleted after that.\nValue '-1' sets the meta to be never auto deleted. accepted values are positive integer and '-1'.\nThe default value if the parameter is not passed is '30' days.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request body contains information about the batch deployment job that is described in more detail below.\n\nThe `deployment` is a reference to the deployment associated with the deployment job or deployment job definition.\n\nThe `scoring` and `decision_optimization` properties are mutually exclusive.\nSpecify only one of these when submitting a batch deployment job, one of these fields\nmust be defined.\n\nUse `hybrid_pipeline_hardware_specs` only in a batch deployment job of a hybrid pipeline\nin order to specify compute configuration for each pipeline node. For all other cases use `hardware_spec`\nto specify compute configuration.\n\nIn case of output data references where the data asset is a remote database, users can specify if the batch\ndeployment output must be appended to the table or if the table is to be truncated and output data updated.\nThe `output_data_references.location.write_mode` parameter can be used to for this purpose.\nThe values `truncate` or `append` can be specified for `output_data_references.location.write_mode`\nparameter.\n* Specifying `truncate` as value will truncate the table and the batch output data will be inserted.\n* Specifying `append` as value will insert the batch output data to the remote database table.\n* The `write_mode` parameter is applicable only for `output_data_references` parameter.\n* The `write_mode` parameter will be applicable only for remote database related data assets.\nThis parameter will not be applicable for local data assets or a COS based data asset.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/job_entity_request"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jobs_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Location of the job resource. Example: `{base_url}/ml/v4/deployment_jobs/53dc4cf1-252f-424b-b52d-5cdd9814987f`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request POST 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2020-09-01' --data-raw '{\n   \"space_id\":\"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n   \"name\":\"my-resource\",\n   \"deployment\":{\n      \"id\":\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\"\n   },\n   \"hardware_spec\":{\n      \"id\":\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n      \"rev\":\"2\",\n      \"name\":\"string\",\n      \"num_nodes\":2\n   },\n   \"scoring\":{\n      \"input_data\":[\n         {\n            \"id\":\"string\",\n            \"type\":\"target\",\n            \"fields\":[\n               \"string\"\n            ],\n            \"values\":[\n               [\n                  {\n                     \n                  }\n               ]\n            ],\n            \"targets\":[\n               [\n                  {\n                     \n                  }\n               ]\n            ]\n         }\n      ],\n      \"output_data_reference\":{\n         \"id\":\"string\",\n         \"type\":\"s3\",\n         \"connection\":{\n            \n         }\n      },\n      \"evaluations\":[\n         {\n            \"id\":\"string\",\n            \"input_target\":\"string\",\n            \"metrics_names\":[\n               \"auroc\",\n               \"accuracy\"\n            ]\n         }\n      ]\n   }\n}' \n \n",
                      "echo \"DO Payload Example\" \ncurl --location --request POST 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2020-09-01' --data-raw '{\n   \"name\":\"test-job\",\n   \"space_id\":\"dcfb2ae2-1733-11ec-9621-0242ac130002\",\n   \"deployment\":{\n      \"id\":\"e672c9e0-1733-11ec-9621-0242ac130002\"\n   },\n   \"decision_optimization\":{\n      \"solve_parameters\":{\n         \"oaas.logAttachmentName\":\"log.txt\",\n         \"oaas.logTailEnabled\":\"true\"\n      },\n       \"input_data\":[\n         {\n            \"id\": \"data.bin\",\n            \"content\": \"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\"\n         },\n         {\n            \"id\": \"tuples.csv\",\n            \"fields\": [\"Name\", \"Value\"],\n            \"values\": [   [\"name1\", 1],\n                          [\"name2\", 11934]\n            ]}            \n         },\n      ],\n      \"input_data_references\":[\n         {\n            \"id\":\"c1.mod\",\n            \"type\":\"data_asset\",\n            \"location\":{\n               \"href\":\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\"\n            }\n         }\n      ],\n      \"output_data\":[\n         {\n            \"id\":\".*\\\\.*\"\n         }\n      ]\n}'"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"space_id\\\":\\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\",\\\"name\\\":\\\"my-resource\\\",\\\"deployment\\\":{\\\"id\\\":\\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\"},\\\"hardware_spec\\\":{\\\"id\\\":\\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\",\\\"rev\\\":\\\"2\\\",\\\"name\\\":\\\"string\\\",\\\"num_nodes\\\":2},\\\"scoring\\\":{\\\"input_data\\\":[{\\\"id\\\":\\\"string\\\",\\\"type\\\":\\\"target\\\",\\\"fields\\\":[{\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}],\\\"values\\\":[[{}]],\\\"targets\\\":[[{}]]}],\\\"output_data_reference\\\":{\\\"id\\\":\\\"string\\\",\\\"type\\\":\\\"s3\\\",\\\"connection\\\":{}},\\\"evaluations\\\":[{\\\"id\\\":\\\"string\\\",\\\"input_target\\\":\\\"string\\\",\\\"metrics_names\\\":[\\\"auroc\\\",\\\"accuracy\\\"]}]}}\");\nRequest request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2020-09-01\").method(\"POST\", body).build();\nResponse response = client.newCall(request).execute(); \n \n",
                      "/* DO Payload Example */ \nOkHttpClient client = new OkHttpClient().newBuilder().build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"test-job\\\",\\\"space_id\\\":\\\"dcfb2ae2-1733-11ec-9621-0242ac130002\\\",\\\"deployment\\\":{\\\"id\\\":\\\"e672c9e0-1733-11ec-9621-0242ac130002\\\"},\\\"decision_optimization\\\":{\\\"solve_parameters\\\":{\\\"oaas.logAttachmentName\\\":\\\"log.txt\\\",\\\"oaas.logTailEnabled\\\":\\\"true\\\"},\\\"input_data\\\":[{\\\"id\\\":\\\"data.bin\\\",\\\"content\\\":\\\"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\\\"},{\\\"id\\\":\\\"tuples.csv\\\",\\\"fields\\\":['Name','Value'],\\\"values\\\":[['name1',1],['name2',11934]]}},],\\\"input_data_references\\\":[{\\\"id\\\":\\\"c1.mod\\\",\\\"type\\\":\\\"data_asset\\\",\\\"location\\\":{\\\"href\\\":\\\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\\\"}}],\\\"output_data\\\":[{\\\"id\\\":\\\".*\\\\.*\\\"}]}\");\nRequest request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2020-09-01\").method(\"POST\", body).build();\nResponse response = client.newCall(request).execute();"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "\"import requests\n \n url = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\"\n \n payload = {\n   \"space_id\":\"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n   \"name\":\"my-resource\",\n   \"deployment\":{\n      \"id\":\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\"\n   },\n   \"hardware_spec\":{\n      \"id\":\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n      \"rev\":\"2\",\n      \"name\":\"string\",\n      \"num_nodes\":2\n   },\n   \"scoring\":{\n      \"input_data\":[\n         {\n            \"id\":\"string\",\n            \"type\":\"target\",\n            \"fields\":[\n               {\n                   \"name\":\"string\",\n                   \"duration\":\"number\"\n               }\n            ],\n            \"values\":[\n               [ { } ]\n            ],\n            \"targets\":[\n               [ { } ]\n            ]\n         }\n      ],\n      \"output_data_reference\":{\n         \"id\":\"string\",\n         \"type\":\"s3\",\n         \"connection\":{\n         }\n      },\n      \"evaluations\":[\n         {\n            \"id\":\"string\",\n            \"input_target\":\"string\",\n            \"metrics_names\":[\n               \"auroc\",\n               \"accuracy\"\n            ]\n         }\n      ]\n   }\n}\n \n headers = {\n 'Authorization': 'Bearer <token>',\n 'Content-Type': 'application/json',\n }\n \n response = requests.request(\"POST\", url, headers=headers, data = payload)\n \n print(response.text.encode('utf8')) \n \n\",\n",
                      "#DO Payload Example \n import requests\n \n url = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\"\n \n payload = {\n   \"name\":\"test-job\",\n   \"space_id\":\"dcfb2ae2-1733-11ec-9621-0242ac130002\",\n   \"deployment\":{\n      \"id\":\"e672c9e0-1733-11ec-9621-0242ac130002\"\n   },\n   \"decision_optimization\":{\n      \"solve_parameters\":{\n         \"oaas.logAttachmentName\":\"log.txt\",\n         \"oaas.logTailEnabled\":\"true\"\n      },\n       \"input_data\":[\n         {\n            \"id\": \"data.bin\",\n            \"content\": \"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\"\n         },\n         {\n            \"id\": \"tuples.csv\",\n            \"fields\": ['Name', 'Value'],\n            \"values\": [   ['name1', 1],\n                          ['name2', 11934]\n            ]}            \n         },\n      ],\n      \"input_data_references\":[\n         {\n            \"id\":\"c1.mod\",\n            \"type\":\"data_asset\",\n            \"location\":{\n               \"href\":\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\"\n            }\n         }\n      ],\n      \"output_data\":[\n         {\n            \"id\":\".*\\\\.*\"\n         }\n      ]\n}\n \n headers = {\n 'Authorization': 'Bearer <token>',\n 'Content-Type': 'application/json',\n }\n \n response = requests.request(\"POST\", url, headers=headers, data = payload)\n \n print(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Authorization: Bearer <token>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Cookie: __cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\\"tags\\\":[\\\"test\\\",\\\"frank\\\"],\\\"space_id\\\":\\\"d814cfc4-fba7-4130-b31a-06151b88ea38\\\",\\\"name\\\":\\\"testdeployment_job_definitiondef\\\",\\\"description\\\":\\\"testtd\\\",\\\"custom\\\":{\\\"test\\\":\\\"hi\\\"},\\\"deployment\\\":{\\\"id\\\":\\\"1223\\\"},\\\"decision_optimization\\\":{\\\"input_data\\\":[{\\\"id\\\":\\\"123\\\",\\\"fields\\\":[],\\\"values\\\":[]}],\\\"output_data\\\":[{\\\"id\\\":\\\"123\\\"}]},\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"string\\\",\\\"num_nodes\\\":2},\\\"hybrid_pipeline_hardware_specs\\\":[{\\\"node_runtime_id\\\":\\\"auto_ai.kb\\\",\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"default_py3.6\\\",\\\"num_nodes\\\":2}}]}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);\n \n",
                      "/* DO Payload Example */ \nCURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Authorization: Bearer <token>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Cookie: __cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\\"name\\\":\\\"test-job\\\",\\\"space_id\\\":\\\"dcfb2ae2-1733-11ec-9621-0242ac130002\\\",\\\"deployment\\\":{\\\"id\\\":\\\"e672c9e0-1733-11ec-9621-0242ac130002\\\"},\\\"decision_optimization\\\":{\\\"solve_parameters\\\":{\\\"oaas.logAttachmentName\\\":\\\"log.txt\\\",\\\"oaas.logTailEnabled\\\":\\\"true\\\"},\\\"input_data\\\":[{\\\"id\\\":\\\"data.bin\\\",\\\"content\\\":\\\"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\\\"},{\\\"id\\\":\\\"tuples.csv\\\",\\\"fields\\\":[{\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}],\\\"values\\\":[['name1',1],['name2',11934]]}},],\\\"input_data_references\\\":[{\\\"id\\\":\\\"c1.mod\\\",\\\"type\\\":\\\"data_asset\\\",\\\"location\\\":{\\\"href\\\":\\\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\\\"}}],\\\"output_data\\\":[{\\\"id\\\":\\\".*\\\\.*\\\"}]}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main \nimport ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\") \nfunc main() {\n \n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\" \n  method := \"POST\"\n  payload := strings.NewReader(\"{\\\"tags\\\":[\\\"test\\\",\\\"frank\\\"],\\\"space_id\\\":\\\"d814cfc4-fba7-4130-b31a-06151b88ea38\\\",\\\"name\\\":\\\"testdeployment_job_definitiondef\\\",\\\"description\\\":\\\"testtd\\\",\\\"custom\\\":{\\\"test\\\":\\\"hi\\\"},\\\"deployment\\\":{\\\"id\\\":\\\"1223\\\"},\\\"decision_optimization\\\":{\\\"input_data\\\":[{\\\"id\\\":\\\"123\\\",\\\"fields\\\":[],\\\"values\\\":[]}],\\\"output_data\\\":[{\\\"id\\\":\\\"123\\\"}]},\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"string\\\",\\\"num_nodes\\\":2},\\\"hybrid_pipeline_hardware_specs\\\":[{\\\"node_runtime_id\\\":\\\"auto_ai.kb\\\",\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"default_py3.6\\\",\\\"num_nodes\\\":2}}]}\")\n  client := &http.Client { }\n  req, err := http.NewRequest(method, url, payload) \n  if err != nil {  fmt.Println(err) }\n  req.Header.Add(\"Authorization\", \"Bearer <token>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Cookie\", \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\")\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n \n  fmt.Println(string(body))} \n \n",
                      "// DO Payload Example \npackage main \nimport ( \"fmt\" \"strings\" \"net/http\" \"io/ioutil\") \nfunc main() {\n \n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\"\n  method := \"POST\"\n  payload := strings.NewReader(\"{\\\"name\\\":\\\"test-job\\\",\\\"space_id\\\":\\\"dcfb2ae2-1733-11ec-9621-0242ac130002\\\",\\\"deployment\\\":{\\\"id\\\":\\\"e672c9e0-1733-11ec-9621-0242ac130002\\\"},\\\"decision_optimization\\\":{\\\"solve_parameters\\\":{\\\"oaas.logAttachmentName\\\":\\\"log.txt\\\",\\\"oaas.logTailEnabled\\\":\\\"true\\\"},\\\"input_data\\\":[{\\\"id\\\":\\\"data.bin\\\",\\\"content\\\":\\\"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\\\"},{\\\"id\\\":\\\"tuples.csv\\\",\\\"fields\\\":[{\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}],\\\"values\\\":[['name1',1],['name2',11934]]}},],\\\"input_data_references\\\":[{\\\"id\\\":\\\"c1.mod\\\",\\\"type\\\":\\\"data_asset\\\",\\\"location\\\":{\\\"href\\\":\\\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\\\"}}],\\\"output_data\\\":[{\\\"id\\\":\\\".*\\\\.*\\\"}]}\")\n  client := &http.Client { }\n  req, err := http.NewRequest(method, url, payload)\n  if err != nil {  fmt.Println(err) }\n  req.Header.Add(\"Authorization\", \"Bearer <token>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Cookie\", \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\")\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body) \n \n  fmt.Println(string(body))}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = truerequest = Net::HTTP::Post.new(url)\n\nrequest[\"Authorization\"] = \"Bearer <token>\"request[\"Content-Type\"] = \"application/json\"request[\"Cookie\"] = \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\"request.body = \"{\\\"tags\\\":[\\\"test\\\",\\\"frank\\\"],\\\"space_id\\\":\\\"d814cfc4-fba7-4130-b31a-06151b88ea38\\\",\\\"name\\\":\\\"testdeployment_job_definitiondef\\\",\\\"description\\\":\\\"testtd\\\",\\\"custom\\\":{\\\"test\\\":\\\"hi\\\"},\\\"deployment\\\":{\\\"id\\\":\\\"1223\\\"},\\\"decision_optimization\\\":{\\\"input_data\\\":[{\\\"id\\\":\\\"123\\\",\\\"fields\\\":[],\\\"values\\\":[]}],\\\"output_data\\\":[{\\\"id\\\":\\\"123\\\"}]},\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"string\\\",\\\"num_nodes\\\":2},\\\"hybrid_pipeline_hardware_specs\\\":[{\\\"node_runtime_id\\\":\\\"auto_ai.kb\\\",\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"default_py3.6\\\",\\\"num_nodes\\\":2}}]}\"\nresponse = https.request(request)\nputs response.read_body \n \n",
                      "#DO Payload Example \nrequire \"uri\"\nrequire \"net/http\"\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = truerequest = Net::HTTP::Post.new(url)\n\nrequest[\"Authorization\"] = \"Bearer <token>\"request[\"Content-Type\"] = \"application/json\"request[\"Cookie\"] = \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\"request.body = \"{\\\"name\\\":\\\"test-job\\\",\\\"space_id\\\":\\\"dcfb2ae2-1733-11ec-9621-0242ac130002\\\",\\\"deployment\\\":{\\\"id\\\":\\\"e672c9e0-1733-11ec-9621-0242ac130002\\\"},\\\"decision_optimization\\\":{\\\"solve_parameters\\\":{\\\"oaas.logAttachmentName\\\":\\\"log.txt\\\",\\\"oaas.logTailEnabled\\\":\\\"true\\\"},\\\"input_data\\\":[{\\\"id\\\":\\\"data.bin\\\",\\\"content\\\":\\\"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\\\"},{\\\"id\\\":\\\"tuples.csv\\\",\\\"fields\\\":['Name','Value'],\\\"values\\\":[['name1',1],['name2',11934]]}},],\\\"input_data_references\\\":[{\\\"id\\\":\\\"c1.mod\\\",\\\"type\\\":\\\"data_asset\\\",\\\"location\\\":{\\\"href\\\":\\\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\\\"}}],\\\"output_data\\\":[{\\\"id\\\":\\\".*\\\\.*\\\"}]}\"\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{\\\"tags\\\":[\\\"test\\\",\\\"frank\\\"],\\\"space_id\\\":\\\"d814cfc4-fba7-4130-b31a-06151b88ea38\\\",\\\"name\\\":\\\"testdeployment_job_definitiondef\\\",\\\"description\\\":\\\"testtd\\\",\\\"custom\\\":{\\\"test\\\":\\\"hi\\\"},\\\"deployment\\\":{\\\"id\\\":\\\"1223\\\"},\\\"decision_optimization\\\":{\\\"input_data\\\":[{\\\"id\\\":\\\"123\\\",\\\"fields\\\":[],\\\"values\\\":[]}],\\\"output_data\\\":[{\\\"id\\\":\\\"123\\\"}]},\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"string\\\",\\\"num_nodes\\\":2},\\\"hybrid_pipeline_hardware_specs\\\":[{\\\"node_runtime_id\\\":\\\"auto_ai.kb\\\",\\\"hardware_spec\\\":{\\\"id\\\":\\\"{{hardware_spec_id}}\\\",\\\"rev\\\":\\\"12\\\",\\\"name\\\":\\\"default_py3.6\\\",\\\"num_nodes\\\":2}}]}\"\nlet postData = parameters.data(using: .utf8)\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"Bearer <token>\", forHTTPHeaderField: \"Authorization\")request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in   guard let data = data else {    print(String(describing: error))    return  }  print(String(data: data, encoding: .utf8)!)  semaphore.signal()}\n\ntask.resume()\nsemaphore.wait() \n \n",
                      "/* DO Payload Example */ \nimport Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{\\\"name\\\":\\\"test-job\\\",\\\"space_id\\\":\\\"dcfb2ae2-1733-11ec-9621-0242ac130002\\\",\\\"deployment\\\":{\\\"id\\\":\\\"e672c9e0-1733-11ec-9621-0242ac130002\\\"},\\\"decision_optimization\\\":{\\\"solve_parameters\\\":{\\\"oaas.logAttachmentName\\\":\\\"log.txt\\\",\\\"oaas.logTailEnabled\\\":\\\"true\\\"},\\\"input_data\\\":[{\\\"id\\\":\\\"data.bin\\\",\\\"content\\\":\\\"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\\\"},{\\\"id\\\":\\\"tuples.csv\\\",\\\"fields\\\":['Name','Value'],\\\"values\\\":[['name1',1],['name2',11934]]}},],\\\"input_data_references\\\":[{\\\"id\\\":\\\"c1.mod\\\",\\\"type\\\":\\\"data_asset\\\",\\\"location\\\":{\\\"href\\\":\\\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\\\"}}],\\\"output_data\\\":[{\\\"id\\\":\\\".*\\\\.*\\\"}]}\"\nlet postData = parameters.data(using: .utf8)\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2019-10-25\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"Bearer <token>\", forHTTPHeaderField: \"Authorization\")request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in   guard let data = data else {    print(String(describing: error))    return  }  print(String(data: data, encoding: .utf8)!)  semaphore.signal()}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs?version=2020-09-01\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": “{\n    \"tags\": [\n        \"test\",\n        \"frank\"\n    ],\n    \"space_id\": \"{{space_id}}\",\n    \"name\": \"test deployment_job_definition def\",\n    \"description\": \"test td\",\n    \"custom\": {\n        \"test\": \"hi\"\n    },\n    \"deployment\": {\n        \"id\": \"1223\"\n    },\n    \"hardware_spec\": {\n        \"id\": \"{{hardware_spec_id}}\",\n        \"rev\": \"12\",\n        \"name\": \"string\",\n        \"num_nodes\": 2\n    },\n    \"hybrid_pipeline_hardware_specs\": [\n        {\n            \"node_runtime_id\": \"auto_ai.kb\",\n            \"hardware_spec\": {\n                \"id\": \"{{hardware_spec_id}}\",\n                \"rev\": \"12\",\n                \"name\": \"default_py3.6\",\n                \"num_nodes\": 2\n            }\n        }\n    ]\n    }”};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n}); \n \n",
                      "/* DO Payload Example */ \n var settings = {\n   \"name\":\"test-job\",\n   \"space_id\":\"dcfb2ae2-1733-11ec-9621-0242ac130002\",\n   \"deployment\":{\n      \"id\":\"e672c9e0-1733-11ec-9621-0242ac130002\"\n   },\n   \"decision_optimization\":{\n      \"solve_parameters\":{\n         \"oaas.logAttachmentName\":\"log.txt\",\n         \"oaas.logTailEnabled\":\"true\"\n      },\n       \"input_data\":[\n         {\n            \"id\": \"data.bin\",\n            \"content\": \"VGhlIGNvbnRlbnQgb2YgbXkgZGF0YSBmaWxlLgo=\"\n         },\n         {\n            \"id\": \"tuples.csv\",\n            \"fields\": ['Name', 'Value'],\n            \"values\": [   ['name1', 1],\n                          ['name2', 11934]\n            ]}            \n         },\n      ],\n      \"input_data_references\":[\n         {\n            \"id\":\"c1.mod\",\n            \"type\":\"data_asset\",\n            \"location\":{\n               \"href\":\"/v2/assets/ec45babc-1733-11ec-9621-0242ac130002?space_id=dcfb2ae2-1733-11ec-9621-0242ac130002\"\n            }\n         }\n      ],\n      \"output_data\":[\n         {\n            \"id\":\".*\\\\.*\"\n         }\n      ]\n}”};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployment_jobs/{job_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "name": "job_id",
          "description": "The id of the job.\n",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "delete": {
        "operationId": "deployment_jobs_delete",
        "tags": [
          "Deployment Jobs"
        ],
        "summary": "Cancel the deployment job",
        "description": "Cancel the specified deployment job.\n",
        "parameters": [
          {
            "name": "space_id",
            "description": "Cancel the deployment job that belong to this space.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "hard_delete",
            "description": "Set to true in order to also delete the job metadata information.\n",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.\n"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&hard_delete=<boolean>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&hard_delete=<boolean>&version=2020-09-01\").method(\"DELETE\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&hard_delete=<boolean>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=%3Cstring%3E&hard_delete=%3Cboolean%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=%3Cstring%3E&hard_delete=%3Cboolean%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&hard_delete=<boolean>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=%3Cstring%3E&hard_delete=%3Cboolean%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&hard_delete=<boolean>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "deployment_jobs_get",
        "tags": [
          "Deployment Jobs"
        ],
        "summary": "Retrieve the deployment job",
        "description": "Retrieve the deployment job. The predicted data bound to this job_id is going to\nbe kept around for a limited time based on the service configuration.\n",
        "parameters": [
          {
            "name": "space_id",
            "description": "Retrieve the deployment job that belong to this space.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "include",
            "description": "Retrieves only fields from 'decision_optimization' and 'scoring' section mentioned as value(s)\n(comma separated) as output response fields. Retrieves all the fields if not mentioned.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs response.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jobs_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_jobs/:job_id?space_id=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/instances": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "instances_list",
        "tags": [
          "Instances"
        ],
        "summary": "Retrieve the service instances",
        "description": "Retrieve the service instances. Either `space_id` or `project_id` query parameter is mandatory but both can be provided.",
        "parameters": [
          {
            "in": "query",
            "name": "space_id",
            "description": "Return resources pertaining to any space_id listed.  Either `space_id` or `project_id` query parameter is mandatory but both can be provided.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "s1dc4cf1-252f-424b-b52d-5cdd9814987f,s2dc4cf1-252f-424b-b52d-5cdd9814987f"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "project_id",
            "description": "Return resources pertaining to any project_id listed.  Either `space_id` or `project_id` query parameter is mandatory but both can be provided.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "p1dc4cf1-252f-424b-b52d-5cdd9814987f,p2dc4cf1-252f-424b-b52d-5cdd9814987f"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "consumption_details",
            "description": "Only if `consumption_details` is set to `true` each instance `entity.consumption.details` part is available\nin response.\n",
            "example": true,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instance_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/instances?space_id=<string>,<string>&project_id=<string>,<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/instances?space_id=<string>,<string>&project_id=<string>,<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/instances?space_id=%3Cstring%3E,%3Cstring%3E&project_id=%3Cstring%3E,%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/instances?space_id=%3Cstring%3E,%3Cstring%3E&project_id=%3Cstring%3E,%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/instances?space_id=<string>,<string>&project_id=<string>,<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/instances?space_id=%3Cstring%3E,%3Cstring%3E&project_id=%3Cstring%3E,%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/instances?space_id=<string>,<string>&project_id=<string>,<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/instances/{instance_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "name": "instance_id",
          "description": "The instance identifier.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "instances_get",
        "tags": [
          "Instances"
        ],
        "summary": "Retrieve the service instance",
        "description": "Retrieve the service instance details. Instances with `plan.version` set to `2` will have complete data.\nInstances with `plan.version` set to `1` will not have the `consumption` section and one should\nrefer to the v3 API usage section.\n",
        "parameters": [
          {
            "in": "query",
            "name": "space_id",
            "description": "Defines authorization context that allows a space member to perform this operation.\n",
            "schema": {
              "type": "string",
              "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f"
            }
          },
          {
            "in": "query",
            "name": "project_id",
            "description": "Defines authorization context that allows a project member to perform this operation.\n",
            "schema": {
              "type": "string",
              "example": "63dc4cf1-252f-424b-b52d-5cdd9814987f"
            }
          },
          {
            "name": "consumption_details",
            "description": "Only if `consumption_details` is set to `true` the instance `entity.consumption.details` part is available\nin response.\n",
            "example": true,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instance_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/instances/:instance_id?space_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&project_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/instances/:instance_id?space_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&project_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/instances/:instance_id?space_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&project_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/instances/:instance_id?space_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&project_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/instances/:instance_id?space_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&project_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/instances/:instance_id?space_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&project_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/instances/:instance_id?space_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&project_id=63dc4cf1-252f-424b-b52d-5cdd9814987f&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/experiments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "experiments_create",
        "tags": [
          "Experiments"
        ],
        "summary": "Create a new experiment",
        "description": "Create a new experiment with the given payload. An experiment represents an asset that captures a set of `pipeline` or `model definition` assets that will be trained at the same time on the same data set.\n",
        "requestBody": {
          "description": "Payload for creating the experiment. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/experiment_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Experiment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new experiment artifact,\ne.g. `/ml/v4/experiments/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request POST 'https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=2020-09-01' --data-raw '{\n",
                      "    \"name\": \"my-resource\",\n",
                      "    \"project_id\": \"12ac4cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"description\": \"This is my first resource.\",\n",
                      "    \"tags\": [\n",
                      "        \"t1\",\n",
                      "        \"t2\"\n",
                      "    ],\n",
                      "    \"label_column\": \"<string>\",\n",
                      "    \"evaluation_definition\": {\n",
                      "        \"metrics\": [\n",
                      "            {\n",
                      "                \"name\": \"<string>\",\n",
                      "                \"maximize\": \"<boolean>\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"name\": \"<string>\",\n",
                      "                \"maximize\": \"<boolean>\"\n",
                      "            }\n",
                      "        ],\n",
                      "        \"method\": \"binary\"\n",
                      "    },\n",
                      "    \"training_references\": [\n",
                      "        {\n",
                      "            \"pipeline\": {\n",
                      "                \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                \"rev\": \"2\",\n",
                      "                \"model_type\": \"<string>\",\n",
                      "                \"data_bindings\": [\n",
                      "                    {\n",
                      "                        \"data_reference_name\": \"<string>\",\n",
                      "                        \"node_id\": \"<string>\"\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"data_reference_name\": \"<string>\",\n",
                      "                        \"node_id\": \"<string>\"\n",
                      "                    }\n",
                      "                ],\n",
                      "                \"nodes_parameters\": [\n",
                      "                    {\n",
                      "                        \"node_id\": \"<string>\",\n",
                      "                        \"parameters\": \"<object>\"\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"node_id\": \"<string>\",\n",
                      "                        \"parameters\": \"<object>\"\n",
                      "                    }\n",
                      "                ],\n",
                      "                \"hardware_spec\": {\n",
                      "                    \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                    \"rev\": \"2\",\n",
                      "                    \"name\": \"<string>\",\n",
                      "                    \"num_nodes\": \"<integer>\"\n",
                      "                },\n",
                      "                \"hybrid_pipeline_hardware_specs\": [\n",
                      "                    {\n",
                      "                        \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "                        \"hardware_spec\": {\n",
                      "                            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                            \"rev\": \"2\",\n",
                      "                            \"name\": \"<string>\",\n",
                      "                            \"num_nodes\": \"<integer>\"\n",
                      "                        }\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "                        \"hardware_spec\": {\n",
                      "                            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                            \"rev\": \"2\",\n",
                      "                            \"name\": \"<string>\",\n",
                      "                            \"num_nodes\": \"<integer>\"\n",
                      "                        }\n",
                      "                    }\n",
                      "                ]\n",
                      "            },\n",
                      "            \"model_definition\": {\n",
                      "                \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\"\n",
                      "            },\n",
                      "            \"hyper_parameters_optimization\": {\n",
                      "                \"method\": {\n",
                      "                    \"name\": \"random\",\n",
                      "                    \"parameters\": \"<object>\"\n",
                      "                },\n",
                      "                \"hyper_parameters\": [\n",
                      "                    {\n",
                      "                        \"name\": \"learning_rate\",\n",
                      "                        \"items\": [\n",
                      "                            0.005,\n",
                      "                            0.1,\n",
                      "                            0.11\n",
                      "                        ]\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"name\": \"fc\",\n",
                      "                        \"items\": {\n",
                      "                            \"min_value\": 9,\n",
                      "                            \"max_value\": 10,\n",
                      "                            \"power\": 2\n",
                      "                        }\n",
                      "                    }\n",
                      "                ]\n",
                      "            }\n",
                      "        },\n",
                      "        {\n",
                      "            \"pipeline\": {\n",
                      "                \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                \"rev\": \"2\",\n",
                      "                \"model_type\": \"<string>\",\n",
                      "                \"data_bindings\": [\n",
                      "                    {\n",
                      "                        \"data_reference_name\": \"<string>\",\n",
                      "                        \"node_id\": \"<string>\"\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"data_reference_name\": \"<string>\",\n",
                      "                        \"node_id\": \"<string>\"\n",
                      "                    }\n",
                      "                ],\n",
                      "                \"nodes_parameters\": [\n",
                      "                    {\n",
                      "                        \"node_id\": \"<string>\",\n",
                      "                        \"parameters\": \"<object>\"\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"node_id\": \"<string>\",\n",
                      "                        \"parameters\": \"<object>\"\n",
                      "                    }\n",
                      "                ],\n",
                      "                \"hardware_spec\": {\n",
                      "                    \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                    \"rev\": \"2\",\n",
                      "                    \"name\": \"<string>\",\n",
                      "                    \"num_nodes\": \"<integer>\"\n",
                      "                },\n",
                      "                \"hybrid_pipeline_hardware_specs\": [\n",
                      "                    {\n",
                      "                        \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "                        \"hardware_spec\": {\n",
                      "                            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                            \"rev\": \"2\",\n",
                      "                            \"name\": \"<string>\",\n",
                      "                            \"num_nodes\": \"<integer>\"\n",
                      "                        }\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "                        \"hardware_spec\": {\n",
                      "                            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                            \"rev\": \"2\",\n",
                      "                            \"name\": \"<string>\",\n",
                      "                            \"num_nodes\": \"<integer>\"\n",
                      "                        }\n",
                      "                    }\n",
                      "                ]\n",
                      "            },\n",
                      "            \"model_definition\": {\n",
                      "                \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\"\n",
                      "            },\n",
                      "            \"hyper_parameters_optimization\": {\n",
                      "                \"method\": {\n",
                      "                    \"name\": \"random\",\n",
                      "                    \"parameters\": \"<object>\"\n",
                      "                },\n",
                      "                \"hyper_parameters\": [\n",
                      "                    {\n",
                      "                        \"name\": \"learning_rate\",\n",
                      "                        \"items\": [\n",
                      "                            0.005,\n",
                      "                            0.1,\n",
                      "                            0.11\n",
                      "                        ]\n",
                      "                    },\n",
                      "                    {\n",
                      "                        \"name\": \"fc\",\n",
                      "                        \"items\": {\n",
                      "                            \"min_value\": 9,\n",
                      "                            \"max_value\": 10,\n",
                      "                            \"power\": 2\n",
                      "                        }\n",
                      "                    }\n",
                      "                ]\n",
                      "            }\n",
                      "        }\n",
                      "    ],\n",
                      "    \"custom\": \"<object>\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\"], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\"}, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\"} ], \\\"method\\\": \\\"binary\\\"}, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"}, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"} ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"} ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\"}, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\"}, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"}, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"} ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"} ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\"}, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\"}, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=2020-09-01\"\n\npayload = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" }, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" } ], \\\"method\\\": \\\"binary\\\" }, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" }, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" } ], \\\"method\\\": \\\"binary\\\" }, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" }, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" } ], \\\"method\\\": \\\"binary\\\" }, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" }, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" } ], \\\"method\\\": \\\"binary\\\" }, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" }, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" } ], \\\"method\\\": \\\"binary\\\" }, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" }, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\" } ], \\\"method\\\": \\\"binary\\\" }, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\" }, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "experiments_list",
        "tags": [
          "Experiments"
        ],
        "summary": "Retrieve the experiments",
        "description": "Retrieve the experiments for the specified space or project.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/experiments?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/experiments/{experiment_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_experiment_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "experiments_get",
        "tags": [
          "Experiments"
        ],
        "summary": "Retrieve the experiment",
        "description": "Retrieve the experiment with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\"], \\\"label_column\\\": \\\"<string>\\\", \\\"evaluation_definition\\\": { \\\"metrics\\\": [ { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\"}, { \\\"name\\\": \\\"<string>\\\", \\\"maximize\\\": \\\"<boolean>\\\"} ], \\\"method\\\": \\\"binary\\\"}, \\\"training_references\\\": [ { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"}, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"} ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"} ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\"}, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\"}, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } }, { \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"}, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"} ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"} ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\"}, \\\"hyper_parameters_optimization\\\": { \\\"method\\\": { \\\"name\\\": \\\"random\\\", \\\"parameters\\\": \\\"<object>\\\"}, \\\"hyper_parameters\\\": [ { \\\"name\\\": \\\"learning_rate\\\", \\\"items\\\": [ 0.005, 0.1, 0.11 ] }, { \\\"name\\\": \\\"fc\\\", \\\"items\\\": { \\\"min_value\\\": 9, \\\"max_value\\\": 10, \\\"power\\\": 2 } } ] } } ], \\\"custom\\\": \\\"<object>\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "experiments_update",
        "tags": [
          "Experiments"
        ],
        "summary": "Update the experiment",
        "description": "Update the experiment with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "common_patch_request_helper",
        "responses": {
          "200": {
            "description": "Experiment has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}   ]\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PATCH\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "experiments_delete",
        "tags": [
          "Experiments"
        ],
        "summary": "Delete the experiment",
        "description": "Delete the experiment with the specified identifier. This will delete all revisions of\nthis experiment as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Experiment deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/experiments/{experiment_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_experiment_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "experiments_create_revision",
        "tags": [
          "Experiments"
        ],
        "summary": "Create a new experiment revision",
        "description": "Create a new experiment revision.\nThe current metadata and content for\nexperiment_id will be taken and a new revision created.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/experiment_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Experiment revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (experiment artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request POST 'https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"commit_message\": \"Updated for TF 2.0\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "experiments_list_revisions",
        "tags": [
          "Experiments"
        ],
        "summary": "Retrieve the experiment revisions",
        "description": "Retrieve the experiment revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/experiment_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl --location --request GET 'https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/experiments/:experiment_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/functions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "functions_create",
        "tags": [
          "Functions"
        ],
        "summary": "Create a new function",
        "description": "Create a new function with the given payload. A function is some code that can be deployed as an online, or batch deployment.\n",
        "requestBody": {
          "description": "Payload for creating the function. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/function_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Function created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new function artifact,\ne.g. `/ml/v4/functions/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=2020-09-01' --data-raw '{\n",
                      "   \"name\": \"my-resource\",\n",
                      "    \"project_id\": \"12ac4cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"description\": \"This is my first resource.\",\n",
                      "    \"tags\": [\n",
                      "        \"t1\",\n",
                      "        \"t2\"\n",
                      "    ],\n",
                      "    \"software_spec\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\",\n",
                      "        \"name\": \"...\"\n",
                      "    },\n",
                      "    \"type\": \"python\",\n",
                      "    \"sample_scoring_input\": {\n",
                      "        \"input_data\": [\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\",\n",
                      "                    \"age\",\n",
                      "                    \"occupation\"\n",
                      "                  {\n",
                      "                ],\n",
                      "                \"values\": [\n",
                      "                    [\n",
                      "                        \"<object>\",\n",
                      "                        \"<object>\"\n",
                      "                    ],\n",
                      "                    [\n",
                      "                        \"<object>\",\n",
                      "                        \"<object>\"\n",
                      "                    ]\n",
                      "                ]\n",
                      "            },\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\",\n",
                      "                    \"age\",\n",
                      "                    \"occupation\"\n",
                      "                  {\n",
                      "                ],\n",
                      "                \"values\": [\n",
                      "                    [\n",
                      "                        \"<object>\",\n",
                      "                        \"<object>\"\n",
                      "                    ],\n",
                      "                    [\n",
                      "                        \"<object>\",\n",
                      "                        \"<object>\"\n",
                      "                    ]\n",
                      "                ]\n",
                      "            }\n",
                      "        ]\n",
                      "    },\n",
                      "    \"schemas\": {\n",
                      "        \"input\": [\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        ],\n",
                      "        \"output\": [\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        ]\n",
                      "    },\n",
                      "    \"custom\": \"<object>\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\"], \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\"}, \\\"type\\\": \\\"python\\\", \\\"sample_scoring_input\\\": { \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\"], [ \\\"<object>\\\", \\\"<object>\\\"] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\"], [ \\\"<object>\\\", \\\"<object>\\\"] ] } ] }, \\\"schemas\\\": { \\\"input\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"}, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"} ], \\\"output\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [{\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"}, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"} ] }, \\\"custom\\\": \\\"<object>\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=2020-09-01\"\n\npayload = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"type\\\": \\\"python\\\", \\\"sample_scoring_input\\\": { \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [{\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ] }, \\\"schemas\\\": { \\\"input\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ], \\\"output\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ] }, \\\"custom\\\": \\\"<object>\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"type\\\": \\\"python\\\", \\\"sample_scoring_input\\\": { \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [{\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ] }, \\\"schemas\\\": { \\\"input\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ], \\\"output\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ] }, \\\"custom\\\": \\\"<object>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"type\\\": \\\"python\\\", \\\"sample_scoring_input\\\": { \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ] }, \\\"schemas\\\": { \\\"input\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ], \\\"output\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ] }, \\\"custom\\\": \\\"<object>\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"type\\\": \\\"python\\\", \\\"sample_scoring_input\\\": { \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ] }, \\\"schemas\\\": { \\\"input\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ], \\\"output\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ] }, \\\"custom\\\": \\\"<object>\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"type\\\": \\\"python\\\", \\\"sample_scoring_input\\\": { \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ] }, \\\"schemas\\\": { \\\"input\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ], \\\"output\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ] }, \\\"custom\\\": \\\"<object>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"type\\\": \\\"python\\\", \\\"sample_scoring_input\\\": { \\\"input_data\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"values\\\": [ [ \\\"<object>\\\", \\\"<object>\\\" ], [ \\\"<object>\\\", \\\"<object>\\\" ] ] } ] }, \\\"schemas\\\": { \\\"input\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ], \\\"output\\\": [ { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" }, { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } ] }, \\\"custom\\\": \\\"<object>\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "functions_list",
        "tags": [
          "Functions"
        ],
        "summary": "Retrieve the functions",
        "description": "Retrieve the functions for the specified space or project.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/functions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/functions/{function_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_function_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "functions_get",
        "tags": [
          "Functions"
        ],
        "summary": "Retrieve the function",
        "description": "Retrieve the function with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "functions_update",
        "tags": [
          "Functions"
        ],
        "summary": "Update the function",
        "description": "Update the function with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "common_patch_request_helper",
        "responses": {
          "200": {
            "description": "Function has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}   ]\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PATCH\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "functions_delete",
        "tags": [
          "Functions"
        ],
        "summary": "Delete the function",
        "description": "Delete the function with the specified identifier. This will delete all revisions of\nthis function as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Function deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/functions/{function_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_function_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "functions_create_revision",
        "tags": [
          "Functions"
        ],
        "summary": "Create a new function revision",
        "description": "Create a new function revision.\nThe current metadata and content for\nfunction_id will be taken and a new revision created.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/function_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Function revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (function artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"commit_message\": \"Updated for TF 2.0\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "{\"trace\": \"w7vrpmm9479z2o0hxhex0ttgat4qv9ev\",\"errors\": [{\"code\": \"missing_field\",\"message\": \"The 'first_name' field is required.\",\"more_info\": \"https://docs.api.bluemix.net/ml/v4/users/create_user#first_name\"},{\"code\": \"missing_field\",\"message\": \"The 'first_name' field is required.\",\"more_info\": \"https://docs.api.bluemix.net/ml/v4/users/create_user#first_name\"}]   }   "
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "functions_list_revisions",
        "tags": [
          "Functions"
        ],
        "summary": "Retrieve the function revisions",
        "description": "Retrieve the function revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Function revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/function_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/functions/{function_id}/code": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_function_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "put": {
        "operationId": "functions_upload_code",
        "tags": [
          "Functions"
        ],
        "summary": "Upload the function code",
        "description": "Upload the function code. Functions expect a zip file that contains a python file     that make up the function. Python functions specify what needs to be run when     the function is deployed and what needs to be run when the scoring function is     called. In other words, you are able to customize what preparation WML does in     the environment when you deploy the function, as well as what steps WML takes to     generate the output when you call the API later on. The function consists of the     outer function (any place that is not within the score function) and the inner     score function. The code that sits in the outer function runs when the function     is deployed, and the environment is then frozen and ready to be used whenever     the online scoring or batch inline job processing API is called. The code that     sits in the inner score function runs when the online scoring or batch inline     job processing API is called, in the environment customized by the outer function.     See [Deploying Python function](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/ml-deploy-py-function.html?context=cpdaas${content_description}audience=wdp) for more details.         This is illustrated in the example below:        <pre> <br />     ...python code used to set up the environment... <br />     <br />     def score(payload): <br />         df_payload = pd.DataFrame(payload[values]) <br />         df_payload.columns = payload[fields] <br />         ... <br />         output = {result : res} <br />         return output <br />     <br />     return score <br />     </pre>\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FunctionBody"
        },
        "responses": {
          "201": {
            "description": "Function code uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_metadata"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new function attachment,\ne.g. `/ml/v4/functions/459afef1-252f-424b-b52d-5cdd98128fa3/code?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "upload-code",
        "x-cli-generate-adapter-method": true,
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT 'https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PUT\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PUT\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PUT\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Put.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PUT\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PUT\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "functions_download_code",
        "tags": [
          "Functions"
        ],
        "summary": "Download the function code",
        "description": "Download the function code.\nIt is possible to get the `code` for a given\nrevision of the `function`.\nFunctions expect a zip file that contains a python file     that make up the function. Python functions specify what needs to be run when     the function is deployed and what needs to be run when the scoring function is     called. In other words, you are able to customize what preparation WML does in     the environment when you deploy the function, as well as what steps WML takes to     generate the output when you call the API later on. The function consists of the     outer function (any place that is not within the score function) and the inner     score function. The code that sits in the outer function runs when the function     is deployed, and the environment is then frozen and ready to be used whenever     the online scoring or batch inline job processing API is called. The code that     sits in the inner score function runs when the online scoring or batch inline     job processing API is called, in the environment customized by the outer function.     See [Deploying Python function](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/ml-deploy-py-function.html?context=cpdaas${content_description}audience=wdp) for more details.         This is illustrated in the example below:        <pre> <br />     ...python code used to set up the environment... <br />     <br />     def score(payload): <br />         df_payload = pd.DataFrame(payload[values]) <br />         df_payload.columns = payload[fields] <br />         ... <br />         output = {result : res} <br />         return output <br />     <br />     return score <br />     </pre>\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApplicationZip"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-cli-generate-adapter-method": true,
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/functions/:function_id/code?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/pipelines": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "pipelines_create",
        "tags": [
          "Pipelines"
        ],
        "summary": "Create a new pipeline",
        "description": "Create a new pipeline with the given payload. A pipeline represents a hybrid-pipeline, as a JSON document, that is used to train one or more models.\n",
        "requestBody": {
          "description": "Payload for creating the pipeline. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pipeline_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Pipeline created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new pipeline artifact,\ne.g. `/ml/v4/pipelines/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=2020-09-01' --data-raw '{\n",
                      "    \"name\": \"my-resource\",\n",
                      "    \"project_id\": \"12ac4cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"description\": \"This is my first resource.\",\n",
                      "    \"tags\": [\n",
                      "        \"t1\",\n",
                      "        \"t2\"\n",
                      "    ],\n",
                      "    \"document\": \"<object>\",\n",
                      "    \"custom\": \"<object>\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\"], \\\"document\\\": \\\"<object>\\\", \\\"custom\\\": \\\"<object>\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=2020-09-01\"\n\npayload = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"document\\\": \\\"<object>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"document\\\": \\\"<object>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"document\\\": \\\"<object>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"document\\\": \\\"<object>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"document\\\": \\\"<object>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"document\\\": \\\"<object>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "pipelines_list",
        "tags": [
          "Pipelines"
        ],
        "summary": "Retrieve the pipelines",
        "description": "Retrieve the pipelines for the specified space or project.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/pipelines/{pipeline_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_pipeline_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "pipelines_get",
        "tags": [
          "Pipelines"
        ],
        "summary": "Retrieve the pipeline",
        "description": "Retrieve the pipeline with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;",
                      "CURLcode res;",
                      "curl = curl_easy_init();",
                      "if(curl) {",
                      "  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");",
                      "  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines?space_id=d814cfc4-fba7-4130-b31a-06151b88ea38&version=2019-10-25&limit=1\");",
                      "  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);",
                      "  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");",
                      "  struct curl_slist *headers = NULL;",
                      "  headers = curl_slist_append(headers, \"Authorization: Bearer <token>\");",
                      "  headers = curl_slist_append(headers, \"Cookie: __cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\");",
                      "  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);",
                      "  res = curl_easy_perform(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "pipelines_update",
        "tags": [
          "Pipelines"
        ],
        "summary": "Update the pipeline",
        "description": "Update the pipeline with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "common_patch_request_helper",
        "responses": {
          "200": {
            "description": "Pipeline has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}   ]\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PATCH\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&software_spec=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "pipelines_delete",
        "tags": [
          "Pipelines"
        ],
        "summary": "Delete the pipeline",
        "description": "Delete the pipeline with the specified identifier. This will delete all revisions of\nthis pipeline as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Pipeline deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/pipelines/{pipeline_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_pipeline_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "pipelines_create_revision",
        "tags": [
          "Pipelines"
        ],
        "summary": "Create a new pipeline revision",
        "description": "Create a new pipeline revision.\nThe current metadata and content for\npipeline_id will be taken and a new revision created.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pipeline_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Pipeline revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (pipeline artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"commit_message\": \"Updated for TF 2.0\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "pipelines_list_revisions",
        "tags": [
          "Pipelines"
        ],
        "summary": "Retrieve the pipeline revisions",
        "description": "Retrieve the pipeline revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pipeline_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/pipelines/:pipeline_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/models": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "models_create",
        "tags": [
          "Models"
        ],
        "summary": "Create a new model",
        "description": "Create a new model with the given payload. A model represents a machine learning model asset.\nIf a `202` status is returned then the model will be ready when the\n`content_import_state` in the model\nstatus (/ml/v4/models/{model_id}) is `completed`.\nIf `content_import_state` is not used then a `201` status is returned.\n",
        "x-cli-generate-async-handler": true,
        "requestBody": {
          "description": "Payload for creating the model. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/model_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Model created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new model artifact,\ne.g. `/ml/v4/models/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "Model accepted, this is returned in the case that `content_location` was provided\nin the request entity and so the model was created but the attachments are still being uploaded.\nIn this case the model will not be ready until the `content_import_state` in the model\nstatus (/ml/v4/models/{model_id}) is `completed`.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/models?version=2020-09-01' --data-raw '{\n",
                      "    \"name\": \"my-resource\",\n",
                      "    \"project_id\": \"12ac4cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"description\": \"This is my first resource.\",\n",
                      "    \"tags\": [\n",
                      "        \"t1\",\n",
                      "        \"t2\"\n",
                      "    ],\n",
                      "    \"type\": \"tensorflow_1.5\",\n",
                      "    \"software_spec\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\",\n",
                      "        \"name\": \"...\"\n",
                      "    },\n",
                      "    \"pipeline\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\"\n",
                      "    },\n",
                      "    \"model_definition\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\"\n",
                      "    },\n",
                      "    \"hyper_parameters\": \"<object>\",\n",
                      "    \"domain\": \"<string>\",\n",
                      "    \"training_data_references\": [\n",
                      "        {\n",
                      "            \"type\": \"<string>\",\n",
                      "            \"id\": \"<string>\",\n",
                      "            \"connection\": \"<object>\",\n",
                      "            \"location\": \"<object>\",\n",
                      "            \"schema\": {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        },\n",
                      "        {\n",
                      "            \"type\": \"<string>\",\n",
                      "            \"id\": \"<string>\",\n",
                      "            \"connection\": \"<object>\",\n",
                      "            \"location\": \"<object>\",\n",
                      "            \"schema\": {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        }\n",
                      "    ],\n",
                      "    \"schemas\": {\n",
                      "        \"input\": [\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        ],\n",
                      "        \"output\": [\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        ]\n",
                      "    },\n",
                      "    \"label_column\": \"<string>\",\n",
                      "    \"transformed_label_column\": \"<string>\",\n",
                      "    \"size\": {\n",
                      "        \"in_memory\": \"<number>\",\n",
                      "        \"content\": \"<number>\"\n",
                      "    },\n",
                      "    \"metrics\": [\n",
                      "        {\n",
                      "            \"timestamp\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            },\n",
                      "            \"iteration\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            },\n",
                      "            \"ml_metrics\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            },\n",
                      "            \"context\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            }\n",
                      "        },\n",
                      "        {\n",
                      "            \"timestamp\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            },\n",
                      "            \"iteration\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            },\n",
                      "            \"ml_metrics\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            },\n",
                      "            \"context\": {\n",
                      "                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "            }\n",
                      "        }\n",
                      "    ],\n",
                      "    \"custom\": \"<object>\",\n",
                      "    \"content_location\": {\n",
                      "        \"type\": \"s3\",\n",
                      "        \"contents\": [\n",
                      "            {\n",
                      "                \"content_format\": \"pipeline-node\",\n",
                      "                \"file_name\": \"P1_automl.zip\",\n",
                      "                \"location\": \"fd45606f-8098-459c-8961-32b136123fgc/assets/fd45606f-8098-459c-8961-32b136123fgc_P1_fold_output/resources/wml_model/P1_automl.zip\",\n",
                      "                \"pipeline_node_id\": \"automl\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"content_format\": \"pipeline-node\",\n",
                      "                \"file_name\": \"P1_automl.zip\",\n",
                      "                \"location\": \"fd45606f-8098-459c-8961-32b136123fgc/assets/fd45606f-8098-459c-8961-32b136123fgc_P1_fold_output/resources/wml_model/P1_automl.zip\",\n",
                      "                \"pipeline_node_id\": \"automl\"\n",
                      "            }\n",
                      "        ],\n",
                      "        \"connection\": \"<object>\",\n",
                      "        \"location\": \"<object>\"\n",
                      "    }\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"name\\\": \\\"testModel\\\", \\\"space_id\\\": \\\"{{space_id}}\\\", \\\"software_spec\\\": { \\\"name\\\": \\\"default_py3.6\\\" }, \\\"type\\\": \\\"mllib_2.4\\\", \\\"tags\\\": [\\\"julian\\\", \\\"frank\\\"], \\\"training_data_references\\\": [ { \\\"type\\\": \\\"data_asset\\\", \\\"connection\\\": {}, \\\"location\\\": { \\\"bucket\\\": \\\"do-wml\\\", \\\"path\\\": \\\"test/customers.csv\\\" } } ], \\\"schemas\\\": { \\\"input\\\": [ { \\\"fields\\\": [ { \\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\" } ], \\\"id\\\": \\\"t1\\\", \\\"name\\\": \\\"Tasks\\\" } ], \\\"output\\\": [ { \\\"fields\\\": [ { \\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\" } ], \\\"id\\\": \\\"t1\\\", \\\"name\\\": \\\"Tasks\\\" } ] }}\");\n",
                      "Request request = new Request.Builder().url(\"{{dev_server}}/ml/v4/models?version=2019-10-25\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests",
                      "\n",
                      "url = \"https://us-south.ml.cloud.ibm.com/ml/v4/models?version=2019-10-25\"",
                      "\n",
                      "payload = \"{ \"name\": \"testModel\", \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"software_spec\": { \"name\": \"default_py3.6\" }, \"type\": \"mllib_2.4\", \"tags\": [\"julian\", \"frank\"], \"training_data_references\": [ { \"type\": \"data_asset\", \"connection\": {}, \"location\": { \"bucket\": \"do-wml\", \"path\": \"test/customers.csv\" } } ], \"schemas\": { \"input\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ], \"output\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ] }\n}\"\n",
                      "headers = {\n",
                      "  'Authorization': 'Bearer <token>',\n",
                      "  'Content-Type': 'application/json',\n",
                      "  'Cookie': '__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841'\n",
                      "}\n",
                      "\n",
                      "response = requests.request(\"POST\", url, headers=headers, data = payload)\n",
                      "\n",
                      "print(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\n",
                      "CURLcode res;\n",
                      "curl = curl_easy_init();\n",
                      "if(curl) {\n",
                      "curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n",
                      "curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models?version=2019-10-25\");\n",
                      "curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n",
                      "curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n",
                      "struct curl_slist *headers = NULL;\n",
                      "headers = curl_slist_append(headers, \"Authorization: Bearer <token>\");\n",
                      "headers = curl_slist_append(headers, \"Content-Type: application/json\");\n",
                      "headers = curl_slist_append(headers, \"Cookie: __cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\");\n",
                      "curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n",
                      "const char *data = \"{ \"name\": \"testModel\", \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"software_spec\": { \"name\": \"default_py3.6\" }, \"type\": \"mllib_2.4\", \"tags\": [\"julian\", \"frank\"], \"training_data_references\": [ { \"type\": \"data_asset\", \"connection\": {}, \"location\": { \"bucket\": \"do-wml\", \"path\": \"test/customers.csv\" } } ], \"schemas\": { \"input\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ], \"output\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ] }\n}\";\n",
                      "curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n",
                      "res = curl_easy_perform(curl);\n",
                      "}",
                      "curl_easy_cleanup(curl);\n"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main",
                      "",
                      "import (",
                      " \"fmt\"",
                      " \"strings\"",
                      " \"net/http\"",
                      " \"io/ioutil\"",
                      ")",
                      "",
                      "func main() {",
                      "",
                      " url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models?version=2019-10-25\"",
                      " method := \"POST\"",
                      "",
                      " payload := strings.NewReader(\"{ \"name\": \"testModel\", \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"software_spec\": { \"name\": \"default_py3.6\" }, \"type\": \"mllib_2.4\", \"tags\": [\"julian\", \"frank\"], \"training_data_references\": [ { \"type\": \"data_asset\", \"connection\": {}, \"location\": { \"bucket\": \"do-wml\", \"path\": \"test/customers.csv\" } } ], \"schemas\": { \"input\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ], \"output\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ] }\n}\")",
                      "",
                      " client := &http.Client {",
                      " }",
                      " req, err := http.NewRequest(method, url, payload)",
                      "",
                      " if err != nil {",
                      "  fmt.Println(err)",
                      " }",
                      " req.Header.Add(\"Authorization\", \"Bearer <token>\")",
                      " req.Header.Add(\"Content-Type\", \"application/json\")",
                      " req.Header.Add(\"Cookie\", \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\")",
                      "",
                      " res, err := client.Do(req)",
                      " defer res.Body.Close()",
                      " body, err := ioutil.ReadAll(res.Body)",
                      "",
                      " fmt.Println(string(body))",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\n",
                      "require \"net/http\"\n",
                      "",
                      "url = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models?version=2019-10-25\")\n",
                      "",
                      "https = Net::HTTP.new(url.host, url.port);\n",
                      "https.use_ssl = true\n",
                      "",
                      "request = Net::HTTP::Post.new(url)\n",
                      "request[\"Authorization\"] = \"Bearer <token>\"\n",
                      "request[\"Content-Type\"] = \"application/json\"\n",
                      "request[\"Cookie\"] = \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\"\n",
                      "request.body = \"{ \"name\": \"testModel\", \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"software_spec\": { \"name\": \"default_py3.6\" }, \"type\": \"mllib_2.4\", \"tags\": [\"julian\", \"frank\"], \"training_data_references\": [ { \"type\": \"data_asset\", \"connection\": {}, \"location\": { \"bucket\": \"do-wml\", \"path\": \"test/customers.csv\" } } ], \"schemas\": { \"input\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ], \"output\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ] }\n}\"\n",
                      "",
                      "response = https.request(request)\n",
                      "puts response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n",
                      "",
                      "var semaphore = DispatchSemaphore (value: 0)\n",
                      "",
                      "let parameters = \"{ \"name\": \"testModel\", \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"software_spec\": { \"name\": \"default_py3.6\" }, \"type\": \"mllib_2.4\", \"tags\": [\"julian\", \"frank\"], \"training_data_references\": [ { \"type\": \"data_asset\", \"connection\": {}, \"location\": { \"bucket\": \"do-wml\", \"path\": \"test/customers.csv\" } } ], \"schemas\": { \"input\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ], \"output\": [ { \"fields\": [ { \"name\": \"duration\", \"type\": \"number\" } ], \"id\": \"t1\", \"name\": \"Tasks\" } ] }\n}\"\n",
                      "let postData = parameters.data(using: .utf8)",
                      "",
                      "var request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models?version=2019-10-25\")!,timeoutInterval: Double.infinity)\n",
                      "request.addValue(\"Bearer <token>\", forHTTPHeaderField: \"Authorization\")\n",
                      "request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n",
                      "request.addValue(\"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\", forHTTPHeaderField: \"Cookie\")\n",
                      "",
                      "request.httpMethod = \"POST\"\n",
                      "request.httpBody = postData\n",
                      "",
                      "let task = URLSession.shared.dataTask(with: request) { data, response, error in \n",
                      "guard let data = data else {\n",
                      "    print(String(describing: error))\n",
                      "    return\n",
                      "  }\n",
                      "  print(String(data: data, encoding: .utf8)!)\n",
                      "  semaphore.signal()\n",
                      "}\n",
                      "",
                      "task.resume()\n",
                      "semaphore.wait()\n"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "\"var settings = {\n",
                      "  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models?version=2019-10-25\",\n",
                      "  \"method\": \"POST\",\n",
                      "  \"timeout\": 0,\n",
                      "  \"data\": \"{\n",
                      "    \\\"name\\\": \\\"testModel\\\",\n",
                      "    \\\"space_id\\\": \\\"{{space_id}}\\\",\n",
                      "    \\\"software_spec\\\": {\n",
                      "    \\\"name\\\": \\\"default_py3.6\\\"\n",
                      "  },\n",
                      "  \\\"type\\\": \\\"mllib_2.4\\\",\n",
                      "  \\\"tags\\\": [\n",
                      "    \\\"julian\\\",\n",
                      "    \\\"frank\\\"\n",
                      "  ],\n",
                      "  \\\"training_data_references\\\": [\n",
                      "    {\n",
                      "      \\\"type\\\": \\\"data_asset\\\",\n",
                      "      \\\"connection\\\": {},\n",
                      "      \\\"location\\\": {\n",
                      "        \\\"bucket\\\": \\\"do-wml\\\",\n",
                      "        \\\"path\\\": \\\"test/customers.csv\\\"\n",
                      "      }\n",
                      "    }\n",
                      "  ],\n",
                      "  \\\"schemas\\\": {\n",
                      "  \\\"input\\\": [\n",
                      "  { \n",
                      "    \\\"fields\\\": [\n",
                      "      { \n",
                      "        \\\"name\\\": \\\"duration\\\",\n",
                      "        \\\"type\\\": \\\"number\\\"\n",
                      "      }\n",
                      "    ],\n",
                      "    \\\"id\\\": \\\"t1\\\",\n",
                      "    \\\"name\\\": \\\"Tasks\\\"\n",
                      "  }\n",
                      "  ],\n",
                      "  \\\"output\\\": [\n",
                      "  {\n",
                      "    \\\"fields\\\": [ \n",
                      "      { \n",
                      "        \\\"name\\\": \\\"duration\\\",\n",
                      "        \\\"type\\\": \\\"number\\\"\n",
                      "      }\n",
                      "    ],\n",
                      "    \\\"id\\\": \\\"t1\\\",\n",
                      "    \\\"name\\\": \\\"Tasks\\\"\n",
                      "  }\n",
                      "  ]\n",
                      "}\n",
                      "}\"};\n",
                      "$.ajax(settings).done(function (response) {\n  console.log(response);\n});\""
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "models_list",
        "tags": [
          "Models"
        ],
        "summary": "Retrieve the models",
        "description": "Retrieve the models for the specified space or project.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&software_spec=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&software_spec=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&software_spec=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&software_spec=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&software_spec=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&software_spec=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&software_spec=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/models/{model_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "models_get",
        "tags": [
          "Models"
        ],
        "summary": "Retrieve the model",
        "description": "Retrieve the model with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "models_update",
        "tags": [
          "Models"
        ],
        "summary": "Update the model",
        "description": "Update the model with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n- `/software_spec` (operation 'replace' only)\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "common_patch_request_helper",
        "responses": {
          "200": {
            "description": "Model has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}   ]\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PATCH\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "models_delete",
        "tags": [
          "Models"
        ],
        "summary": "Delete the model",
        "description": "Delete the model with the specified identifier. This will delete all revisions of\nthis model as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Model deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/models/{model_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "models_create_revision",
        "tags": [
          "Models"
        ],
        "summary": "Create a new model revision",
        "description": "Create a new model revision.\nThe current metadata and content for\nmodel_id will be taken and a new revision created.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/model_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Model revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (model artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"commit_message\": \"Updated for TF 2.0\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "models_list_revisions",
        "tags": [
          "Models"
        ],
        "summary": "Retrieve the model revisions",
        "description": "Retrieve the model revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Model revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/models/{model_id}/content": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "models_list_attachments",
        "tags": [
          "Models"
        ],
        "summary": "Retrieve the model content metadata list",
        "description": "Retrieve the content metadata list for the specified model attachments.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          },
          {
            "name": "name",
            "description": "List only attachments with the given name.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "my_model"
          },
          {
            "$ref": "#/components/parameters/content_format"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/all_content_metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=<string>&project_id=<string>&rev=<string>&name=<string>&content_format=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=<string>&project_id=<string>&rev=<string>&name=<string>&content_format=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=<string>&project_id=<string>&rev=<string>&name=<string>&content_format=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&name=%3Cstring%3E&content_format=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&name=%3Cstring%3E&content_format=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=<string>&project_id=<string>&rev=<string>&name=<string>&content_format=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&name=%3Cstring%3E&content_format=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?space_id=<string>&project_id=<string>&rev=<string>&name=<string>&content_format=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "put": {
        "operationId": "models_upload_content",
        "tags": [
          "Models"
        ],
        "summary": "Upload the model content",
        "description": "Upload the content for the specified model.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/content_format_mandatory"
          },
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/pipeline_node_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          },
          {
            "name": "name",
            "description": "Provide the name of the attachment.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "my_models"
          }
        ],
        "requestBody": {
          "description": "models file",
          "content": {
            "application/zip": {
              "schema": {
                "$ref": "#/components/schemas/content_zip"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/content_json"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/content_text"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/content_xml"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Model content uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_metadata"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new model attachment,\nfor example `/ml/v4/models/459afef1-252f-424b-b52d-5cdd98128fa3/content/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "upload-content",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?content_format=<string>&space_id=<string>&project_id=<string>&pipeline_node_id=<string>&name=<string>&version=2020-09-01' --data-raw '\"<object>\"'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?content_format=<string>&space_id=<string>&project_id=<string>&pipeline_node_id=<string>&name=<string>&version=2020-09-01\"\n\npayload = \"\\\"<object>\\\"\nheaders= {}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PUT\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?content_format=%3Cstring%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E&pipeline_node_id=%3Cstring%3E&name=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"\\\"<object>\\\"\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?content_format=%3Cstring%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E&pipeline_node_id=%3Cstring%3E&name=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PUT\"\n\n  payload := strings.NewReader(\"\\\"<object>\\\"\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?content_format=<string>&space_id=<string>&project_id=<string>&pipeline_node_id=<string>&name=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Put.new(url)\nrequest.body = \"\\\"<object>\\\"\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"\\\"<object>\\\"\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?content_format=%3Cstring%3E&space_id=%3Cstring%3E&project_id=%3Cstring%3E&pipeline_node_id=%3Cstring%3E&name=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PUT\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content?content_format=<string>&space_id=<string>&project_id=<string>&pipeline_node_id=<string>&name=<string>&version=<date>\",\n  \"method\": \"PUT\",\n  \"timeout\": 0,\n  \"data\": \"\\\"<object>\\\"\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/models/{model_id}/content/{attachment_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_id"
        },
        {
          "$ref": "#/components/parameters/path_attachment_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "models_download_content",
        "tags": [
          "Models"
        ],
        "summary": "Download the model content",
        "description": "Download the model content.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "Downloaded",
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/content_zip"
                }
              },
              "application/gzip": {
                "schema": {
                  "$ref": "#/components/schemas/content_gzip"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_json"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/content_text"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/content_xml"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-cli-generate-adapter-method": true,
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "models_delete_content",
        "tags": [
          "Models"
        ],
        "summary": "Delete the model content",
        "description": "Delete the content for the specified model.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Model content deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/content/:attachment_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/models/{model_id}/download": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "models_filtered_download",
        "tags": [
          "Models"
        ],
        "summary": "Download the model content that matches a certain criteria",
        "description": "Download the model content identified by the provided criteria.\nIf more than one attachment is found for the given filter then a\n`400` error is returned. If there are no attachments that match the\nfilter then a `404` error is returned. If there are no filters then,\nif there is a single attachment, the attachment content will\nbe returned otherwise a `400` or `404` error will be returned as\ndescribed above.\nThis method is just a shortcut for getting the attachment metadata\nand then downloading by attachment id.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          },
          {
            "$ref": "#/components/parameters/pipeline_node_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          },
          {
            "name": "name",
            "description": "Match an attachment with this name.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "my_model"
          },
          {
            "$ref": "#/components/parameters/content_format"
          }
        ],
        "responses": {
          "200": {
            "description": "Downloaded",
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/content_zip"
                }
              },
              "application/gzip": {
                "schema": {
                  "$ref": "#/components/schemas/content_gzip"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_json"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/content_text"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/content_xml"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/download?space_id=<string>&project_id=<string>&rev=<string>&pipeline_node_id=<string>&name=<string>&content_format=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/download?space_id=<string>&project_id=<string>&rev=<string>&pipeline_node_id=<string>&name=<string>&content_format=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/download?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&pipeline_node_id=%3Cstring%3E&name=%3Cstring%3E&content_format=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/download?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&pipeline_node_id=%3Cstring%3E&name=%3Cstring%3E&content_format=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/download?space_id=<string>&project_id=<string>&rev=<string>&pipeline_node_id=<string>&name=<string>&content_format=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/download?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&pipeline_node_id=%3Cstring%3E&name=%3Cstring%3E&content_format=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/models/:model_id/download?space_id=<string>&project_id=<string>&rev=<string>&pipeline_node_id=<string>&name=<string>&content_format=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/model_definitions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "model_definitions_create",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Create a new model definition",
        "description": "Create a new model definition with the given payload. A model definition represents the code that is used to train one or more models.\n",
        "requestBody": {
          "description": "Payload for creating the model definition. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/model_definition_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Model definition created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_definition_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new model definition artifact,\ne.g. `/ml/v4/model_definitions/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-cli-generate-adapter-method": true,
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=2020-09-01' --data-raw '{\n",
                      "    \"name\": \"my-resource\",\n",
                      "    \"project_id\": \"12ac4cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"description\": \"This is my first resource.\",\n",
                      "    \"tags\": [\n",
                      "        \"t1\",\n",
                      "        \"t2\"\n",
                      "    ],\n",
                      "    \"version\": \"<string>\",\n",
                      "    \"platform\": {\n",
                      "        \"name\": \"<string>\",\n",
                      "        \"versions\": [\n",
                      "            \"<string>\",\n",
                      "            \"<string>\"\n",
                      "        ]\n",
                      "    },\n",
                      "    \"command\": \"<string>\",\n",
                      "    \"custom\": \"<object>\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\"], \\\"version\\\": \\\"<string>\\\", \\\"platform\\\": { \\\"name\\\": \\\"<string>\\\", \\\"versions\\\": [ \\\"<string>\\\", \\\"<string>\\\"] }, \\\"command\\\": \\\"<string>\\\", \\\"custom\\\": \\\"<object>\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=2020-09-01\"\n\npayload = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"version\\\": \\\"<string>\\\", \\\"platform\\\": { \\\"name\\\": \\\"<string>\\\", \\\"versions\\\": [ \\\"<string>\\\", \\\"<string>\\\" ] }, \\\"command\\\": \\\"<string>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"version\\\": \\\"<string>\\\", \\\"platform\\\": { \\\"name\\\": \\\"<string>\\\", \\\"versions\\\": [ \\\"<string>\\\", \\\"<string>\\\" ] }, \\\"command\\\": \\\"<string>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"version\\\": \\\"<string>\\\", \\\"platform\\\": { \\\"name\\\": \\\"<string>\\\", \\\"versions\\\": [ \\\"<string>\\\", \\\"<string>\\\" ] }, \\\"command\\\": \\\"<string>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"version\\\": \\\"<string>\\\", \\\"platform\\\": { \\\"name\\\": \\\"<string>\\\", \\\"versions\\\": [ \\\"<string>\\\", \\\"<string>\\\" ] }, \\\"command\\\": \\\"<string>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"version\\\": \\\"<string>\\\", \\\"platform\\\": { \\\"name\\\": \\\"<string>\\\", \\\"versions\\\": [ \\\"<string>\\\", \\\"<string>\\\" ] }, \\\"command\\\": \\\"<string>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"version\\\": \\\"<string>\\\", \\\"platform\\\": { \\\"name\\\": \\\"<string>\\\", \\\"versions\\\": [ \\\"<string>\\\", \\\"<string>\\\" ] }, \\\"command\\\": \\\"<string>\\\", \\\"custom\\\": \\\"<object>\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "model_definitions_list",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Retrieve the model definitions",
        "description": "Retrieve the model definitions for the specified space or project.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_definition_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/model_definitions/{model_definition_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_definition_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "model_definitions_get",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Retrieve the model definition",
        "description": "Retrieve the model definition with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_definition_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "model_definitions_update",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Update the model definition",
        "description": "Update the model definition with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "common_patch_request_helper",
        "responses": {
          "200": {
            "description": "Model definition has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_definition_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}   ]\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PATCH\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "model_definitions_delete",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Delete the model definition",
        "description": "Delete the model definition with the specified identifier. This will delete all revisions of\nthis model definition as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Model definition deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/model_definitions/{model_definition_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_definition_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "model_definitions_create_revision",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Create a new model definition revision",
        "description": "Create a new model definition revision.\nThe current metadata and content for\nmodel_definition_id will be taken and a new revision created.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/model_definition_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Model definition revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_definition_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (model definition artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"commit_message\": \"Updated for TF 2.0\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "model_definitions_list_revisions",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Retrieve the model definition revisions",
        "description": "Retrieve the model definition revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Model definition revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/model_definition_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/model_definitions/{model_definition_id}/model": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_model_definition_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "put": {
        "operationId": "model_definitions_upload_model",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Upload the model definition model",
        "description": "Upload the model definition model. Model definitions for Deep Learning accept a zip file that contains one or more     python files organized in any directory structure.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ModelDefinitionBody"
        },
        "responses": {
          "201": {
            "description": "Model definition model uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_metadata"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new model definition attachment,\ne.g. `/ml/v4/model_definitions/459afef1-252f-424b-b52d-5cdd98128fa3/model?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "upload-model",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Put request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PUT 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PUT\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PUT\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PUT\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Put.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Put request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "put example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PUT\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "model_definitions_download_model",
        "tags": [
          "Model Definitions"
        ],
        "summary": "Download the model definition model",
        "description": "Download the model definition model.\nIt is possible to get the `model` for a given\nrevision of the `model definition`.\nModel definitions for Deep Learning accept a zip file that contains one or more     python files organized in any directory structure.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApplicationZip"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/model_definitions/:model_definition_id/model?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/training_definitions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "training_definitions_create",
        "tags": [
          "Training Definitions"
        ],
        "summary": "Create a new training definition",
        "description": "Create a new training definition with the given payload. A training definition represents the training meta-data necessary to start a training job.\n",
        "requestBody": {
          "description": "Payload for creating the training definition. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/training_definition_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Training definition created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_definition_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new training definition artifact,\ne.g. `/ml/v4/training_definitions/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=2020-09-01' --data-raw '{\n",
                      "    \"name\": \"my-resource\",\n",
                      "    \"project_id\": \"12ac4cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"description\": \"This is my first resource.\",\n",
                      "    \"tags\": [\n",
                      "        \"t1\",\n",
                      "        \"t2\"\n",
                      "    ],\n",
                      "    \"experiment\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\"\n",
                      "    },\n",
                      "    \"pipeline\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\",\n",
                      "        \"model_type\": \"<string>\",\n",
                      "        \"data_bindings\": [\n",
                      "            {\n",
                      "                \"data_reference_name\": \"<string>\",\n",
                      "                \"node_id\": \"<string>\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"data_reference_name\": \"<string>\",\n",
                      "                \"node_id\": \"<string>\"\n",
                      "            }\n",
                      "        ],\n",
                      "        \"nodes_parameters\": [\n",
                      "            {\n",
                      "                \"node_id\": \"<string>\",\n",
                      "                \"parameters\": \"<object>\"\n",
                      "            },\n",
                      "            {\n",
                      "                \"node_id\": \"<string>\",\n",
                      "                \"parameters\": \"<object>\"\n",
                      "            }\n",
                      "        ],\n",
                      "        \"hardware_spec\": {\n",
                      "            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "            \"rev\": \"2\",\n",
                      "            \"name\": \"<string>\",\n",
                      "            \"num_nodes\": \"<integer>\"\n",
                      "        },\n",
                      "        \"hybrid_pipeline_hardware_specs\": [\n",
                      "            {\n",
                      "                \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "                \"hardware_spec\": {\n",
                      "                    \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                    \"rev\": \"2\",\n",
                      "                    \"name\": \"<string>\",\n",
                      "                    \"num_nodes\": \"<integer>\"\n",
                      "                }\n",
                      "            },\n",
                      "            {\n",
                      "                \"node_runtime_id\": \"auto_ai.kb\",\n",
                      "                \"hardware_spec\": {\n",
                      "                    \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "                    \"rev\": \"2\",\n",
                      "                    \"name\": \"<string>\",\n",
                      "                    \"num_nodes\": \"<integer>\"\n",
                      "                }\n",
                      "            }\n",
                      "        ]\n",
                      "    },\n",
                      "    \"model_definition\": {\n",
                      "        \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "        \"rev\": \"2\",\n",
                      "        \"model_type\": \"<string>\",\n",
                      "        \"hardware_spec\": {\n",
                      "            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "            \"rev\": \"2\",\n",
                      "            \"name\": \"<string>\",\n",
                      "            \"num_nodes\": \"<integer>\"\n",
                      "        },\n",
                      "        \"software_spec\": {\n",
                      "            \"id\": \"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\",\n",
                      "            \"rev\": \"2\",\n",
                      "            \"name\": \"...\"\n",
                      "        },\n",
                      "        \"command\": \"<string>\",\n",
                      "        \"parameters\": \"<object>\"\n",
                      "    },\n",
                      "    \"training_data_references\": [\n",
                      "        {\n",
                      "            \"type\": \"<string>\",\n",
                      "            \"id\": \"<string>\",\n",
                      "            \"connection\": \"<object>\",\n",
                      "            \"location\": \"<object>\",\n",
                      "            \"schema\": {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        },\n",
                      "        {\n",
                      "            \"type\": \"<string>\",\n",
                      "            \"id\": \"<string>\",\n",
                      "            \"connection\": \"<object>\",\n",
                      "            \"location\": \"<object>\",\n",
                      "            \"schema\": {\n",
                      "                \"id\": \"<string>\",\n",
                      "                \"fields\": [\n",
                      "                  {\n",
                      "                    \"name\": \"duration\",\n",
                      "                    \"type\": \"number\"\n",
                      "                  }\n",
                      "                ],\n",
                      "                \"name\": \"<string>\"\n",
                      "            }\n",
                      "        }\n",
                      "    ],\n",
                      "    \"results_reference\": {\n",
                      "        \"type\": \"<string>\",\n",
                      "        \"location\": \"<object>\",\n",
                      "        \"id\": \"<string>\",\n",
                      "        \"connection\": \"<object>\"\n",
                      "    }\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\"], \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\"}, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"}, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\"} ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"} ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"} } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\"}, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\"}, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\"}, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"} }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\"} } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\"}   }\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=2020-09-01\"\n\npayload = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"}], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"name\\\": \\\"my-resource\\\", \\\"project_id\\\": \\\"12ac4cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"description\\\": \\\"This is my first resource.\\\", \\\"tags\\\": [ \\\"t1\\\", \\\"t2\\\" ], \\\"experiment\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\" }, \\\"pipeline\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"data_bindings\\\": [ { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" }, { \\\"data_reference_name\\\": \\\"<string>\\\", \\\"node_id\\\": \\\"<string>\\\" } ], \\\"nodes_parameters\\\": [ { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, { \\\"node_id\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" } ], \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } }, { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" } } ] }, \\\"model_definition\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"model_type\\\": \\\"<string>\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"<string>\\\", \\\"num_nodes\\\": \\\"<integer>\\\" }, \\\"software_spec\\\": { \\\"id\\\": \\\"4cedab6d-e8e4-4214-b81a-2ddb122db2ab\\\", \\\"rev\\\": \\\"2\\\", \\\"name\\\": \\\"...\\\" }, \\\"command\\\": \\\"<string>\\\", \\\"parameters\\\": \\\"<object>\\\" }, \\\"training_data_references\\\": [ { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } }, { \\\"type\\\": \\\"<string>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\", \\\"location\\\": \\\"<object>\\\", \\\"schema\\\": { \\\"id\\\": \\\"<string>\\\", \\\"fields\\\": [ {\\\"name\\\": \\\"duration\\\", \\\"type\\\": \\\"number\\\"} ], \\\"name\\\": \\\"<string>\\\" } } ], \\\"results_reference\\\": { \\\"type\\\": \\\"<string>\\\", \\\"location\\\": \\\"<object>\\\", \\\"id\\\": \\\"<string>\\\", \\\"connection\\\": \\\"<object>\\\" }\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "training_definitions_list",
        "tags": [
          "Training Definitions"
        ],
        "summary": "Retrieve the training definitions",
        "description": "Retrieve the training definitions for the specified space or project.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_definition_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions?space_id=<string>&project_id=<string>&start=<string>&limit=100&tag.value=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/training_definitions/{training_definition_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_training_definition_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "training_definitions_get",
        "tags": [
          "Training Definitions"
        ],
        "summary": "Retrieve the training definition",
        "description": "Retrieve the training definition with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_definition_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "training_definitions_update",
        "tags": [
          "Training Definitions"
        ],
        "summary": "Update the training definition",
        "description": "Update the training definition with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n- `/federated_learning`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "training_definition_patch_helper",
        "responses": {
          "200": {
            "description": "Training definition has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_definition_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}   ]\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\").method(\"PATCH\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "\nimport requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "training_definitions_delete",
        "tags": [
          "Training Definitions"
        ],
        "summary": "Delete the training definition",
        "description": "Delete the training definition with the specified identifier. This will delete all revisions of\nthis training definition as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Training definition deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body\n,"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=%3Cstring%3E&project_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id?space_id=<string>&project_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/training_definitions/{training_definition_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_training_definition_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "training_definitions_create_revision",
        "tags": [
          "Training Definitions"
        ],
        "summary": "Create a new training definition revision",
        "description": "Create a new training definition revision.\nThe current metadata and content for\ntraining_definition_id will be taken and a new revision created.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/training_definition_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Training definition revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_definition_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (training definition artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"commit_message\": \"Updated for TF 2.0\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "training_definitions_list_revisions",
        "tags": [
          "Training Definitions"
        ],
        "summary": "Retrieve the training definition revisions",
        "description": "Retrieve the training definition revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Training definition revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/training_definition_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?space_id=%3Cstring%3E&project_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()\n"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/training_definitions/:training_definition_id/revisions?space_id=<string>&project_id=<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployment_job_definitions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "deployment_job_definitions_create",
        "tags": [
          "Deployment Job Definitions"
        ],
        "summary": "Create a new deployment job definition",
        "description": "Create a new deployment job definition with the given payload. A deployment job definition represents the deployment metadata information in order to create a batch job in WML. This contains the same metadata used by the /ml/v4/deployment_jobs endpoint. This means that when submitting batch deployment jobs the user can either provide the job definition inline or reference a job definition in a query parameter.\n",
        "requestBody": {
          "description": "Payload for creating the deployment job definition. \n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/job_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Deployment job definition created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new deployment job definition artifact,\ne.g. `/ml/v4/deployment_job_definitions/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"name\": \"my-resource\",\n",
                      "    \"description\": \"This is my first resource.\",\n",
                      "    \"tags\": [\n",
                      "        \"t1\",\n",
                      "        \"t2\"\n",
                      "    ],\n",
                      "    \"deployment\": {\n",
                      "        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "    },\n",
                      "    \"custom\": {\n",
                      "        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "    },\n",
                      "    \"hardware_spec\": {\n",
                      "        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "    },\n",
                      "    \"hybrid_pipeline_hardware_specs\": {\n",
                      "        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "    },\n",
                      "    \"scoring\": {\n",
                      "        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "    },\n",
                      "    \"decision_optimization\": {\n",
                      "        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n",
                      "    }\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder()build();",
                      "MediaType mediaType = MediaType.parse(\"text/plain\")",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"tags\\\": [ \\\"test\\\", \\\"frank\\\" ], \\\"space_id\\\": \\\"{{space_id}}\\\", \\\"name\\\": \\\"test deployment_job_definition def\\\", \\\"description\\\": \\\"test td\\\", \\\"custom\\\": { \\\"test\\\": \\\"hi\\\" }, \\\"deployment\\\": { \\\"id\\\": \\\"1223\\\" }, \\\"decision_optimization\\\": { \\\"input_data\\\": [ { \\t\\\"id\\\": \\\"123\\\", \\t\\\"fields\\\": [], \\t\\\"values\\\": [] } ], \\\"output_data\\\": [{ \\t \\t\\t\\\"id\\\": \\\"123\\\" \\t }] }, \\\"hardware_spec\\\": { \\\"id\\\": \\\"{{hardware_spec_id}}\\\", \\\"rev\\\": \\\"12\\\", \\\"name\\\": \\\"string\\\", \\\"num_nodes\\\": 2 }, \\\"hybrid_pipeline_hardware_specs\\\": [ { \\\"node_runtime_id\\\": \\\"auto_ai.kb\\\", \\\"hardware_spec\\\": { \\\"id\\\": \\\"{{hardware_spec_id}}\\\", \\\"rev\\\": \\\"12\\\", \\\"name\\\": \\\"default_py3.6\\\", \\\"num_nodes\\\": 2 } } ]\\n}\");",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2019-10-25\").method(\"POST\", body).build();",
                      "Response response = client.newCall(request).execute();"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n",
                      "\n",
                      "url = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2019-10-25\"\n",
                      "\n",
                      "payload = \"{ \"tags\": [ \"test\", \"frank\" ], \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"name\": \"test\", \"description\": \"test td\", \"custom\": { \"test\": \"hi\" }, \"deployment\": { \"id\": \"1223\" }, \"decision_optimization\": { \"input_data\": [ { \"id\": \"123\", \"fields\": [], \"values\": [] } ], \"output_data\": [{ \"id\": \"123\" }] }, \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"string\", \"num_nodes\": 2 }, \"hybrid_pipeline_hardware_specs\": [ { \"node_runtime_id\": \"auto_ai.kb\", \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"default_py3.6\", \"num_nodes\": 2 } } ] }\"\n",
                      "\n",
                      "headers = {\n",
                      "  'Authorization': 'Bearer <token>',\n",
                      "  'Content-Type': 'application/json',\n",
                      "  'Cookie': '__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841'\n",
                      "}\n",
                      "\n",
                      "response = requests.request(\"POST\", url, headers=headers, data = payload)\n",
                      "\n",
                      "print(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;",
                      "CURLcode res;",
                      "curl = curl_easy_init();",
                      "if(curl) {",
                      "curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n",
                      "curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2019-10-25\");\n",
                      "curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n",
                      "curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n",
                      "struct curl_slist *headers = NULL;\n",
                      "headers = curl_slist_append(headers, \"Authorization: Bearer <token>\");\n",
                      "headers = curl_slist_append(headers, \"Content-Type: application/json\");\n",
                      "headers = curl_slist_append(headers, \"Cookie: __cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\");\n",
                      "curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n",
                      "const char *data = \"{ \"tags\": [ \"test\", \"frank\" ], \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"name\": \"test deployment_job_definition def\", \"description\": \"test td\", \"custom\": { \"test\": \"hi\" }, \"deployment\": { \"id\": \"1223\" }, \"decision_optimization\": { \"input_data\": [ { \"id\": \"123\", \"fields\": [], \"values\": [] } ], \"output_data\": [{  \"id\": \"123\"  }] }, \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"string\", \"num_nodes\": 2 }, \"hybrid_pipeline_hardware_specs\": [ { \"node_runtime_id\": \"auto_ai.kb\", \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"default_py3.6\", \"num_nodes\": 2 } } ]\n}\";\n",
                      "curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n",
                      "res = curl_easy_perform(curl);\n",
                      "}\n",
                      "curl_easy_cleanup(curl);\n"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main",
                      "",
                      "import (",
                      " \"fmt\"",
                      " \"strings\"",
                      " \"net/http\"",
                      " \"io/ioutil\"",
                      ")",
                      "",
                      "func main() {",
                      "",
                      " url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2019-10-25\"",
                      " method := \"POST\"",
                      "",
                      " payload := strings.NewReader(\"{ \"tags\": [ \"test\", \"frank\" ], \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"name\": \"test deployment_job_definition def\", \"description\": \"test td\", \"custom\": { \"test\": \"hi\" }, \"deployment\": { \"id\": \"1223\" }, \"decision_optimization\": { \"input_data\": [ { \"id\": \"123\", \"fields\": [], \"values\": [] } ], \"output_data\": [{  \"id\": \"123\"  }] }, \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"string\", \"num_nodes\": 2 }, \"hybrid_pipeline_hardware_specs\": [ { \"node_runtime_id\": \"auto_ai.kb\", \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"default_py3.6\", \"num_nodes\": 2 } } ]\n}\")",
                      "",
                      " client := &http.Client {",
                      " }",
                      " req, err := http.NewRequest(method, url, payload)",
                      "",
                      " if err != nil {",
                      "  fmt.Println(err)",
                      " }",
                      " req.Header.Add(\"Authorization\", \"Bearer <token>\")",
                      " req.Header.Add(\"Content-Type\", \"application/json\")",
                      " req.Header.Add(\"Cookie\", \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\")",
                      "",
                      " res, err := client.Do(req)",
                      " defer res.Body.Close()",
                      " body, err := ioutil.ReadAll(res.Body)",
                      "",
                      " fmt.Println(string(body))",
                      "}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"",
                      "require \"net/http\"",
                      "",
                      "url = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2019-10-25\")",
                      "",
                      "https = Net::HTTP.new(url.host, url.port);",
                      "https.use_ssl = true",
                      "",
                      "request = Net::HTTP::Post.new(url)",
                      "request[\"Authorization\"] = \"Bearer <token>\"",
                      "request[\"Content-Type\"] = \"application/json\"",
                      "request[\"Cookie\"] = \"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\"",
                      "request.body = \"{ \"tags\": [ \"test\", \"frank\" ], \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"name\": \"test deployment_job_definition def\", \"description\": \"test td\", \"custom\": { \"test\": \"hi\" }, \"deployment\": { \"id\": \"1223\" }, \"decision_optimization\": { \"input_data\": [ { \t\"id\": \"123\", \t\"fields\": [], \t\"values\": [] } ], \"output_data\": [{ \t \t\t\"id\": \"123\" \t }] }, \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"string\", \"num_nodes\": 2 }, \"hybrid_pipeline_hardware_specs\": [ { \"node_runtime_id\": \"auto_ai.kb\", \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"default_py3.6\", \"num_nodes\": 2 } } ]\n}\"",
                      "",
                      "response = https.request(request)",
                      "puts response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation",
                      "",
                      "var semaphore = DispatchSemaphore (value: 0)",
                      "",
                      "let parameters = \"{ \"tags\": [ \"test\", \"frank\" ], \"space_id\": \"d814cfc4-fba7-4130-b31a-06151b88ea38\", \"name\": \"test deployment_job_definition def\", \"description\": \"test td\", \"custom\": { \"test\": \"hi\" }, \"deployment\": { \"id\": \"1223\" }, \"decision_optimization\": { \"input_data\": [ { \t\"id\": \"123\", \t\"fields\": [], \t\"values\": [] } ], \"output_data\": [{ \t \t\t\"id\": \"123\" \t }] }, \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"string\", \"num_nodes\": 2 }, \"hybrid_pipeline_hardware_specs\": [ { \"node_runtime_id\": \"auto_ai.kb\", \"hardware_spec\": { \"id\": \"{{hardware_spec_id}}\", \"rev\": \"12\", \"name\": \"default_py3.6\", \"num_nodes\": 2 } } ]\n}\"",
                      "let postData = parameters.data(using: .utf8)",
                      "",
                      "var request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2019-10-25\")!,timeoutInterval: Double.infinity)",
                      "request.addValue(\"Bearer <token>\", forHTTPHeaderField: \"Authorization\")",
                      "request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")",
                      "request.addValue(\"__cfduid=dc6cd6997a0c08467ec30c4ecf7a8db7c1601476841\", forHTTPHeaderField: \"Cookie\")",
                      "",
                      "request.httpMethod = \"POST\"",
                      "request.httpBody = postData",
                      "",
                      "let task = URLSession.shared.dataTask(with: request) { data, response, error in ",
                      "  guard let data = data else {",
                      "    print(String(describing: error))",
                      "    return",
                      "  }",
                      "  print(String(data: data, encoding: .utf8)!)",
                      "  semaphore.signal()",
                      "}",
                      "",
                      "task.resume()",
                      "semaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {",
                      " \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?version=2019-10-25\"",
                      " \"method\": \"POST\"",
                      " \"timeout\": 0",
                      " \"data\": \"{",
                      "   \"tags\": [",
                      "     \"test\",",
                      "     \"frank\"],",
                      "   \"space_id\": \"{{space_id}}\",",
                      "   \"name\": \"test deployment_job_definition def\"",
                      "   \"description\": \"test td\"",
                      "   \"custom\": {",
                      "     \"test\": \"hi\"",
                      "   },",
                      "   \"deployment\": {",
                      "     \"id\": \"1223\"",
                      "   },",
                      "   \"decision_optimization\": {",
                      "   \"input_data\": [",
                      "     { \"id\": \"123\",",
                      "       \"fields\": [],",
                      "       \"values\": []",
                      "     }",
                      "   ],",
                      "   \"output_data\": [{",
                      "     \"id\": \"123\"}]",
                      "  },",
                      "  \"hardware_spec\": {",
                      "  \"id\": \"{{hardware_spec_id}}\",",
                      "  \"rev\": \"12\",",
                      "  \"name\": \"string\",",
                      "  \"num_nodes\": 2",
                      "  },",
                      "  \"hybrid_pipeline_hardware_specs\": [",
                      "    {",
                      "      \"node_runtime_id\": \"auto_ai.kb\",",
                      "      \"hardware_spec\": {",
                      "      \"id\": \"{{hardware_spec_id}}\",",
                      "      \"rev\": \"12\",",
                      "      \"name\": \"default_py3.6\",",
                      "      \"num_nodes\": 2",
                      "    }",
                      "  }",
                      "  ]",
                      " }",
                      "};",
                      "$.ajax(settings).done(function (response) {",
                      "console.log(response);",
                      "});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "deployment_job_definitions_list",
        "tags": [
          "Deployment Job Definitions"
        ],
        "summary": "Retrieve the deployment job definitions",
        "description": "Retrieve the deployment job definitions for the specified space.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id_mandatory"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?space_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?space_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?space_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?space_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?space_id=<string>&start=<string>&limit=100&tag.value=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?space_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&tag.value=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions?space_id=<string>&start=<string>&limit=100&tag.value=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployment_job_definitions/{job_definition_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_job_definition_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "deployment_job_definitions_get",
        "tags": [
          "Deployment Job Definitions"
        ],
        "summary": "Retrieve the deployment job definition",
        "description": "Retrieve the deployment job definition with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. \n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id_mandatory"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&rev=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&rev=<string>&version=2020-09-01\").method(\"GET\", null).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&rev=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&rev=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&rev=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&rev=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&rev=<string>&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "patch": {
        "operationId": "deployment_job_definitions_update",
        "tags": [
          "Deployment Job Definitions"
        ],
        "summary": "Update the deployment job definition",
        "description": "Update the deployment job definition with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n- `/deployment`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id_mandatory"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "deployment_job_definition_patch_helper",
        "responses": {
          "200": {
            "description": "Deployment job definition has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch",
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X PATCH 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=2020-09-01' --data-raw '[\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    },\n",
                      "    {\n",
                      "        \"op\": \"<string>\",\n",
                      "        \"path\": \"<string>\",\n",
                      "        \"value\": \"<object>\"\n",
                      "    }\n",
                      "]'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\"}   ]\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=2020-09-01\").method(\"PATCH\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=2020-09-01\"\n\npayload = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nheaders= {}\n\nresponse = requests.request(\"PATCH\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"PATCH\"\n\n  payload := strings.NewReader(\"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Patch request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"PATCH\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "patch example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=<date>\",\n  \"method\": \"PATCH\",\n  \"timeout\": 0,\n  \"data\": \"[ { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }, { \\\"op\\\": \\\"<string>\\\", \\\"path\\\": \\\"<string>\\\", \\\"value\\\": \\\"<object>\\\" }\\n]\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deployment_job_definitions_delete",
        "tags": [
          "Deployment Job Definitions"
        ],
        "summary": "Delete the deployment job definition",
        "description": "Delete the deployment job definition with the specified identifier. This will delete all revisions of\nthis deployment job definition as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id_mandatory"
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment job definition deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&version=%3Cdate%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Delete request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=%3Cstring%3E&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "delete example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id?space_id=<string>&version=<date>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/deployment_job_definitions/{job_definition_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_job_definition_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "deployment_job_definitions_create_revision",
        "tags": [
          "Deployment Job Definitions"
        ],
        "summary": "Create a new deployment job definition revision",
        "description": "Create a new deployment job definition revision.\nThe current metadata and content for\njob_definition_id will be taken and a new revision created.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/job_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Deployment job definition revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (deployment job definition artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=2020-09-01' --data-raw '{\n",
                      "    \"space_id\": \"3fc54cf1-252f-424b-b52d-5cdd9814987f\",\n",
                      "    \"commit_message\": \"Updated for TF 2.0\"\n",
                      "}'\n"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "OkHttpClient client = new OkHttpClient().newBuilder().build();\n",
                      "MediaType mediaType = MediaType.parse(\"text/plain\");\n",
                      "RequestBody body = RequestBody.create(mediaType, \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"}\");\n",
                      "Request request = new Request.Builder().url(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=2020-09-01\").method(\"POST\", body).build();\n",
                      "Response response = client.newCall(request).execute();\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=2020-09-01\"\n\npayload = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nheaders= {}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=%3Cdate%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Post request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nlet parameters = \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "post example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?version=<date>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"data\": \"{ \\\"space_id\\\": \\\"3fc54cf1-252f-424b-b52d-5cdd9814987f\\\", \\\"commit_message\\\": \\\"Updated for TF 2.0\\\"\\n}\",\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "get": {
        "operationId": "deployment_job_definitions_list_revisions",
        "tags": [
          "Deployment Job Definitions"
        ],
        "summary": "Retrieve the deployment job definition revisions",
        "description": "Retrieve the deployment job definition revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id_mandatory"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment job definition revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET 'https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?space_id=<string>&start=<string>&limit=100&version=2020-09-01'\n"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import requests\n\nurl = \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?space_id=<string>&start=<string>&limit=100&version=2020-09-01\"\n\npayload = {}\nheaders= {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"
                    ]
                  }
                ]
              }
            ],
            "C": [
              {
                "name": "Get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?space_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n}\ncurl_easy_cleanup(curl);"
                    ]
                  }
                ]
              }
            ],
            "Go": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?space_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=%3Cdate%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n  }\n  res, err := client.Do(req)\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n\n  fmt.Println(string(body))\n}"
                    ]
                  }
                ]
              }
            ],
            "Ruby": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?space_id=<string>&start=<string>&limit=100&version=2020-09-01\")\n\nhttps = Net::HTTP.new(url.host, url.port);\nhttps.use_ssl = true\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = https.request(request)\nputs response.read_body"
                    ]
                  }
                ]
              }
            ],
            "Swift": [
              {
                "name": "Get request,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import Foundation\n\nvar semaphore = DispatchSemaphore (value: 0)\n\nvar request = URLRequest(url: URL(string: \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?space_id=%3Cstring%3E&start=%3Cstring%3E&limit=100&version=2020-09-01\")!,timeoutInterval: Double.infinity)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n  semaphore.signal()\n}\n\ntask.resume()\nsemaphore.wait()"
                    ]
                  }
                ]
              }
            ],
            "JavaScript": [
              {
                "name": "get example,",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "var settings = {\n  \"url\": \"https://us-south.ml.cloud.ibm.com/ml/v4/deployment_job_definitions/:job_definition_id/revisions?space_id=<string>&start=<string>&limit=100&version=<date>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/ml/v4/remote_training_systems": {
      "parameters": [
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "remote_training_systems_create",
        "tags": [
          "Remote Training Systems"
        ],
        "summary": "Create a new remote training system",
        "description": "Create a new remote training system with the given payload. A remote training system represents a remote system used by Federated Learning. This definition is necessary to control who can register to a federated learning job.\n",
        "requestBody": {
          "description": "Payload for creating the remote training system. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/remote_training_system_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Remote training system created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remote_training_system_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new remote training system artifact,\ne.g. `/ml/v4/remote_training_systems/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "get": {
        "operationId": "remote_training_systems_list",
        "tags": [
          "Remote Training Systems"
        ],
        "summary": "Retrieve the remote training systems",
        "description": "Retrieve the remote training systems for the specified space or project.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remote_training_system_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/ml/v4/remote_training_systems/{remote_training_system_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_remote_training_system_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "operationId": "remote_training_systems_get",
        "tags": [
          "Remote Training Systems"
        ],
        "summary": "Retrieve the remote training system",
        "description": "Retrieve the remote training system with the specified identifier. If `rev` query parameter is provided,\n`rev=latest` will fetch the latest revision. A call with `rev={revision_number}` will fetch the given\nrevision_number record. Either `space_id` or `project_id` has to be provided and is mandatory.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/rev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remote_training_system_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "operationId": "remote_training_systems_update",
        "tags": [
          "Remote Training Systems"
        ],
        "summary": "Update the remote training system",
        "description": "Update the remote training system with the provided patch data.\nThe following fields can be patched:\n- `/tags`\n- `/name`\n- `/description`\n- `/custom`\n- `/organization`\n- `/allowed_identities`\n- `/remote_admin`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "description": "Input For Patch. This is the patch body which corresponds to the JavaScript\nObject Notation (JSON) Patch standard (RFC 6902).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json_patch"
              }
            }
          },
          "required": true
        },
        "x-json-patch-helper-model": "remote_training_system_patch_helper",
        "responses": {
          "200": {
            "description": "Remote training system has been patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remote_training_system_resource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-codegen-request-body-name": "json-patch"
      },
      "delete": {
        "operationId": "remote_training_systems_delete",
        "tags": [
          "Remote Training Systems"
        ],
        "summary": "Delete the remote training system",
        "description": "Delete the remote training system with the specified identifier. This will delete all revisions of\nthis remote training system as well. For each revision all attachments will also be deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Remote training system deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/ml/v4/remote_training_systems/{remote_training_system_id}/revisions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/path_remote_training_system_id"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "post": {
        "operationId": "remote_training_systems_create_revision",
        "tags": [
          "Remote Training Systems"
        ],
        "summary": "Create a new remote training system revision",
        "description": "Create a new remote training system revision.\nThe current metadata and content for\nremote_training_system_id will be taken and a new revision created.\nEither `space_id` or `project_id` has to be provided and is mandatory.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/remote_training_system_revision_entity_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Remote training system revision created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remote_training_system_resource"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "The location of the new created resource (remote training system artifact),\ne.g. `/ml/v4/459afef1-252f-424b-b52d-5cdd98128fa3/53dc4cf1-252f-424b-b52d-5cdd9814987f?space_id=fab7ac25-2f97-41e1-8f77-203c3423e5f4`.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "get": {
        "operationId": "remote_training_systems_list_revisions",
        "tags": [
          "Remote Training Systems"
        ],
        "summary": "Retrieve the remote training system revisions",
        "description": "Retrieve the remote training system revisions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Remote training system revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remote_training_system_resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  }
}